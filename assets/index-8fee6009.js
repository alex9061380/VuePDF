var GC=Object.defineProperty;var eC=(wI,c,$)=>c in wI?GC(wI,c,{enumerable:!0,configurable:!0,writable:!0,value:$}):wI[c]=$;var cg=(wI,c,$)=>(eC(wI,typeof c!="symbol"?c+"":c,$),$),ug=(wI,c,$)=>{if(!c.has(wI))throw TypeError("Cannot "+$)};var VI=(wI,c,$)=>(ug(wI,c,"read from private field"),$?$.call(wI):c.get(wI)),zI=(wI,c,$)=>{if(c.has(wI))throw TypeError("Cannot add the same private member more than once");c instanceof WeakSet?c.add(wI):c.set(wI,$)},UI=(wI,c,$,h)=>(ug(wI,c,"write to private field"),h?h.call(wI,$):c.set(wI,$),$),yg=(wI,c,$,h)=>({set _(M){UI(wI,c,M,$)},get _(){return VI(wI,c,h)}}),jI=(wI,c,$)=>(ug(wI,c,"access private method"),$);import{k as defineComponent,g as ref,j as watch,l as onMounted,o as openBlock,c as createElementBlock,a as createBaseVNode,h as withDirectives,m as vShow,p as renderSlot,s as shallowRef}from"./app-268824dc.js";function getAugmentedNamespace$1(wI){if(wI.__esModule)return wI;var c=wI.default;if(typeof c=="function"){var $=function h(){if(this instanceof h){var M=[null];M.push.apply(M,arguments);var _=Function.bind.apply(c,M);return new _}return c.apply(this,arguments)};$.prototype=c.prototype}else $={};return Object.defineProperty($,"__esModule",{value:!0}),Object.keys(wI).forEach(function(h){var M=Object.getOwnPropertyDescriptor(wI,h);Object.defineProperty($,h,M.get?M:{enumerable:!0,get:function(){return wI[h]}})}),$}function commonjsRequire$1(wI){throw new Error('Could not dynamically require "'+wI+'". Please configure the dynamicRequireTargets or/and ignoreDynamicRequires option of @rollup/plugin-commonjs appropriately for this require call to work.')}var pdf$1={exports:{}};const __viteBrowserExternal$2={},__viteBrowserExternal$3=Object.freeze(Object.defineProperty({__proto__:null,default:__viteBrowserExternal$2},Symbol.toStringTag,{value:"Module"})),require$$5$1=getAugmentedNamespace$1(__viteBrowserExternal$3);(function(module,exports){(function(c,$){module.exports=$()})(globalThis,()=>(()=>{var __webpack_modules__=[,(wI,c,$)=>{Object.defineProperty(c,"__esModule",{value:!0}),c.VerbosityLevel=c.Util=c.UnknownErrorException=c.UnexpectedResponseException=c.UNSUPPORTED_FEATURES=c.TextRenderingMode=c.StreamType=c.RenderingIntentFlag=c.PermissionFlag=c.PasswordResponses=c.PasswordException=c.PageActionEventType=c.OPS=c.MissingPDFException=c.LINE_FACTOR=c.LINE_DESCENT_FACTOR=c.InvalidPDFException=c.ImageKind=c.IDENTITY_MATRIX=c.FormatError=c.FontType=c.FeatureTest=c.FONT_IDENTITY_MATRIX=c.DocumentActionEventType=c.CMapCompressionType=c.BaseException=c.AnnotationType=c.AnnotationStateModelType=c.AnnotationReviewState=c.AnnotationReplyType=c.AnnotationMode=c.AnnotationMarkedState=c.AnnotationFlag=c.AnnotationFieldFlag=c.AnnotationEditorType=c.AnnotationEditorPrefix=c.AnnotationEditorParamsType=c.AnnotationBorderStyleType=c.AnnotationActionEventType=c.AbortException=void 0,c.arrayByteLength=uI,c.arraysToBytes=MI,c.assert=e,c.bytesToString=Q,c.createPromiseCapability=HI,c.createValidAbsoluteUrl=x,c.escapeString=TI,c.getModificationDate=yI,c.getVerbosityLevel=mI,c.info=NI,c.isArrayBuffer=SI,c.isArrayEqual=JI,c.isAscii=vI,c.objectFromMap=tI,c.objectSize=WI,c.setVerbosityLevel=q,c.shadow=E,c.string32=ZI,c.stringToBytes=lI,c.stringToPDFString=FI,c.stringToUTF16BEString=fI,c.stringToUTF8String=PI,c.unreachable=J,c.utf8StringToString=EI,c.warn=BI,$(2);const h=[1,0,0,1,0,0];c.IDENTITY_MATRIX=h;const M=[.001,0,0,.001,0,0];c.FONT_IDENTITY_MATRIX=M;const _=1.35;c.LINE_FACTOR=_;const z=.35;c.LINE_DESCENT_FACTOR=z;const T={ANY:1,DISPLAY:2,PRINT:4,ANNOTATIONS_FORMS:16,ANNOTATIONS_STORAGE:32,ANNOTATIONS_DISABLE:64,OPLIST:256};c.RenderingIntentFlag=T;const r={DISABLE:0,ENABLE:1,ENABLE_FORMS:2,ENABLE_STORAGE:3};c.AnnotationMode=r;const Z="pdfjs_internal_editor_";c.AnnotationEditorPrefix=Z;const p={DISABLE:-1,NONE:0,FREETEXT:3,INK:15};c.AnnotationEditorType=p;const j={FREETEXT_SIZE:1,FREETEXT_COLOR:2,FREETEXT_OPACITY:3,INK_COLOR:11,INK_THICKNESS:12,INK_OPACITY:13};c.AnnotationEditorParamsType=j;const D={PRINT:4,MODIFY_CONTENTS:8,COPY:16,MODIFY_ANNOTATIONS:32,FILL_INTERACTIVE_FORMS:256,COPY_FOR_ACCESSIBILITY:512,ASSEMBLE:1024,PRINT_HIGH_QUALITY:2048};c.PermissionFlag=D;const m={FILL:0,STROKE:1,FILL_STROKE:2,INVISIBLE:3,FILL_ADD_TO_PATH:4,STROKE_ADD_TO_PATH:5,FILL_STROKE_ADD_TO_PATH:6,ADD_TO_PATH:7,FILL_STROKE_MASK:3,ADD_TO_PATH_FLAG:4};c.TextRenderingMode=m;const d={GRAYSCALE_1BPP:1,RGB_24BPP:2,RGBA_32BPP:3};c.ImageKind=d;const C={TEXT:1,LINK:2,FREETEXT:3,LINE:4,SQUARE:5,CIRCLE:6,POLYGON:7,POLYLINE:8,HIGHLIGHT:9,UNDERLINE:10,SQUIGGLY:11,STRIKEOUT:12,STAMP:13,CARET:14,INK:15,POPUP:16,FILEATTACHMENT:17,SOUND:18,MOVIE:19,WIDGET:20,SCREEN:21,PRINTERMARK:22,TRAPNET:23,WATERMARK:24,THREED:25,REDACT:26};c.AnnotationType=C;const l={MARKED:"Marked",REVIEW:"Review"};c.AnnotationStateModelType=l;const B={MARKED:"Marked",UNMARKED:"Unmarked"};c.AnnotationMarkedState=B;const Y={ACCEPTED:"Accepted",REJECTED:"Rejected",CANCELLED:"Cancelled",COMPLETED:"Completed",NONE:"None"};c.AnnotationReviewState=Y;const a={GROUP:"Group",REPLY:"R"};c.AnnotationReplyType=a;const i={INVISIBLE:1,HIDDEN:2,PRINT:4,NOZOOM:8,NOROTATE:16,NOVIEW:32,READONLY:64,LOCKED:128,TOGGLENOVIEW:256,LOCKEDCONTENTS:512};c.AnnotationFlag=i;const I={READONLY:1,REQUIRED:2,NOEXPORT:4,MULTILINE:4096,PASSWORD:8192,NOTOGGLETOOFF:16384,RADIO:32768,PUSHBUTTON:65536,COMBO:131072,EDIT:262144,SORT:524288,FILESELECT:1048576,MULTISELECT:2097152,DONOTSPELLCHECK:4194304,DONOTSCROLL:8388608,COMB:16777216,RICHTEXT:33554432,RADIOSINUNISON:33554432,COMMITONSELCHANGE:67108864};c.AnnotationFieldFlag=I;const g={SOLID:1,DASHED:2,BEVELED:3,INSET:4,UNDERLINE:5};c.AnnotationBorderStyleType=g;const o={E:"Mouse Enter",X:"Mouse Exit",D:"Mouse Down",U:"Mouse Up",Fo:"Focus",Bl:"Blur",PO:"PageOpen",PC:"PageClose",PV:"PageVisible",PI:"PageInvisible",K:"Keystroke",F:"Format",V:"Validate",C:"Calculate"};c.AnnotationActionEventType=o;const X={WC:"WillClose",WS:"WillSave",DS:"DidSave",WP:"WillPrint",DP:"DidPrint"};c.DocumentActionEventType=X;const b={O:"PageOpen",C:"PageClose"};c.PageActionEventType=b;const N={UNKNOWN:"UNKNOWN",FLATE:"FLATE",LZW:"LZW",DCT:"DCT",JPX:"JPX",JBIG:"JBIG",A85:"A85",AHX:"AHX",CCF:"CCF",RLX:"RLX"};c.StreamType=N;const F={UNKNOWN:"UNKNOWN",TYPE1:"TYPE1",TYPE1STANDARD:"TYPE1STANDARD",TYPE1C:"TYPE1C",CIDFONTTYPE0:"CIDFONTTYPE0",CIDFONTTYPE0C:"CIDFONTTYPE0C",TRUETYPE:"TRUETYPE",CIDFONTTYPE2:"CIDFONTTYPE2",TYPE3:"TYPE3",OPENTYPE:"OPENTYPE",TYPE0:"TYPE0",MMTYPE1:"MMTYPE1"};c.FontType=F;const hI={ERRORS:0,WARNINGS:1,INFOS:5};c.VerbosityLevel=hI;const YI={NONE:0,BINARY:1,STREAM:2};c.CMapCompressionType=YI;const nI={dependency:1,setLineWidth:2,setLineCap:3,setLineJoin:4,setMiterLimit:5,setDash:6,setRenderingIntent:7,setFlatness:8,setGState:9,save:10,restore:11,transform:12,moveTo:13,lineTo:14,curveTo:15,curveTo2:16,curveTo3:17,closePath:18,rectangle:19,stroke:20,closeStroke:21,fill:22,eoFill:23,fillStroke:24,eoFillStroke:25,closeFillStroke:26,closeEOFillStroke:27,endPath:28,clip:29,eoClip:30,beginText:31,endText:32,setCharSpacing:33,setWordSpacing:34,setHScale:35,setLeading:36,setFont:37,setTextRenderingMode:38,setTextRise:39,moveText:40,setLeadingMoveText:41,setTextMatrix:42,nextLine:43,showText:44,showSpacedText:45,nextLineShowText:46,nextLineSetSpacingShowText:47,setCharWidth:48,setCharWidthAndBounds:49,setStrokeColorSpace:50,setFillColorSpace:51,setStrokeColor:52,setStrokeColorN:53,setFillColor:54,setFillColorN:55,setStrokeGray:56,setFillGray:57,setStrokeRGBColor:58,setFillRGBColor:59,setStrokeCMYKColor:60,setFillCMYKColor:61,shadingFill:62,beginInlineImage:63,beginImageData:64,endInlineImage:65,paintXObject:66,markPoint:67,markPointProps:68,beginMarkedContent:69,beginMarkedContentProps:70,endMarkedContent:71,beginCompat:72,endCompat:73,paintFormXObjectBegin:74,paintFormXObjectEnd:75,beginGroup:76,endGroup:77,beginAnnotations:78,endAnnotations:79,beginAnnotation:80,endAnnotation:81,paintJpegXObject:82,paintImageMaskXObject:83,paintImageMaskXObjectGroup:84,paintImageXObject:85,paintInlineImageXObject:86,paintInlineImageXObjectGroup:87,paintImageXObjectRepeat:88,paintImageMaskXObjectRepeat:89,paintSolidColorImageMask:90,constructPath:91};c.OPS=nI;const gI={unknown:"unknown",forms:"forms",javaScript:"javaScript",signatures:"signatures",smask:"smask",shadingPattern:"shadingPattern",font:"font",errorTilingPattern:"errorTilingPattern",errorExtGState:"errorExtGState",errorXObject:"errorXObject",errorFontLoadType3:"errorFontLoadType3",errorFontState:"errorFontState",errorFontMissing:"errorFontMissing",errorFontTranslate:"errorFontTranslate",errorColorSpace:"errorColorSpace",errorOperatorList:"errorOperatorList",errorFontToUnicode:"errorFontToUnicode",errorFontLoadNative:"errorFontLoadNative",errorFontBuildPath:"errorFontBuildPath",errorFontGetPath:"errorFontGetPath",errorMarkedContent:"errorMarkedContent",errorContentSubStream:"errorContentSubStream"};c.UNSUPPORTED_FEATURES=gI;const U={NEED_PASSWORD:1,INCORRECT_PASSWORD:2};c.PasswordResponses=U;let II=hI.WARNINGS;function q(cI){Number.isInteger(cI)&&(II=cI)}function mI(){return II}function NI(cI){II>=hI.INFOS&&console.log(`Info: ${cI}`)}function BI(cI){II>=hI.WARNINGS&&console.log(`Warning: ${cI}`)}function J(cI){throw new Error(cI)}function e(cI,CI){cI||J(CI)}function w(cI){if(!cI)return!1;switch(cI.protocol){case"http:":case"https:":case"ftp:":case"mailto:":case"tel:":return!0;default:return!1}}function x(cI,CI=null,AI=null){if(!cI)return null;try{if(AI&&typeof cI=="string"){if(AI.addDefaultProtocol&&cI.startsWith("www.")){const LI=cI.match(/\./g);LI&&LI.length>=2&&(cI=`http://${cI}`)}if(AI.tryConvertEncoding)try{cI=PI(cI)}catch{}}const KI=CI?new URL(cI,CI):new URL(cI);if(w(KI))return KI}catch{}return null}function E(cI,CI,AI){return Object.defineProperty(cI,CI,{value:AI,enumerable:!0,configurable:!0,writable:!1}),AI}const P=function(){function CI(AI,KI){this.constructor===CI&&J("Cannot initialize BaseException."),this.message=AI,this.name=KI}return CI.prototype=new Error,CI.constructor=CI,CI}();c.BaseException=P;class iI extends P{constructor(CI,AI){super(CI,"PasswordException"),this.code=AI}}c.PasswordException=iI;class aI extends P{constructor(CI,AI){super(CI,"UnknownErrorException"),this.details=AI}}c.UnknownErrorException=aI;class eI extends P{constructor(CI){super(CI,"InvalidPDFException")}}c.InvalidPDFException=eI;class A extends P{constructor(CI){super(CI,"MissingPDFException")}}c.MissingPDFException=A;class W extends P{constructor(CI,AI){super(CI,"UnexpectedResponseException"),this.status=AI}}c.UnexpectedResponseException=W;class L extends P{constructor(CI){super(CI,"FormatError")}}c.FormatError=L;class S extends P{constructor(CI){super(CI,"AbortException")}}c.AbortException=S;function Q(cI){(typeof cI!="object"||cI===null||cI.length===void 0)&&J("Invalid argument for bytesToString");const CI=cI.length,AI=8192;if(CI<AI)return String.fromCharCode.apply(null,cI);const KI=[];for(let LI=0;LI<CI;LI+=AI){const rI=Math.min(LI+AI,CI),kI=cI.subarray(LI,rI);KI.push(String.fromCharCode.apply(null,kI))}return KI.join("")}function lI(cI){typeof cI!="string"&&J("Invalid argument for stringToBytes");const CI=cI.length,AI=new Uint8Array(CI);for(let KI=0;KI<CI;++KI)AI[KI]=cI.charCodeAt(KI)&255;return AI}function uI(cI){if(cI.length!==void 0)return cI.length;if(cI.byteLength!==void 0)return cI.byteLength;J("Invalid argument for arrayByteLength")}function MI(cI){const CI=cI.length;if(CI===1&&cI[0]instanceof Uint8Array)return cI[0];let AI=0;for(let rI=0;rI<CI;rI++)AI+=uI(cI[rI]);let KI=0;const LI=new Uint8Array(AI);for(let rI=0;rI<CI;rI++){let kI=cI[rI];kI instanceof Uint8Array||(typeof kI=="string"?kI=lI(kI):kI=new Uint8Array(kI));const xI=kI.byteLength;LI.set(kI,KI),KI+=xI}return LI}function ZI(cI){return String.fromCharCode(cI>>24&255,cI>>16&255,cI>>8&255,cI&255)}function WI(cI){return Object.keys(cI).length}function tI(cI){const CI=Object.create(null);for(const[AI,KI]of cI)CI[AI]=KI;return CI}function O(){const cI=new Uint8Array(4);return cI[0]=1,new Uint32Array(cI.buffer,0,1)[0]===1}function f(){try{return new Function(""),!0}catch{return!1}}class v{static get isLittleEndian(){return E(this,"isLittleEndian",O())}static get isEvalSupported(){return E(this,"isEvalSupported",f())}static get isOffscreenCanvasSupported(){return E(this,"isOffscreenCanvasSupported",typeof OffscreenCanvas<"u")}}c.FeatureTest=v;const RI=[...Array(256).keys()].map(cI=>cI.toString(16).padStart(2,"0"));class pI{static makeHexColor(CI,AI,KI){return`#${RI[CI]}${RI[AI]}${RI[KI]}`}static scaleMinMax(CI,AI){let KI;CI[0]?(CI[0]<0&&(KI=AI[0],AI[0]=AI[1],AI[1]=KI),AI[0]*=CI[0],AI[1]*=CI[0],CI[3]<0&&(KI=AI[2],AI[2]=AI[3],AI[3]=KI),AI[2]*=CI[3],AI[3]*=CI[3]):(KI=AI[0],AI[0]=AI[2],AI[2]=KI,KI=AI[1],AI[1]=AI[3],AI[3]=KI,CI[1]<0&&(KI=AI[2],AI[2]=AI[3],AI[3]=KI),AI[2]*=CI[1],AI[3]*=CI[1],CI[2]<0&&(KI=AI[0],AI[0]=AI[1],AI[1]=KI),AI[0]*=CI[2],AI[1]*=CI[2]),AI[0]+=CI[4],AI[1]+=CI[4],AI[2]+=CI[5],AI[3]+=CI[5]}static transform(CI,AI){return[CI[0]*AI[0]+CI[2]*AI[1],CI[1]*AI[0]+CI[3]*AI[1],CI[0]*AI[2]+CI[2]*AI[3],CI[1]*AI[2]+CI[3]*AI[3],CI[0]*AI[4]+CI[2]*AI[5]+CI[4],CI[1]*AI[4]+CI[3]*AI[5]+CI[5]]}static applyTransform(CI,AI){const KI=CI[0]*AI[0]+CI[1]*AI[2]+AI[4],LI=CI[0]*AI[1]+CI[1]*AI[3]+AI[5];return[KI,LI]}static applyInverseTransform(CI,AI){const KI=AI[0]*AI[3]-AI[1]*AI[2],LI=(CI[0]*AI[3]-CI[1]*AI[2]+AI[2]*AI[5]-AI[4]*AI[3])/KI,rI=(-CI[0]*AI[1]+CI[1]*AI[0]+AI[4]*AI[1]-AI[5]*AI[0])/KI;return[LI,rI]}static getAxialAlignedBoundingBox(CI,AI){const KI=pI.applyTransform(CI,AI),LI=pI.applyTransform(CI.slice(2,4),AI),rI=pI.applyTransform([CI[0],CI[3]],AI),kI=pI.applyTransform([CI[2],CI[1]],AI);return[Math.min(KI[0],LI[0],rI[0],kI[0]),Math.min(KI[1],LI[1],rI[1],kI[1]),Math.max(KI[0],LI[0],rI[0],kI[0]),Math.max(KI[1],LI[1],rI[1],kI[1])]}static inverseTransform(CI){const AI=CI[0]*CI[3]-CI[1]*CI[2];return[CI[3]/AI,-CI[1]/AI,-CI[2]/AI,CI[0]/AI,(CI[2]*CI[5]-CI[4]*CI[3])/AI,(CI[4]*CI[1]-CI[5]*CI[0])/AI]}static apply3dTransform(CI,AI){return[CI[0]*AI[0]+CI[1]*AI[1]+CI[2]*AI[2],CI[3]*AI[0]+CI[4]*AI[1]+CI[5]*AI[2],CI[6]*AI[0]+CI[7]*AI[1]+CI[8]*AI[2]]}static singularValueDecompose2dScale(CI){const AI=[CI[0],CI[2],CI[1],CI[3]],KI=CI[0]*AI[0]+CI[1]*AI[2],LI=CI[0]*AI[1]+CI[1]*AI[3],rI=CI[2]*AI[0]+CI[3]*AI[2],kI=CI[2]*AI[1]+CI[3]*AI[3],xI=(KI+kI)/2,_I=Math.sqrt((KI+kI)**2-4*(KI*kI-rI*LI))/2,$I=xI+_I||1,OI=xI-_I||1;return[Math.sqrt($I),Math.sqrt(OI)]}static normalizeRect(CI){const AI=CI.slice(0);return CI[0]>CI[2]&&(AI[0]=CI[2],AI[2]=CI[0]),CI[1]>CI[3]&&(AI[1]=CI[3],AI[3]=CI[1]),AI}static intersect(CI,AI){const KI=Math.max(Math.min(CI[0],CI[2]),Math.min(AI[0],AI[2])),LI=Math.min(Math.max(CI[0],CI[2]),Math.max(AI[0],AI[2]));if(KI>LI)return null;const rI=Math.max(Math.min(CI[1],CI[3]),Math.min(AI[1],AI[3])),kI=Math.min(Math.max(CI[1],CI[3]),Math.max(AI[1],AI[3]));return rI>kI?null:[KI,rI,LI,kI]}static bezierBoundingBox(CI,AI,KI,LI,rI,kI,xI,_I){const $I=[],OI=[[],[]];let gg,Ig,Ag,qI,lg,ig,og,Zg;for(let Gg=0;Gg<2;++Gg){if(Gg===0?(Ig=6*CI-12*KI+6*rI,gg=-3*CI+9*KI-9*rI+3*xI,Ag=3*KI-3*CI):(Ig=6*AI-12*LI+6*kI,gg=-3*AI+9*LI-9*kI+3*_I,Ag=3*LI-3*AI),Math.abs(gg)<1e-12){if(Math.abs(Ig)<1e-12)continue;qI=-Ag/Ig,0<qI&&qI<1&&$I.push(qI);continue}og=Ig*Ig-4*Ag*gg,Zg=Math.sqrt(og),!(og<0)&&(lg=(-Ig+Zg)/(2*gg),0<lg&&lg<1&&$I.push(lg),ig=(-Ig-Zg)/(2*gg),0<ig&&ig<1&&$I.push(ig))}let sg=$I.length,Cg;const dg=sg;for(;sg--;)qI=$I[sg],Cg=1-qI,OI[0][sg]=Cg*Cg*Cg*CI+3*Cg*Cg*qI*KI+3*Cg*qI*qI*rI+qI*qI*qI*xI,OI[1][sg]=Cg*Cg*Cg*AI+3*Cg*Cg*qI*LI+3*Cg*qI*qI*kI+qI*qI*qI*_I;return OI[0][dg]=CI,OI[1][dg]=AI,OI[0][dg+1]=xI,OI[1][dg+1]=_I,OI[0].length=OI[1].length=dg+2,[Math.min(...OI[0]),Math.min(...OI[1]),Math.max(...OI[0]),Math.max(...OI[1])]}}c.Util=pI;const DI=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,728,711,710,729,733,731,730,732,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8226,8224,8225,8230,8212,8211,402,8260,8249,8250,8722,8240,8222,8220,8221,8216,8217,8218,8482,64257,64258,321,338,352,376,381,305,322,339,353,382,0,8364];function FI(cI){if(cI[0]>="ï"){let AI;if(cI[0]==="þ"&&cI[1]==="ÿ"?AI="utf-16be":cI[0]==="ÿ"&&cI[1]==="þ"?AI="utf-16le":cI[0]==="ï"&&cI[1]==="»"&&cI[2]==="¿"&&(AI="utf-8"),AI)try{const KI=new TextDecoder(AI,{fatal:!0}),LI=lI(cI);return KI.decode(LI)}catch(KI){BI(`stringToPDFString: "${KI}".`)}}const CI=[];for(let AI=0,KI=cI.length;AI<KI;AI++){const LI=DI[cI.charCodeAt(AI)];CI.push(LI?String.fromCharCode(LI):cI.charAt(AI))}return CI.join("")}function TI(cI){return cI.replace(/([()\\\n\r])/g,CI=>CI===`
`?"\\n":CI==="\r"?"\\r":`\\${CI}`)}function vI(cI){return/^[\x00-\x7F]*$/.test(cI)}function fI(cI){const CI=["þÿ"];for(let AI=0,KI=cI.length;AI<KI;AI++){const LI=cI.charCodeAt(AI);CI.push(String.fromCharCode(LI>>8&255),String.fromCharCode(LI&255))}return CI.join("")}function PI(cI){return decodeURIComponent(escape(cI))}function EI(cI){return unescape(encodeURIComponent(cI))}function SI(cI){return typeof cI=="object"&&cI!==null&&cI.byteLength!==void 0}function JI(cI,CI){if(cI.length!==CI.length)return!1;for(let AI=0,KI=cI.length;AI<KI;AI++)if(cI[AI]!==CI[AI])return!1;return!0}function yI(cI=new Date){return[cI.getUTCFullYear().toString(),(cI.getUTCMonth()+1).toString().padStart(2,"0"),cI.getUTCDate().toString().padStart(2,"0"),cI.getUTCHours().toString().padStart(2,"0"),cI.getUTCMinutes().toString().padStart(2,"0"),cI.getUTCSeconds().toString().padStart(2,"0")].join("")}function HI(){const cI=Object.create(null);let CI=!1;return Object.defineProperty(cI,"settled",{get(){return CI}}),cI.promise=new Promise(function(AI,KI){cI.resolve=function(LI){CI=!0,AI(LI)},cI.reject=function(LI){CI=!0,KI(LI)}}),cI}},(wI,c,$)=>{$(3)},(wI,c)=>{Object.defineProperty(c,"__esModule",{value:!0}),c.isNodeJS=void 0;const $=typeof process=="object"&&process+""=="[object process]"&&!process.versions.nw&&!(process.versions.electron&&process.type&&process.type!=="browser");c.isNodeJS=$},(__unused_webpack_module,exports,__w_pdfjs_require__)=>{var wI,$,h,M,_,z,T,r,Z,Rg,j,D;Object.defineProperty(exports,"__esModule",{value:!0}),exports.build=exports.RenderTask=exports.PDFWorkerUtil=exports.PDFWorker=exports.PDFPageProxy=exports.PDFDocumentProxy=exports.PDFDocumentLoadingTask=exports.PDFDataRangeTransport=exports.LoopbackPort=exports.DefaultStandardFontDataFactory=exports.DefaultCanvasFactory=exports.DefaultCMapReaderFactory=void 0,exports.getDocument=getDocument,exports.setPDFNetworkStreamFactory=setPDFNetworkStreamFactory,exports.version=void 0;var _util=__w_pdfjs_require__(1),_annotation_storage=__w_pdfjs_require__(5),_display_utils=__w_pdfjs_require__(8),_font_loader=__w_pdfjs_require__(11),_canvas=__w_pdfjs_require__(12),_worker_options=__w_pdfjs_require__(15),_is_node=__w_pdfjs_require__(3),_message_handler=__w_pdfjs_require__(16),_metadata=__w_pdfjs_require__(17),_optional_content_config=__w_pdfjs_require__(18),_transport_stream=__w_pdfjs_require__(19),_xfa_text=__w_pdfjs_require__(20);const DEFAULT_RANGE_CHUNK_SIZE=65536,RENDERING_CANCELLED_TIMEOUT=100;let DefaultCanvasFactory=_display_utils.DOMCanvasFactory;exports.DefaultCanvasFactory=DefaultCanvasFactory;let DefaultCMapReaderFactory=_display_utils.DOMCMapReaderFactory;exports.DefaultCMapReaderFactory=DefaultCMapReaderFactory;let DefaultStandardFontDataFactory=_display_utils.DOMStandardFontDataFactory;if(exports.DefaultStandardFontDataFactory=DefaultStandardFontDataFactory,_is_node.isNodeJS){const{NodeCanvasFactory:d,NodeCMapReaderFactory:C,NodeStandardFontDataFactory:l}=__w_pdfjs_require__(21);exports.DefaultCanvasFactory=DefaultCanvasFactory=d,exports.DefaultCMapReaderFactory=DefaultCMapReaderFactory=C,exports.DefaultStandardFontDataFactory=DefaultStandardFontDataFactory=l}let createPDFNetworkStream;function setPDFNetworkStreamFactory(d){createPDFNetworkStream=d}function getDocument(d){const C=new PDFDocumentLoadingTask;let l;if(typeof d=="string"||d instanceof URL)l={url:d};else if((0,_util.isArrayBuffer)(d))l={data:d};else if(d instanceof PDFDataRangeTransport)l={range:d};else{if(typeof d!="object")throw new Error("Invalid parameter in getDocument, need either string, URL, TypedArray, or parameter object.");if(!d.url&&!d.data&&!d.range)throw new Error("Invalid parameter object: need either .data, .range or .url");l=d}const B=Object.create(null);let Y=null,a=null;for(const I in l){const g=l[I];switch(I){case"url":if(typeof window<"u")try{B[I]=new URL(g,window.location).href;continue}catch(o){(0,_util.warn)(`Cannot create valid URL: "${o}".`)}else if(typeof g=="string"||g instanceof URL){B[I]=g.toString();continue}throw new Error("Invalid PDF url data: either string or URL-object is expected in the url property.");case"range":Y=g;continue;case"worker":a=g;continue;case"data":if(_is_node.isNodeJS&&typeof Buffer<"u"&&g instanceof Buffer)B[I]=new Uint8Array(g);else{if(g instanceof Uint8Array)break;if(typeof g=="string")B[I]=(0,_util.stringToBytes)(g);else if(typeof g=="object"&&g!==null&&!isNaN(g.length))B[I]=new Uint8Array(g);else if((0,_util.isArrayBuffer)(g))B[I]=new Uint8Array(g);else throw new Error("Invalid PDF binary data: either TypedArray, string, or array-like object is expected in the data property.")}continue}B[I]=g}if(B.CMapReaderFactory=B.CMapReaderFactory||DefaultCMapReaderFactory,B.StandardFontDataFactory=B.StandardFontDataFactory||DefaultStandardFontDataFactory,B.ignoreErrors=B.stopAtErrors!==!0,B.fontExtraProperties=B.fontExtraProperties===!0,B.pdfBug=B.pdfBug===!0,B.enableXfa=B.enableXfa===!0,(!Number.isInteger(B.rangeChunkSize)||B.rangeChunkSize<1)&&(B.rangeChunkSize=DEFAULT_RANGE_CHUNK_SIZE),(typeof B.docBaseUrl!="string"||(0,_display_utils.isDataScheme)(B.docBaseUrl))&&(B.docBaseUrl=null),(!Number.isInteger(B.maxImageSize)||B.maxImageSize<-1)&&(B.maxImageSize=-1),typeof B.cMapUrl!="string"&&(B.cMapUrl=null),typeof B.standardFontDataUrl!="string"&&(B.standardFontDataUrl=null),typeof B.useWorkerFetch!="boolean"&&(B.useWorkerFetch=B.CMapReaderFactory===_display_utils.DOMCMapReaderFactory&&B.StandardFontDataFactory===_display_utils.DOMStandardFontDataFactory),typeof B.isEvalSupported!="boolean"&&(B.isEvalSupported=!0),typeof B.disableFontFace!="boolean"&&(B.disableFontFace=_is_node.isNodeJS),typeof B.useSystemFonts!="boolean"&&(B.useSystemFonts=!_is_node.isNodeJS&&!B.disableFontFace),(typeof B.ownerDocument!="object"||B.ownerDocument===null)&&(B.ownerDocument=globalThis.document),typeof B.disableRange!="boolean"&&(B.disableRange=!1),typeof B.disableStream!="boolean"&&(B.disableStream=!1),typeof B.disableAutoFetch!="boolean"&&(B.disableAutoFetch=!1),(0,_util.setVerbosityLevel)(B.verbosity),!a){const I={verbosity:B.verbosity,port:_worker_options.GlobalWorkerOptions.workerPort};a=I.port?PDFWorker.fromPort(I):new PDFWorker(I),C._worker=a}const i=C.docId;return a.promise.then(function(){if(C.destroyed)throw new Error("Loading aborted");const I=_fetchDocument(a,B,Y,i),g=new Promise(function(o){let X;Y?X=new _transport_stream.PDFDataTransportStream({length:B.length,initialData:B.initialData,progressiveDone:B.progressiveDone,contentDispositionFilename:B.contentDispositionFilename,disableRange:B.disableRange,disableStream:B.disableStream},Y):B.data||(X=createPDFNetworkStream({url:B.url,length:B.length,httpHeaders:B.httpHeaders,withCredentials:B.withCredentials,rangeChunkSize:B.rangeChunkSize,disableRange:B.disableRange,disableStream:B.disableStream})),o(X)});return Promise.all([I,g]).then(function([o,X]){if(C.destroyed)throw new Error("Loading aborted");const b=new _message_handler.MessageHandler(i,o,a.port),N=new WorkerTransport(b,C,X,B);C._transport=N,b.send("Ready",null)})}).catch(C._capability.reject),C}async function _fetchDocument(d,C,l,B){if(d.destroyed)throw new Error("Worker was destroyed");l&&(C.length=l.length,C.initialData=l.initialData,C.progressiveDone=l.progressiveDone,C.contentDispositionFilename=l.contentDispositionFilename);const Y=await d.messageHandler.sendWithPromise("GetDocRequest",{docId:B,apiVersion:"2.16.105",source:{data:C.data,url:C.url,password:C.password,disableAutoFetch:C.disableAutoFetch,rangeChunkSize:C.rangeChunkSize,length:C.length},maxImageSize:C.maxImageSize,disableFontFace:C.disableFontFace,docBaseUrl:C.docBaseUrl,ignoreErrors:C.ignoreErrors,isEvalSupported:C.isEvalSupported,fontExtraProperties:C.fontExtraProperties,enableXfa:C.enableXfa,useSystemFonts:C.useSystemFonts,cMapUrl:C.useWorkerFetch?C.cMapUrl:null,standardFontDataUrl:C.useWorkerFetch?C.standardFontDataUrl:null});if(C.data&&(C.data=null),d.destroyed)throw new Error("Worker was destroyed");return Y}const c=class{constructor(){this._capability=(0,_util.createPromiseCapability)(),this._transport=null,this._worker=null,this.docId=`d${yg(c,wI)._++}`,this.destroyed=!1,this.onPassword=null,this.onProgress=null,this.onUnsupportedFeature=null}get promise(){return this._capability.promise}async destroy(){var C;this.destroyed=!0,await((C=this._transport)==null?void 0:C.destroy()),this._transport=null,this._worker&&(this._worker.destroy(),this._worker=null)}};let PDFDocumentLoadingTask=c;wI=new WeakMap,zI(PDFDocumentLoadingTask,wI,0),exports.PDFDocumentLoadingTask=PDFDocumentLoadingTask;class PDFDataRangeTransport{constructor(C,l,B=!1,Y=null){this.length=C,this.initialData=l,this.progressiveDone=B,this.contentDispositionFilename=Y,this._rangeListeners=[],this._progressListeners=[],this._progressiveReadListeners=[],this._progressiveDoneListeners=[],this._readyCapability=(0,_util.createPromiseCapability)()}addRangeListener(C){this._rangeListeners.push(C)}addProgressListener(C){this._progressListeners.push(C)}addProgressiveReadListener(C){this._progressiveReadListeners.push(C)}addProgressiveDoneListener(C){this._progressiveDoneListeners.push(C)}onDataRange(C,l){for(const B of this._rangeListeners)B(C,l)}onDataProgress(C,l){this._readyCapability.promise.then(()=>{for(const B of this._progressListeners)B(C,l)})}onDataProgressiveRead(C){this._readyCapability.promise.then(()=>{for(const l of this._progressiveReadListeners)l(C)})}onDataProgressiveDone(){this._readyCapability.promise.then(()=>{for(const C of this._progressiveDoneListeners)C()})}transportReady(){this._readyCapability.resolve()}requestDataRange(C,l){(0,_util.unreachable)("Abstract method PDFDataRangeTransport.requestDataRange")}abort(){}}exports.PDFDataRangeTransport=PDFDataRangeTransport;class PDFDocumentProxy{constructor(C,l){this._pdfInfo=C,this._transport=l,Object.defineProperty(this,"fingerprint",{get(){return(0,_display_utils.deprecated)("`PDFDocumentProxy.fingerprint`, please use `PDFDocumentProxy.fingerprints` instead."),this.fingerprints[0]}}),Object.defineProperty(this,"getStats",{value:async()=>((0,_display_utils.deprecated)("`PDFDocumentProxy.getStats`, please use the `PDFDocumentProxy.stats`-getter instead."),this.stats||{streamTypes:{},fontTypes:{}})})}get annotationStorage(){return this._transport.annotationStorage}get numPages(){return this._pdfInfo.numPages}get fingerprints(){return this._pdfInfo.fingerprints}get stats(){return this._transport.stats}get isPureXfa(){return!!this._transport._htmlForXfa}get allXfaHtml(){return this._transport._htmlForXfa}getPage(C){return this._transport.getPage(C)}getPageIndex(C){return this._transport.getPageIndex(C)}getDestinations(){return this._transport.getDestinations()}getDestination(C){return this._transport.getDestination(C)}getPageLabels(){return this._transport.getPageLabels()}getPageLayout(){return this._transport.getPageLayout()}getPageMode(){return this._transport.getPageMode()}getViewerPreferences(){return this._transport.getViewerPreferences()}getOpenAction(){return this._transport.getOpenAction()}getAttachments(){return this._transport.getAttachments()}getJavaScript(){return this._transport.getJavaScript()}getJSActions(){return this._transport.getDocJSActions()}getOutline(){return this._transport.getOutline()}getOptionalContentConfig(){return this._transport.getOptionalContentConfig()}getPermissions(){return this._transport.getPermissions()}getMetadata(){return this._transport.getMetadata()}getMarkInfo(){return this._transport.getMarkInfo()}getData(){return this._transport.getData()}getDownloadInfo(){return this._transport.downloadInfoCapability.promise}cleanup(C=!1){return this._transport.startCleanup(C||this.isPureXfa)}destroy(){return this.loadingTask.destroy()}get loadingParams(){return this._transport.loadingParams}get loadingTask(){return this._transport.loadingTask}saveDocument(){return this._transport.annotationStorage.size<=0&&(0,_display_utils.deprecated)("saveDocument called while `annotationStorage` is empty, please use the getData-method instead."),this._transport.saveDocument()}getFieldObjects(){return this._transport.getFieldObjects()}hasJSActions(){return this._transport.hasJSActions()}getCalculationOrderIds(){return this._transport.getCalculationOrderIds()}}exports.PDFDocumentProxy=PDFDocumentProxy;class PDFPageProxy{constructor(C,l,B,Y,a=!1){this._pageIndex=C,this._pageInfo=l,this._ownerDocument=Y,this._transport=B,this._stats=a?new _display_utils.StatTimer:null,this._pdfBug=a,this.commonObjs=B.commonObjs,this.objs=new PDFObjects,this._bitmaps=new Set,this.cleanupAfterRender=!1,this.pendingCleanup=!1,this._intentStates=new Map,this._annotationPromises=new Map,this.destroyed=!1}get pageNumber(){return this._pageIndex+1}get rotate(){return this._pageInfo.rotate}get ref(){return this._pageInfo.ref}get userUnit(){return this._pageInfo.userUnit}get view(){return this._pageInfo.view}getViewport({scale:C,rotation:l=this.rotate,offsetX:B=0,offsetY:Y=0,dontFlip:a=!1}={}){return new _display_utils.PageViewport({viewBox:this.view,scale:C,rotation:l,offsetX:B,offsetY:Y,dontFlip:a})}getAnnotations({intent:C="display"}={}){const l=this._transport.getRenderingIntent(C);let B=this._annotationPromises.get(l.cacheKey);return B||(B=this._transport.getAnnotations(this._pageIndex,l.renderingIntent),this._annotationPromises.set(l.cacheKey,B),B=B.then(Y=>{for(const a of Y)a.titleObj!==void 0&&Object.defineProperty(a,"title",{get(){return(0,_display_utils.deprecated)("`title`-property on annotation, please use `titleObj` instead."),a.titleObj.str}}),a.contentsObj!==void 0&&Object.defineProperty(a,"contents",{get(){return(0,_display_utils.deprecated)("`contents`-property on annotation, please use `contentsObj` instead."),a.contentsObj.str}});return Y})),B}getJSActions(){return this._jsActionsPromise||(this._jsActionsPromise=this._transport.getPageJSActions(this._pageIndex))}async getXfa(){var C;return((C=this._transport._htmlForXfa)==null?void 0:C.children[this._pageIndex])||null}render({canvasContext:C,viewport:l,intent:B="display",annotationMode:Y=_util.AnnotationMode.ENABLE,transform:a=null,imageLayer:i=null,canvasFactory:I=null,background:g=null,optionalContentConfigPromise:o=null,annotationCanvasMap:X=null,pageColors:b=null,printAnnotationStorage:N=null}){var q,mI;((q=arguments[0])==null?void 0:q.renderInteractiveForms)!==void 0&&((0,_display_utils.deprecated)("render no longer accepts the `renderInteractiveForms`-option, please use the `annotationMode`-option instead."),arguments[0].renderInteractiveForms===!0&&Y===_util.AnnotationMode.ENABLE&&(Y=_util.AnnotationMode.ENABLE_FORMS)),((mI=arguments[0])==null?void 0:mI.includeAnnotationStorage)!==void 0&&((0,_display_utils.deprecated)("render no longer accepts the `includeAnnotationStorage`-option, please use the `annotationMode`-option instead."),arguments[0].includeAnnotationStorage===!0&&Y===_util.AnnotationMode.ENABLE&&(Y=_util.AnnotationMode.ENABLE_STORAGE)),this._stats&&this._stats.time("Overall");const F=this._transport.getRenderingIntent(B,Y,N);this.pendingCleanup=!1,o||(o=this._transport.getOptionalContentConfig());let hI=this._intentStates.get(F.cacheKey);hI||(hI=Object.create(null),this._intentStates.set(F.cacheKey,hI)),hI.streamReaderCancelTimeout&&(clearTimeout(hI.streamReaderCancelTimeout),hI.streamReaderCancelTimeout=null);const YI=I||new DefaultCanvasFactory({ownerDocument:this._ownerDocument}),nI=!!(F.renderingIntent&_util.RenderingIntentFlag.PRINT);hI.displayReadyCapability||(hI.displayReadyCapability=(0,_util.createPromiseCapability)(),hI.operatorList={fnArray:[],argsArray:[],lastChunk:!1,separateAnnots:null},this._stats&&this._stats.time("Page Request"),this._pumpOperatorList(F));const gI=NI=>{hI.renderTasks.delete(U),(this.cleanupAfterRender||nI)&&(this.pendingCleanup=!0),this._tryCleanup(),NI?(U.capability.reject(NI),this._abortOperatorList({intentState:hI,reason:NI instanceof Error?NI:new Error(NI)})):U.capability.resolve(),this._stats&&(this._stats.timeEnd("Rendering"),this._stats.timeEnd("Overall"))},U=new InternalRenderTask({callback:gI,params:{canvasContext:C,viewport:l,transform:a,imageLayer:i,background:g},objs:this.objs,commonObjs:this.commonObjs,annotationCanvasMap:X,operatorList:hI.operatorList,pageIndex:this._pageIndex,canvasFactory:YI,useRequestAnimationFrame:!nI,pdfBug:this._pdfBug,pageColors:b});(hI.renderTasks||(hI.renderTasks=new Set)).add(U);const II=U.task;return Promise.all([hI.displayReadyCapability.promise,o]).then(([NI,BI])=>{if(this.pendingCleanup){gI();return}this._stats&&this._stats.time("Rendering"),U.initializeGraphics({transparency:NI,optionalContentConfig:BI}),U.operatorListChanged()}).catch(gI),II}getOperatorList({intent:C="display",annotationMode:l=_util.AnnotationMode.ENABLE,printAnnotationStorage:B=null}={}){function Y(){i.operatorList.lastChunk&&(i.opListReadCapability.resolve(i.operatorList),i.renderTasks.delete(I))}const a=this._transport.getRenderingIntent(C,l,B,!0);let i=this._intentStates.get(a.cacheKey);i||(i=Object.create(null),this._intentStates.set(a.cacheKey,i));let I;return i.opListReadCapability||(I=Object.create(null),I.operatorListChanged=Y,i.opListReadCapability=(0,_util.createPromiseCapability)(),(i.renderTasks||(i.renderTasks=new Set)).add(I),i.operatorList={fnArray:[],argsArray:[],lastChunk:!1,separateAnnots:null},this._stats&&this._stats.time("Page Request"),this._pumpOperatorList(a)),i.opListReadCapability.promise}streamTextContent({disableCombineTextItems:C=!1,includeMarkedContent:l=!1}={}){return this._transport.messageHandler.sendWithStream("GetTextContent",{pageIndex:this._pageIndex,combineTextItems:C!==!0,includeMarkedContent:l===!0},{highWaterMark:100,size(Y){return Y.items.length}})}getTextContent(C={}){if(this._transport._htmlForXfa)return this.getXfa().then(B=>_xfa_text.XfaText.textContent(B));const l=this.streamTextContent(C);return new Promise(function(B,Y){function a(){i.read().then(function({value:g,done:o}){if(o){B(I);return}Object.assign(I.styles,g.styles),I.items.push(...g.items),a()},Y)}const i=l.getReader(),I={items:[],styles:Object.create(null)};a()})}getStructTree(){return this._structTreePromise||(this._structTreePromise=this._transport.getStructTree(this._pageIndex))}_destroy(){this.destroyed=!0;const C=[];for(const l of this._intentStates.values())if(this._abortOperatorList({intentState:l,reason:new Error("Page was destroyed."),force:!0}),!l.opListReadCapability)for(const B of l.renderTasks)C.push(B.completed),B.cancel();this.objs.clear();for(const l of this._bitmaps)l.close();return this._bitmaps.clear(),this._annotationPromises.clear(),this._jsActionsPromise=null,this._structTreePromise=null,this.pendingCleanup=!1,Promise.all(C)}cleanup(C=!1){return this.pendingCleanup=!0,this._tryCleanup(C)}_tryCleanup(C=!1){if(!this.pendingCleanup)return!1;for(const{renderTasks:l,operatorList:B}of this._intentStates.values())if(l.size>0||!B.lastChunk)return!1;this._intentStates.clear(),this.objs.clear(),this._annotationPromises.clear(),this._jsActionsPromise=null,this._structTreePromise=null,C&&this._stats&&(this._stats=new _display_utils.StatTimer);for(const l of this._bitmaps)l.close();return this._bitmaps.clear(),this.pendingCleanup=!1,!0}_startRenderPage(C,l){const B=this._intentStates.get(l);B&&(this._stats&&this._stats.timeEnd("Page Request"),B.displayReadyCapability&&B.displayReadyCapability.resolve(C))}_renderPageChunk(C,l){for(let B=0,Y=C.length;B<Y;B++)l.operatorList.fnArray.push(C.fnArray[B]),l.operatorList.argsArray.push(C.argsArray[B]);l.operatorList.lastChunk=C.lastChunk,l.operatorList.separateAnnots=C.separateAnnots;for(const B of l.renderTasks)B.operatorListChanged();C.lastChunk&&this._tryCleanup()}_pumpOperatorList({renderingIntent:C,cacheKey:l,annotationStorageMap:B}){const a=this._transport.messageHandler.sendWithStream("GetOperatorList",{pageIndex:this._pageIndex,intent:C,cacheKey:l,annotationStorage:B}).getReader(),i=this._intentStates.get(l);i.streamReader=a;const I=()=>{a.read().then(({value:g,done:o})=>{if(o){i.streamReader=null;return}this._transport.destroyed||(this._renderPageChunk(g,i),I())},g=>{if(i.streamReader=null,!this._transport.destroyed){if(i.operatorList){i.operatorList.lastChunk=!0;for(const o of i.renderTasks)o.operatorListChanged();this._tryCleanup()}if(i.displayReadyCapability)i.displayReadyCapability.reject(g);else if(i.opListReadCapability)i.opListReadCapability.reject(g);else throw g}})};I()}_abortOperatorList({intentState:C,reason:l,force:B=!1}){if(C.streamReader){if(!B){if(C.renderTasks.size>0)return;if(l instanceof _display_utils.RenderingCancelledException){C.streamReaderCancelTimeout=setTimeout(()=>{this._abortOperatorList({intentState:C,reason:l,force:!0}),C.streamReaderCancelTimeout=null},RENDERING_CANCELLED_TIMEOUT);return}}if(C.streamReader.cancel(new _util.AbortException(l.message)).catch(()=>{}),C.streamReader=null,!this._transport.destroyed){for(const[Y,a]of this._intentStates)if(a===C){this._intentStates.delete(Y);break}this.cleanup()}}}get stats(){return this._stats}}exports.PDFPageProxy=PDFPageProxy;class LoopbackPort{constructor(){this._listeners=[],this._deferred=Promise.resolve()}postMessage(C,l){const B={data:structuredClone(C,l)};this._deferred.then(()=>{for(const Y of this._listeners)Y.call(this,B)})}addEventListener(C,l){this._listeners.push(l)}removeEventListener(C,l){const B=this._listeners.indexOf(l);this._listeners.splice(B,1)}terminate(){this._listeners.length=0}}exports.LoopbackPort=LoopbackPort;const PDFWorkerUtil={isWorkerDisabled:!1,fallbackWorkerSrc:null,fakeWorkerId:0};exports.PDFWorkerUtil=PDFWorkerUtil;{if(_is_node.isNodeJS&&typeof commonjsRequire$1=="function")PDFWorkerUtil.isWorkerDisabled=!0,PDFWorkerUtil.fallbackWorkerSrc="./pdf.worker.js";else if(typeof document=="object"){const d=($=document==null?void 0:document.currentScript)==null?void 0:$.src;d&&(PDFWorkerUtil.fallbackWorkerSrc=d.replace(/(\.(?:min\.)?js)(\?.*)?$/i,".worker$1$2"))}PDFWorkerUtil.isSameOrigin=function(d,C){let l;try{if(l=new URL(d),!l.origin||l.origin==="null")return!1}catch{return!1}const B=new URL(C,l);return l.origin===B.origin},PDFWorkerUtil.createCDNWrapper=function(d){const C=`importScripts("${d}");`;return URL.createObjectURL(new Blob([C]))}}const _PDFWorker=class{constructor({name:d=null,port:C=null,verbosity:l=(0,_util.getVerbosityLevel)()}={}){if(C&&VI(_PDFWorker,h).has(C))throw new Error("Cannot use more than one PDFWorker per port.");if(this.name=d,this.destroyed=!1,this.verbosity=l,this._readyCapability=(0,_util.createPromiseCapability)(),this._port=null,this._webWorker=null,this._messageHandler=null,C){VI(_PDFWorker,h).set(C,this),this._initializeFromPort(C);return}this._initialize()}get promise(){return this._readyCapability.promise}get port(){return this._port}get messageHandler(){return this._messageHandler}_initializeFromPort(d){this._port=d,this._messageHandler=new _message_handler.MessageHandler("main","worker",d),this._messageHandler.on("ready",function(){}),this._readyCapability.resolve()}_initialize(){if(!PDFWorkerUtil.isWorkerDisabled&&!_PDFWorker._mainThreadWorkerMessageHandler){let{workerSrc:d}=_PDFWorker;try{PDFWorkerUtil.isSameOrigin(window.location.href,d)||(d=PDFWorkerUtil.createCDNWrapper(new URL(d,window.location).href));const C=new Worker(d),l=new _message_handler.MessageHandler("main","worker",C),B=()=>{C.removeEventListener("error",Y),l.destroy(),C.terminate(),this.destroyed?this._readyCapability.reject(new Error("Worker was destroyed")):this._setupFakeWorker()},Y=()=>{this._webWorker||B()};C.addEventListener("error",Y),l.on("test",i=>{if(C.removeEventListener("error",Y),this.destroyed){B();return}i?(this._messageHandler=l,this._port=C,this._webWorker=C,this._readyCapability.resolve(),l.send("configure",{verbosity:this.verbosity})):(this._setupFakeWorker(),l.destroy(),C.terminate())}),l.on("ready",i=>{if(C.removeEventListener("error",Y),this.destroyed){B();return}try{a()}catch{this._setupFakeWorker()}});const a=()=>{const i=new Uint8Array;l.send("test",i,[i.buffer])};a();return}catch{(0,_util.info)("The worker has been disabled.")}}this._setupFakeWorker()}_setupFakeWorker(){PDFWorkerUtil.isWorkerDisabled||((0,_util.warn)("Setting up fake worker."),PDFWorkerUtil.isWorkerDisabled=!0),_PDFWorker._setupFakeWorkerGlobal.then(d=>{if(this.destroyed){this._readyCapability.reject(new Error("Worker was destroyed"));return}const C=new LoopbackPort;this._port=C;const l=`fake${PDFWorkerUtil.fakeWorkerId++}`,B=new _message_handler.MessageHandler(l+"_worker",l,C);d.setup(B,C);const Y=new _message_handler.MessageHandler(l,l+"_worker",C);this._messageHandler=Y,this._readyCapability.resolve(),Y.send("configure",{verbosity:this.verbosity})}).catch(d=>{this._readyCapability.reject(new Error(`Setting up fake worker failed: "${d.message}".`))})}destroy(){this.destroyed=!0,this._webWorker&&(this._webWorker.terminate(),this._webWorker=null),VI(_PDFWorker,h).delete(this._port),this._port=null,this._messageHandler&&(this._messageHandler.destroy(),this._messageHandler=null)}static fromPort(d){if(!(d!=null&&d.port))throw new Error("PDFWorker.fromPort - invalid method signature.");return VI(this,h).has(d.port)?VI(this,h).get(d.port):new _PDFWorker(d)}static get workerSrc(){if(_worker_options.GlobalWorkerOptions.workerSrc)return _worker_options.GlobalWorkerOptions.workerSrc;if(PDFWorkerUtil.fallbackWorkerSrc!==null)return _is_node.isNodeJS||(0,_display_utils.deprecated)('No "GlobalWorkerOptions.workerSrc" specified.'),PDFWorkerUtil.fallbackWorkerSrc;throw new Error('No "GlobalWorkerOptions.workerSrc" specified.')}static get _mainThreadWorkerMessageHandler(){var d;try{return((d=globalThis.pdfjsWorker)==null?void 0:d.WorkerMessageHandler)||null}catch{return null}}static get _setupFakeWorkerGlobal(){const loader=async()=>{const mainWorkerMessageHandler=this._mainThreadWorkerMessageHandler;if(mainWorkerMessageHandler)return mainWorkerMessageHandler;if(_is_node.isNodeJS&&typeof commonjsRequire$1=="function"){const worker=eval("require")(this.workerSrc);return worker.WorkerMessageHandler}return await(0,_display_utils.loadScript)(this.workerSrc),window.pdfjsWorker.WorkerMessageHandler};return(0,_util.shadow)(this,"_setupFakeWorkerGlobal",loader())}};let PDFWorker=_PDFWorker;h=new WeakMap,zI(PDFWorker,h,new WeakMap),exports.PDFWorker=PDFWorker,PDFWorker.getWorkerSrc=function(){return(0,_display_utils.deprecated)("`PDFWorker.getWorkerSrc()`, please use `PDFWorker.workerSrc` instead."),this.workerSrc};class WorkerTransport{constructor(C,l,B,Y){zI(this,M,null);zI(this,_,new Map);zI(this,z,new Map);zI(this,T,null);this.messageHandler=C,this.loadingTask=l,this.commonObjs=new PDFObjects,this.fontLoader=new _font_loader.FontLoader({docId:l.docId,onUnsupportedFeature:this._onUnsupportedFeature.bind(this),ownerDocument:Y.ownerDocument,styleElement:Y.styleElement}),this._params=Y,Y.useWorkerFetch||(this.CMapReaderFactory=new Y.CMapReaderFactory({baseUrl:Y.cMapUrl,isCompressed:Y.cMapPacked}),this.StandardFontDataFactory=new Y.StandardFontDataFactory({baseUrl:Y.standardFontDataUrl})),this.destroyed=!1,this.destroyCapability=null,this._passwordCapability=null,this._networkStream=B,this._fullReader=null,this._lastProgress=null,this.downloadInfoCapability=(0,_util.createPromiseCapability)(),this.setupMessageHandler()}get annotationStorage(){return(0,_util.shadow)(this,"annotationStorage",new _annotation_storage.AnnotationStorage)}get stats(){return VI(this,M)}getRenderingIntent(C,l=_util.AnnotationMode.ENABLE,B=null,Y=!1){let a=_util.RenderingIntentFlag.DISPLAY,i=null;switch(C){case"any":a=_util.RenderingIntentFlag.ANY;break;case"display":break;case"print":a=_util.RenderingIntentFlag.PRINT;break;default:(0,_util.warn)(`getRenderingIntent - invalid intent: ${C}`)}switch(l){case _util.AnnotationMode.DISABLE:a+=_util.RenderingIntentFlag.ANNOTATIONS_DISABLE;break;case _util.AnnotationMode.ENABLE:break;case _util.AnnotationMode.ENABLE_FORMS:a+=_util.RenderingIntentFlag.ANNOTATIONS_FORMS;break;case _util.AnnotationMode.ENABLE_STORAGE:a+=_util.RenderingIntentFlag.ANNOTATIONS_STORAGE,i=(a&_util.RenderingIntentFlag.PRINT&&B instanceof _annotation_storage.PrintAnnotationStorage?B:this.annotationStorage).serializable;break;default:(0,_util.warn)(`getRenderingIntent - invalid annotationMode: ${l}`)}return Y&&(a+=_util.RenderingIntentFlag.OPLIST),{renderingIntent:a,cacheKey:`${a}_${_annotation_storage.AnnotationStorage.getHash(i)}`,annotationStorageMap:i}}destroy(){if(this.destroyCapability)return this.destroyCapability.promise;this.destroyed=!0,this.destroyCapability=(0,_util.createPromiseCapability)(),this._passwordCapability&&this._passwordCapability.reject(new Error("Worker was destroyed during onPassword callback"));const C=[];for(const B of VI(this,_).values())C.push(B._destroy());VI(this,_).clear(),VI(this,z).clear(),this.hasOwnProperty("annotationStorage")&&this.annotationStorage.resetModified();const l=this.messageHandler.sendWithPromise("Terminate",null);return C.push(l),Promise.all(C).then(()=>{this.commonObjs.clear(),this.fontLoader.clear(),UI(this,T,null),this._getFieldObjectsPromise=null,this._hasJSActionsPromise=null,this._networkStream&&this._networkStream.cancelAllRequests(new _util.AbortException("Worker was terminated.")),this.messageHandler&&(this.messageHandler.destroy(),this.messageHandler=null),this.destroyCapability.resolve()},this.destroyCapability.reject),this.destroyCapability.promise}setupMessageHandler(){const{messageHandler:C,loadingTask:l}=this;C.on("GetReader",(B,Y)=>{(0,_util.assert)(this._networkStream,"GetReader - no `IPDFStream` instance available."),this._fullReader=this._networkStream.getFullReader(),this._fullReader.onProgress=a=>{this._lastProgress={loaded:a.loaded,total:a.total}},Y.onPull=()=>{this._fullReader.read().then(function({value:a,done:i}){if(i){Y.close();return}(0,_util.assert)((0,_util.isArrayBuffer)(a),"GetReader - expected an ArrayBuffer."),Y.enqueue(new Uint8Array(a),1,[a])}).catch(a=>{Y.error(a)})},Y.onCancel=a=>{this._fullReader.cancel(a),Y.ready.catch(i=>{if(!this.destroyed)throw i})}}),C.on("ReaderHeadersReady",B=>{const Y=(0,_util.createPromiseCapability)(),a=this._fullReader;return a.headersReady.then(()=>{var i;(!a.isStreamingSupported||!a.isRangeSupported)&&(this._lastProgress&&((i=l.onProgress)==null||i.call(l,this._lastProgress)),a.onProgress=I=>{var g;(g=l.onProgress)==null||g.call(l,{loaded:I.loaded,total:I.total})}),Y.resolve({isStreamingSupported:a.isStreamingSupported,isRangeSupported:a.isRangeSupported,contentLength:a.contentLength})},Y.reject),Y.promise}),C.on("GetRangeReader",(B,Y)=>{(0,_util.assert)(this._networkStream,"GetRangeReader - no `IPDFStream` instance available.");const a=this._networkStream.getRangeReader(B.begin,B.end);if(!a){Y.close();return}Y.onPull=()=>{a.read().then(function({value:i,done:I}){if(I){Y.close();return}(0,_util.assert)((0,_util.isArrayBuffer)(i),"GetRangeReader - expected an ArrayBuffer."),Y.enqueue(new Uint8Array(i),1,[i])}).catch(i=>{Y.error(i)})},Y.onCancel=i=>{a.cancel(i),Y.ready.catch(I=>{if(!this.destroyed)throw I})}}),C.on("GetDoc",({pdfInfo:B})=>{this._numPages=B.numPages,this._htmlForXfa=B.htmlForXfa,delete B.htmlForXfa,l._capability.resolve(new PDFDocumentProxy(B,this))}),C.on("DocException",function(B){let Y;switch(B.name){case"PasswordException":Y=new _util.PasswordException(B.message,B.code);break;case"InvalidPDFException":Y=new _util.InvalidPDFException(B.message);break;case"MissingPDFException":Y=new _util.MissingPDFException(B.message);break;case"UnexpectedResponseException":Y=new _util.UnexpectedResponseException(B.message,B.status);break;case"UnknownErrorException":Y=new _util.UnknownErrorException(B.message,B.details);break;default:(0,_util.unreachable)("DocException - expected a valid Error.")}l._capability.reject(Y)}),C.on("PasswordRequest",B=>{if(this._passwordCapability=(0,_util.createPromiseCapability)(),l.onPassword){const Y=a=>{a instanceof Error?this._passwordCapability.reject(a):this._passwordCapability.resolve({password:a})};try{l.onPassword(Y,B.code)}catch(a){this._passwordCapability.reject(a)}}else this._passwordCapability.reject(new _util.PasswordException(B.message,B.code));return this._passwordCapability.promise}),C.on("DataLoaded",B=>{var Y;(Y=l.onProgress)==null||Y.call(l,{loaded:B.length,total:B.length}),this.downloadInfoCapability.resolve(B)}),C.on("StartRenderPage",B=>{if(this.destroyed)return;VI(this,_).get(B.pageIndex)._startRenderPage(B.transparency,B.cacheKey)}),C.on("commonobj",([B,Y,a])=>{var i;if(!this.destroyed&&!this.commonObjs.has(B))switch(Y){case"Font":const I=this._params;if("error"in a){const X=a.error;(0,_util.warn)(`Error during font loading: ${X}`),this.commonObjs.resolve(B,X);break}let g=null;I.pdfBug&&((i=globalThis.FontInspector)!=null&&i.enabled)&&(g={registerFont(X,b){globalThis.FontInspector.fontAdded(X,b)}});const o=new _font_loader.FontFaceObject(a,{isEvalSupported:I.isEvalSupported,disableFontFace:I.disableFontFace,ignoreErrors:I.ignoreErrors,onUnsupportedFeature:this._onUnsupportedFeature.bind(this),fontRegistry:g});this.fontLoader.bind(o).catch(X=>C.sendWithPromise("FontFallback",{id:B})).finally(()=>{!I.fontExtraProperties&&o.data&&(o.data=null),this.commonObjs.resolve(B,o)});break;case"FontPath":case"Image":this.commonObjs.resolve(B,a);break;default:throw new Error(`Got unknown common object type ${Y}`)}}),C.on("obj",([B,Y,a,i])=>{var g;if(this.destroyed)return;const I=VI(this,_).get(Y);if(!I.objs.has(B))switch(a){case"Image":I.objs.resolve(B,i);const o=8e6;if(i){let X;if(i.bitmap){const{bitmap:b,width:N,height:F}=i;X=N*F*4,I._bitmaps.add(b)}else X=((g=i.data)==null?void 0:g.length)||0;X>o&&(I.cleanupAfterRender=!0)}break;case"Pattern":I.objs.resolve(B,i);break;default:throw new Error(`Got unknown object type ${a}`)}}),C.on("DocProgress",B=>{var Y;this.destroyed||(Y=l.onProgress)==null||Y.call(l,{loaded:B.loaded,total:B.total})}),C.on("DocStats",B=>{this.destroyed||UI(this,M,Object.freeze({streamTypes:Object.freeze(B.streamTypes),fontTypes:Object.freeze(B.fontTypes)}))}),C.on("UnsupportedFeature",this._onUnsupportedFeature.bind(this)),C.on("FetchBuiltInCMap",B=>this.destroyed?Promise.reject(new Error("Worker was destroyed.")):this.CMapReaderFactory?this.CMapReaderFactory.fetch(B):Promise.reject(new Error("CMapReaderFactory not initialized, see the `useWorkerFetch` parameter."))),C.on("FetchStandardFontData",B=>this.destroyed?Promise.reject(new Error("Worker was destroyed.")):this.StandardFontDataFactory?this.StandardFontDataFactory.fetch(B):Promise.reject(new Error("StandardFontDataFactory not initialized, see the `useWorkerFetch` parameter.")))}_onUnsupportedFeature({featureId:C}){var l,B;this.destroyed||(B=(l=this.loadingTask).onUnsupportedFeature)==null||B.call(l,C)}getData(){return this.messageHandler.sendWithPromise("GetData",null)}getPage(C){if(!Number.isInteger(C)||C<=0||C>this._numPages)return Promise.reject(new Error("Invalid page request."));const l=C-1,B=VI(this,z).get(l);if(B)return B;const Y=this.messageHandler.sendWithPromise("GetPage",{pageIndex:l}).then(a=>{if(this.destroyed)throw new Error("Transport destroyed");const i=new PDFPageProxy(l,a,this,this._params.ownerDocument,this._params.pdfBug);return VI(this,_).set(l,i),i});return VI(this,z).set(l,Y),Y}getPageIndex(C){return typeof C!="object"||C===null||!Number.isInteger(C.num)||C.num<0||!Number.isInteger(C.gen)||C.gen<0?Promise.reject(new Error("Invalid pageIndex request.")):this.messageHandler.sendWithPromise("GetPageIndex",{num:C.num,gen:C.gen})}getAnnotations(C,l){return this.messageHandler.sendWithPromise("GetAnnotations",{pageIndex:C,intent:l})}saveDocument(){var C;return this.messageHandler.sendWithPromise("SaveDocument",{isPureXfa:!!this._htmlForXfa,numPages:this._numPages,annotationStorage:this.annotationStorage.serializable,filename:((C=this._fullReader)==null?void 0:C.filename)??null}).finally(()=>{this.annotationStorage.resetModified()})}getFieldObjects(){return this._getFieldObjectsPromise||(this._getFieldObjectsPromise=this.messageHandler.sendWithPromise("GetFieldObjects",null))}hasJSActions(){return this._hasJSActionsPromise||(this._hasJSActionsPromise=this.messageHandler.sendWithPromise("HasJSActions",null))}getCalculationOrderIds(){return this.messageHandler.sendWithPromise("GetCalculationOrderIds",null)}getDestinations(){return this.messageHandler.sendWithPromise("GetDestinations",null)}getDestination(C){return typeof C!="string"?Promise.reject(new Error("Invalid destination request.")):this.messageHandler.sendWithPromise("GetDestination",{id:C})}getPageLabels(){return this.messageHandler.sendWithPromise("GetPageLabels",null)}getPageLayout(){return this.messageHandler.sendWithPromise("GetPageLayout",null)}getPageMode(){return this.messageHandler.sendWithPromise("GetPageMode",null)}getViewerPreferences(){return this.messageHandler.sendWithPromise("GetViewerPreferences",null)}getOpenAction(){return this.messageHandler.sendWithPromise("GetOpenAction",null)}getAttachments(){return this.messageHandler.sendWithPromise("GetAttachments",null)}getJavaScript(){return this.messageHandler.sendWithPromise("GetJavaScript",null)}getDocJSActions(){return this.messageHandler.sendWithPromise("GetDocJSActions",null)}getPageJSActions(C){return this.messageHandler.sendWithPromise("GetPageJSActions",{pageIndex:C})}getStructTree(C){return this.messageHandler.sendWithPromise("GetStructTree",{pageIndex:C})}getOutline(){return this.messageHandler.sendWithPromise("GetOutline",null)}getOptionalContentConfig(){return this.messageHandler.sendWithPromise("GetOptionalContentConfig",null).then(C=>new _optional_content_config.OptionalContentConfig(C))}getPermissions(){return this.messageHandler.sendWithPromise("GetPermissions",null)}getMetadata(){return VI(this,T)||UI(this,T,this.messageHandler.sendWithPromise("GetMetadata",null).then(C=>{var l,B;return{info:C[0],metadata:C[1]?new _metadata.Metadata(C[1]):null,contentDispositionFilename:((l=this._fullReader)==null?void 0:l.filename)??null,contentLength:((B=this._fullReader)==null?void 0:B.contentLength)??null}}))}getMarkInfo(){return this.messageHandler.sendWithPromise("GetMarkInfo",null)}async startCleanup(C=!1){if(await this.messageHandler.sendWithPromise("Cleanup",null),!this.destroyed){for(const l of VI(this,_).values())if(!l.cleanup())throw new Error(`startCleanup: Page ${l.pageNumber} is currently rendering.`);this.commonObjs.clear(),C||this.fontLoader.clear(),UI(this,T,null),this._getFieldObjectsPromise=null,this._hasJSActionsPromise=null}}get loadingParams(){const C=this._params;return(0,_util.shadow)(this,"loadingParams",{disableAutoFetch:C.disableAutoFetch,enableXfa:C.enableXfa})}}M=new WeakMap,_=new WeakMap,z=new WeakMap,T=new WeakMap;class PDFObjects{constructor(){zI(this,Z);zI(this,r,Object.create(null))}get(C,l=null){if(l){const Y=jI(this,Z,Rg).call(this,C);return Y.capability.promise.then(()=>l(Y.data)),null}const B=VI(this,r)[C];if(!(B!=null&&B.capability.settled))throw new Error(`Requesting object that isn't resolved yet ${C}.`);return B.data}has(C){const l=VI(this,r)[C];return(l==null?void 0:l.capability.settled)||!1}resolve(C,l=null){const B=jI(this,Z,Rg).call(this,C);B.data=l,B.capability.resolve()}clear(){UI(this,r,Object.create(null))}}r=new WeakMap,Z=new WeakSet,Rg=function(C){const l=VI(this,r)[C];return l||(VI(this,r)[C]={capability:(0,_util.createPromiseCapability)(),data:null})};class RenderTask{constructor(C){zI(this,j,null);UI(this,j,C),this.onContinue=null}get promise(){return VI(this,j).capability.promise}cancel(){VI(this,j).cancel()}get separateAnnots(){const{separateAnnots:C}=VI(this,j).operatorList;if(!C)return!1;const{annotationCanvasMap:l}=VI(this,j);return C.form||C.canvas&&(l==null?void 0:l.size)>0}}j=new WeakMap,exports.RenderTask=RenderTask;const m=class{constructor({callback:C,params:l,objs:B,commonObjs:Y,annotationCanvasMap:a,operatorList:i,pageIndex:I,canvasFactory:g,useRequestAnimationFrame:o=!1,pdfBug:X=!1,pageColors:b=null}){this.callback=C,this.params=l,this.objs=B,this.commonObjs=Y,this.annotationCanvasMap=a,this.operatorListIdx=null,this.operatorList=i,this._pageIndex=I,this.canvasFactory=g,this._pdfBug=X,this.pageColors=b,this.running=!1,this.graphicsReadyCallback=null,this.graphicsReady=!1,this._useRequestAnimationFrame=o===!0&&typeof window<"u",this.cancelled=!1,this.capability=(0,_util.createPromiseCapability)(),this.task=new RenderTask(this),this._cancelBound=this.cancel.bind(this),this._continueBound=this._continue.bind(this),this._scheduleNextBound=this._scheduleNext.bind(this),this._nextBound=this._next.bind(this),this._canvas=l.canvasContext.canvas}get completed(){return this.capability.promise.catch(function(){})}initializeGraphics({transparency:C=!1,optionalContentConfig:l}){var g;if(this.cancelled)return;if(this._canvas){if(VI(m,D).has(this._canvas))throw new Error("Cannot use the same canvas during multiple render() operations. Use different canvas or ensure previous operations were cancelled or completed.");VI(m,D).add(this._canvas)}this._pdfBug&&((g=globalThis.StepperManager)!=null&&g.enabled)&&(this.stepper=globalThis.StepperManager.create(this._pageIndex),this.stepper.init(this.operatorList),this.stepper.nextBreakPoint=this.stepper.getNextBreakPoint());const{canvasContext:B,viewport:Y,transform:a,imageLayer:i,background:I}=this.params;this.gfx=new _canvas.CanvasGraphics(B,this.commonObjs,this.objs,this.canvasFactory,i,l,this.annotationCanvasMap,this.pageColors),this.gfx.beginDrawing({transform:a,viewport:Y,transparency:C,background:I}),this.operatorListIdx=0,this.graphicsReady=!0,this.graphicsReadyCallback&&this.graphicsReadyCallback()}cancel(C=null){this.running=!1,this.cancelled=!0,this.gfx&&this.gfx.endDrawing(),this._canvas&&VI(m,D).delete(this._canvas),this.callback(C||new _display_utils.RenderingCancelledException(`Rendering cancelled, page ${this._pageIndex+1}`,"canvas"))}operatorListChanged(){if(!this.graphicsReady){this.graphicsReadyCallback||(this.graphicsReadyCallback=this._continueBound);return}this.stepper&&this.stepper.updateOperatorList(this.operatorList),!this.running&&this._continue()}_continue(){this.running=!0,!this.cancelled&&(this.task.onContinue?this.task.onContinue(this._scheduleNextBound):this._scheduleNext())}_scheduleNext(){this._useRequestAnimationFrame?window.requestAnimationFrame(()=>{this._nextBound().catch(this._cancelBound)}):Promise.resolve().then(this._nextBound).catch(this._cancelBound)}async _next(){this.cancelled||(this.operatorListIdx=this.gfx.executeOperatorList(this.operatorList,this.operatorListIdx,this._continueBound,this.stepper),this.operatorListIdx===this.operatorList.argsArray.length&&(this.running=!1,this.operatorList.lastChunk&&(this.gfx.endDrawing(),this._canvas&&VI(m,D).delete(this._canvas),this.callback())))}};let InternalRenderTask=m;D=new WeakMap,zI(InternalRenderTask,D,new WeakSet);const version="2.16.105";exports.version=version;const build="172ccdbe5";exports.build=build},(wI,c,$)=>{var r,vg,p;Object.defineProperty(c,"__esModule",{value:!0}),c.PrintAnnotationStorage=c.AnnotationStorage=void 0;var h=$(1),M=$(6),_=$(10);class z{constructor(){zI(this,r);this._storage=new Map,this._modified=!1,this.onSetModified=null,this.onResetModified=null,this.onAnnotationEditor=null}getValue(D,m){const d=this._storage.get(D);return d===void 0?m:Object.assign(m,d)}getRawValue(D){return this._storage.get(D)}remove(D){if(this._storage.delete(D),this._storage.size===0&&this.resetModified(),typeof this.onAnnotationEditor=="function"){for(const m of this._storage.values())if(m instanceof M.AnnotationEditor)return;this.onAnnotationEditor(null)}}setValue(D,m){const d=this._storage.get(D);let C=!1;if(d!==void 0)for(const[l,B]of Object.entries(m))d[l]!==B&&(C=!0,d[l]=B);else C=!0,this._storage.set(D,m);C&&jI(this,r,vg).call(this),m instanceof M.AnnotationEditor&&typeof this.onAnnotationEditor=="function"&&this.onAnnotationEditor(m.constructor._type)}has(D){return this._storage.has(D)}getAll(){return this._storage.size>0?(0,h.objectFromMap)(this._storage):null}get size(){return this._storage.size}resetModified(){this._modified&&(this._modified=!1,typeof this.onResetModified=="function"&&this.onResetModified())}get print(){return new T(this)}get serializable(){if(this._storage.size===0)return null;const D=new Map;for(const[m,d]of this._storage){const C=d instanceof M.AnnotationEditor?d.serialize():d;C&&D.set(m,C)}return D}static getHash(D){if(!D)return"";const m=new _.MurmurHash3_64;for(const[d,C]of D)m.update(`${d}:${JSON.stringify(C)}`);return m.hexdigest()}}r=new WeakSet,vg=function(){this._modified||(this._modified=!0,typeof this.onSetModified=="function"&&this.onSetModified())},c.AnnotationStorage=z;class T extends z{constructor(m){super();zI(this,p,null);UI(this,p,structuredClone(m.serializable))}get print(){(0,h.unreachable)("Should not call PrintAnnotationStorage.print")}get serializable(){return VI(this,p)}}p=new WeakMap,c.PrintAnnotationStorage=T},(wI,c,$)=>{var z,T,r,Z,p,j;Object.defineProperty(c,"__esModule",{value:!0}),c.AnnotationEditor=void 0;var h=$(7),M=$(1);const D=class{constructor(d){zI(this,z,this.focusin.bind(this));zI(this,T,this.focusout.bind(this));zI(this,r,!1);zI(this,Z,!1);zI(this,p,!1);zI(this,j,D._zIndex++);this.constructor===D&&(0,M.unreachable)("Cannot initialize AnnotationEditor."),this.parent=d.parent,this.id=d.id,this.width=this.height=null,this.pageIndex=d.parent.pageIndex,this.name=d.name,this.div=null;const[C,l]=this.parent.viewportBaseDimensions;this.x=d.x/C,this.y=d.y/l,this.rotation=this.parent.viewport.rotation,this.isAttachedToDOM=!1}static get _defaultLineColor(){return(0,M.shadow)(this,"_defaultLineColor",this._colorManager.getHexCode("CanvasText"))}setInBackground(){this.div.style.zIndex=0}setInForeground(){this.div.style.zIndex=VI(this,j)}focusin(d){VI(this,r)?UI(this,r,!1):this.parent.setSelected(this)}focusout(d){if(!this.isAttachedToDOM)return;const C=d.relatedTarget;C!=null&&C.closest(`#${this.id}`)||(d.preventDefault(),this.parent.isMultipleSelection||this.commitOrRemove())}commitOrRemove(){this.isEmpty()?this.remove():this.commit()}commit(){this.parent.addToAnnotationStorage(this)}dragstart(d){const C=this.parent.div.getBoundingClientRect();this.startX=d.clientX-C.x,this.startY=d.clientY-C.y,d.dataTransfer.setData("text/plain",this.id),d.dataTransfer.effectAllowed="move"}setAt(d,C,l,B){const[Y,a]=this.parent.viewportBaseDimensions;[l,B]=this.screenToPageTranslation(l,B),this.x=(d+l)/Y,this.y=(C+B)/a,this.div.style.left=`${100*this.x}%`,this.div.style.top=`${100*this.y}%`}translate(d,C){const[l,B]=this.parent.viewportBaseDimensions;[d,C]=this.screenToPageTranslation(d,C),this.x+=d/l,this.y+=C/B,this.div.style.left=`${100*this.x}%`,this.div.style.top=`${100*this.y}%`}screenToPageTranslation(d,C){const{rotation:l}=this.parent.viewport;switch(l){case 90:return[C,-d];case 180:return[-d,-C];case 270:return[-C,d];default:return[d,C]}}setDims(d,C){const[l,B]=this.parent.viewportBaseDimensions;this.div.style.width=`${100*d/l}%`,this.div.style.height=`${100*C/B}%`}getInitialTranslation(){return[0,0]}render(){this.div=document.createElement("div"),this.div.setAttribute("data-editor-rotation",(360-this.rotation)%360),this.div.className=this.name,this.div.setAttribute("id",this.id),this.div.setAttribute("tabIndex",0),this.setInForeground(),this.div.addEventListener("focusin",VI(this,z)),this.div.addEventListener("focusout",VI(this,T));const[d,C]=this.getInitialTranslation();return this.translate(d,C),(0,h.bindEvents)(this,this.div,["dragstart","pointerdown"]),this.div}pointerdown(d){const C=h.KeyboardManager.platform.isMac;if(d.button!==0||d.ctrlKey&&C){d.preventDefault();return}d.ctrlKey&&!C||d.shiftKey||d.metaKey&&C?this.parent.toggleSelected(this):this.parent.setSelected(this),UI(this,r,!0)}getRect(d,C){const[l,B]=this.parent.viewportBaseDimensions,[Y,a]=this.parent.pageDimensions,i=Y*d/l,I=a*C/B,g=this.x*Y,o=this.y*a,X=this.width*Y,b=this.height*a;switch(this.rotation){case 0:return[g+i,a-o-I-b,g+i+X,a-o-I];case 90:return[g+I,a-o+i,g+I+b,a-o+i+X];case 180:return[g-i-X,a-o+I,g-i,a-o+I+b];case 270:return[g-I-b,a-o-i-X,g-I,a-o-i];default:throw new Error("Invalid rotation")}}getRectInCurrentCoords(d,C){const[l,B,Y,a]=d,i=Y-l,I=a-B;switch(this.rotation){case 0:return[l,C-a,i,I];case 90:return[l,C-B,I,i];case 180:return[Y,C-B,i,I];case 270:return[Y,C-a,I,i];default:throw new Error("Invalid rotation")}}onceAdded(){}isEmpty(){return!1}enableEditMode(){UI(this,p,!0)}disableEditMode(){UI(this,p,!1)}isInEditMode(){return VI(this,p)}shouldGetKeyboardEvents(){return!1}needsToBeRebuilt(){return this.div&&!this.isAttachedToDOM}rebuild(){var d;(d=this.div)==null||d.addEventListener("focusin",VI(this,z))}serialize(){(0,M.unreachable)("An editor must be serializable")}static deserialize(d,C){const l=new this.prototype.constructor({parent:C,id:C.getNextId()});l.rotation=d.rotation;const[B,Y]=C.pageDimensions,[a,i,I,g]=l.getRectInCurrentCoords(d.rect,Y);return l.x=a/B,l.y=i/Y,l.width=I/B,l.height=g/Y,l}remove(){this.div.removeEventListener("focusin",VI(this,z)),this.div.removeEventListener("focusout",VI(this,T)),this.isEmpty()||this.commit(),this.parent.remove(this)}select(){var d;(d=this.div)==null||d.classList.add("selectedEditor")}unselect(){var d;(d=this.div)==null||d.classList.remove("selectedEditor")}updateParams(d,C){}disableEditing(){}enableEditing(){}get propertiesToUpdate(){return{}}get contentDiv(){return this.div}get isEditing(){return VI(this,Z)}set isEditing(d){UI(this,Z,d),d?(this.parent.setSelected(this),this.parent.setActiveEditor(this)):this.parent.setActiveEditor(null)}};let _=D;z=new WeakMap,T=new WeakMap,r=new WeakMap,Z=new WeakMap,p=new WeakMap,j=new WeakMap,cg(_,"_colorManager",new h.ColorManager),cg(_,"_zIndex",1),c.AnnotationEditor=_},(wI,c,$)=>{var m,d,C,l,B,Y,Ug,I,o,X,b,N,F,hI,YI,nI,gI,U,II,q,mI,NI,BI,J,e,w,Og,E,Mg,iI,eg,eI,ng,W,Eg,S,fg,lI,Kg,MI,hg,WI,Bg;Object.defineProperty(c,"__esModule",{value:!0}),c.KeyboardManager=c.CommandManager=c.ColorManager=c.AnnotationEditorUIManager=void 0,c.bindEvents=_,c.opacityToHex=z;var h=$(1),M=$(8);function _(f,v,RI){for(const pI of RI)v.addEventListener(pI,f[pI].bind(f))}function z(f){return Math.round(Math.min(255,Math.max(1,255*f))).toString(16).padStart(2,"0")}class T{constructor(){zI(this,m,0)}getId(){return`${h.AnnotationEditorPrefix}${yg(this,m)._++}`}}m=new WeakMap;class r{constructor(v=128){zI(this,d,[]);zI(this,C,!1);zI(this,l,void 0);zI(this,B,-1);UI(this,l,v)}add({cmd:v,undo:RI,mustExec:pI,type:DI=NaN,overwriteIfSameType:FI=!1,keepUndo:TI=!1}){if(pI&&v(),VI(this,C))return;const vI={cmd:v,undo:RI,type:DI};if(VI(this,B)===-1){VI(this,d).length>0&&(VI(this,d).length=0),UI(this,B,0),VI(this,d).push(vI);return}if(FI&&VI(this,d)[VI(this,B)].type===DI){TI&&(vI.undo=VI(this,d)[VI(this,B)].undo),VI(this,d)[VI(this,B)]=vI;return}const fI=VI(this,B)+1;fI===VI(this,l)?VI(this,d).splice(0,1):(UI(this,B,fI),fI<VI(this,d).length&&VI(this,d).splice(fI)),VI(this,d).push(vI)}undo(){VI(this,B)!==-1&&(UI(this,C,!0),VI(this,d)[VI(this,B)].undo(),UI(this,C,!1),UI(this,B,VI(this,B)-1))}redo(){VI(this,B)<VI(this,d).length-1&&(UI(this,B,VI(this,B)+1),UI(this,C,!0),VI(this,d)[VI(this,B)].cmd(),UI(this,C,!1))}hasSomethingToUndo(){return VI(this,B)!==-1}hasSomethingToRedo(){return VI(this,B)<VI(this,d).length-1}destroy(){UI(this,d,null)}}d=new WeakMap,C=new WeakMap,l=new WeakMap,B=new WeakMap,c.CommandManager=r;const i=class{constructor(v){zI(this,Y);this.buffer=[],this.callbacks=new Map,this.allKeys=new Set;const RI=i.platform.isMac;for(const[pI,DI]of v)for(const FI of pI){const TI=FI.startsWith("mac+");RI&&TI?(this.callbacks.set(FI.slice(4),DI),this.allKeys.add(FI.split("+").at(-1))):!RI&&!TI&&(this.callbacks.set(FI,DI),this.allKeys.add(FI.split("+").at(-1)))}}static get platform(){const v=typeof navigator<"u"?navigator.platform:"";return(0,h.shadow)(this,"platform",{isWin:v.includes("Win"),isMac:v.includes("Mac")})}exec(v,RI){if(!this.allKeys.has(RI.key))return;const pI=this.callbacks.get(jI(this,Y,Ug).call(this,RI));pI&&(pI.bind(v)(),RI.stopPropagation(),RI.preventDefault())}};let Z=i;Y=new WeakSet,Ug=function(v){v.altKey&&this.buffer.push("alt"),v.ctrlKey&&this.buffer.push("ctrl"),v.metaKey&&this.buffer.push("meta"),v.shiftKey&&this.buffer.push("shift"),this.buffer.push(v.key);const RI=this.buffer.join("+");return this.buffer.length=0,RI},c.KeyboardManager=Z;class p{constructor(){zI(this,I,null)}copy(v){v&&(Array.isArray(v)?UI(this,I,v.map(RI=>RI.serialize())):UI(this,I,[v.serialize()]),UI(this,I,VI(this,I).filter(RI=>!!RI)),VI(this,I).length===0&&UI(this,I,null))}paste(){return VI(this,I)}isEmpty(){return VI(this,I)===null}destroy(){UI(this,I,null)}}I=new WeakMap;const g=class{get _colors(){const v=new Map([["CanvasText",null],["Canvas",null]]);return(0,M.getColorValues)(v),(0,h.shadow)(this,"_colors",v)}convert(v){const RI=(0,M.getRGB)(v);if(!window.matchMedia("(forced-colors: active)").matches)return RI;for(const[pI,DI]of this._colors)if(DI.every((FI,TI)=>FI===RI[TI]))return g._colorsMapping.get(pI);return RI}getHexCode(v){const RI=this._colors.get(v);return RI?h.Util.makeHexColor(...RI):v}};let j=g;cg(j,"_colorsMapping",new Map([["CanvasText",[0,0,0]],["Canvas",[255,255,255]]])),c.ColorManager=j;const O=class{constructor(v,RI){zI(this,w);zI(this,E);zI(this,iI);zI(this,eI);zI(this,W);zI(this,S);zI(this,lI);zI(this,MI);zI(this,WI);zI(this,o,null);zI(this,X,new Map);zI(this,b,new Map);zI(this,N,new p);zI(this,F,new r);zI(this,hI,0);zI(this,YI,null);zI(this,nI,null);zI(this,gI,new T);zI(this,U,!1);zI(this,II,h.AnnotationEditorType.NONE);zI(this,q,new Set);zI(this,mI,this.keydown.bind(this));zI(this,NI,this.onEditingAction.bind(this));zI(this,BI,this.onPageChanging.bind(this));zI(this,J,{isEditing:!1,isEmpty:!0,hasEmptyClipboard:!0,hasSomethingToUndo:!1,hasSomethingToRedo:!1,hasSelectedEditor:!1});zI(this,e,null);UI(this,e,v),UI(this,nI,RI),VI(this,nI)._on("editingaction",VI(this,NI)),VI(this,nI)._on("pagechanging",VI(this,BI))}destroy(){jI(this,E,Mg).call(this),VI(this,nI)._off("editingaction",VI(this,NI)),VI(this,nI)._off("pagechanging",VI(this,BI));for(const v of VI(this,b).values())v.destroy();VI(this,b).clear(),VI(this,X).clear(),UI(this,o,null),VI(this,q).clear(),VI(this,N).destroy(),VI(this,F).destroy()}onPageChanging({pageNumber:v}){UI(this,hI,v-1)}focusMainContainer(){VI(this,e).focus()}keydown(v){var RI;(RI=this.getActive())!=null&&RI.shouldGetKeyboardEvents()||O._keyboardManager.exec(this,v)}onEditingAction(v){["undo","redo","cut","copy","paste","delete","selectAll"].includes(v.name)&&this[v.name]()}setEditingState(v){v?(jI(this,w,Og).call(this),jI(this,iI,eg).call(this,{isEditing:VI(this,II)!==h.AnnotationEditorType.NONE,isEmpty:jI(this,MI,hg).call(this),hasSomethingToUndo:VI(this,F).hasSomethingToUndo(),hasSomethingToRedo:VI(this,F).hasSomethingToRedo(),hasSelectedEditor:!1,hasEmptyClipboard:VI(this,N).isEmpty()})):(jI(this,E,Mg).call(this),jI(this,iI,eg).call(this,{isEditing:!1}))}registerEditorTypes(v){UI(this,YI,v);for(const RI of VI(this,YI))jI(this,eI,ng).call(this,RI.defaultPropertiesToUpdate)}getId(){return VI(this,gI).getId()}addLayer(v){VI(this,b).set(v.pageIndex,v),VI(this,U)?v.enable():v.disable()}removeLayer(v){VI(this,b).delete(v.pageIndex)}updateMode(v){if(UI(this,II,v),v===h.AnnotationEditorType.NONE)this.setEditingState(!1),jI(this,S,fg).call(this);else{this.setEditingState(!0),jI(this,W,Eg).call(this);for(const RI of VI(this,b).values())RI.updateMode(v)}}updateToolbar(v){v!==VI(this,II)&&VI(this,nI).dispatch("switchannotationeditormode",{source:this,mode:v})}updateParams(v,RI){for(const pI of VI(this,q))pI.updateParams(v,RI);for(const pI of VI(this,YI))pI.updateDefaultParams(v,RI)}getEditors(v){const RI=[];for(const pI of VI(this,X).values())pI.pageIndex===v&&RI.push(pI);return RI}getEditor(v){return VI(this,X).get(v)}addEditor(v){VI(this,X).set(v.id,v)}removeEditor(v){VI(this,X).delete(v.id),this.unselect(v)}setActiveEditor(v){VI(this,o)!==v&&(UI(this,o,v),v&&jI(this,eI,ng).call(this,v.propertiesToUpdate))}toggleSelected(v){if(VI(this,q).has(v)){VI(this,q).delete(v),v.unselect(),jI(this,iI,eg).call(this,{hasSelectedEditor:this.hasSelection});return}VI(this,q).add(v),v.select(),jI(this,eI,ng).call(this,v.propertiesToUpdate),jI(this,iI,eg).call(this,{hasSelectedEditor:!0})}setSelected(v){for(const RI of VI(this,q))RI!==v&&RI.unselect();VI(this,q).clear(),VI(this,q).add(v),v.select(),jI(this,eI,ng).call(this,v.propertiesToUpdate),jI(this,iI,eg).call(this,{hasSelectedEditor:!0})}isSelected(v){return VI(this,q).has(v)}unselect(v){v.unselect(),VI(this,q).delete(v),jI(this,iI,eg).call(this,{hasSelectedEditor:this.hasSelection})}get hasSelection(){return VI(this,q).size!==0}undo(){VI(this,F).undo(),jI(this,iI,eg).call(this,{hasSomethingToUndo:VI(this,F).hasSomethingToUndo(),hasSomethingToRedo:!0,isEmpty:jI(this,MI,hg).call(this)})}redo(){VI(this,F).redo(),jI(this,iI,eg).call(this,{hasSomethingToUndo:!0,hasSomethingToRedo:VI(this,F).hasSomethingToRedo(),isEmpty:jI(this,MI,hg).call(this)})}addCommands(v){VI(this,F).add(v),jI(this,iI,eg).call(this,{hasSomethingToUndo:!0,hasSomethingToRedo:!1,isEmpty:jI(this,MI,hg).call(this)})}delete(){if(VI(this,o)&&VI(this,o).commitOrRemove(),!this.hasSelection)return;const v=[...VI(this,q)],RI=()=>{for(const DI of v)DI.remove()},pI=()=>{for(const DI of v)jI(this,lI,Kg).call(this,DI)};this.addCommands({cmd:RI,undo:pI,mustExec:!0})}copy(){if(VI(this,o)&&VI(this,o).commitOrRemove(),this.hasSelection){const v=[];for(const RI of VI(this,q))RI.isEmpty()||v.push(RI);if(v.length===0)return;VI(this,N).copy(v),jI(this,iI,eg).call(this,{hasEmptyClipboard:!1})}}cut(){this.copy(),this.delete()}paste(){if(VI(this,N).isEmpty())return;this.unselectAll();const v=VI(this,b).get(VI(this,hI)),RI=VI(this,N).paste().map(FI=>v.deserialize(FI)),pI=()=>{for(const FI of RI)jI(this,lI,Kg).call(this,FI);jI(this,WI,Bg).call(this,RI)},DI=()=>{for(const FI of RI)FI.remove()};this.addCommands({cmd:pI,undo:DI,mustExec:!0})}selectAll(){for(const v of VI(this,q))v.commit();jI(this,WI,Bg).call(this,VI(this,X).values())}unselectAll(){if(VI(this,o)){VI(this,o).commitOrRemove();return}if(jI(this,WI,Bg).size!==0){for(const v of VI(this,q))v.unselect();VI(this,q).clear(),jI(this,iI,eg).call(this,{hasSelectedEditor:!1})}}isActive(v){return VI(this,o)===v}getActive(){return VI(this,o)}getMode(){return VI(this,II)}};let D=O;o=new WeakMap,X=new WeakMap,b=new WeakMap,N=new WeakMap,F=new WeakMap,hI=new WeakMap,YI=new WeakMap,nI=new WeakMap,gI=new WeakMap,U=new WeakMap,II=new WeakMap,q=new WeakMap,mI=new WeakMap,NI=new WeakMap,BI=new WeakMap,J=new WeakMap,e=new WeakMap,w=new WeakSet,Og=function(){VI(this,e).addEventListener("keydown",VI(this,mI))},E=new WeakSet,Mg=function(){VI(this,e).removeEventListener("keydown",VI(this,mI))},iI=new WeakSet,eg=function(v){Object.entries(v).some(([pI,DI])=>VI(this,J)[pI]!==DI)&&VI(this,nI).dispatch("annotationeditorstateschanged",{source:this,details:Object.assign(VI(this,J),v)})},eI=new WeakSet,ng=function(v){VI(this,nI).dispatch("annotationeditorparamschanged",{source:this,details:v})},W=new WeakSet,Eg=function(){if(!VI(this,U)){UI(this,U,!0);for(const v of VI(this,b).values())v.enable()}},S=new WeakSet,fg=function(){if(this.unselectAll(),VI(this,U)){UI(this,U,!1);for(const v of VI(this,b).values())v.disable()}},lI=new WeakSet,Kg=function(v){const RI=VI(this,b).get(v.pageIndex);RI?RI.addOrRebuild(v):this.addEditor(v)},MI=new WeakSet,hg=function(){if(VI(this,X).size===0)return!0;if(VI(this,X).size===1)for(const v of VI(this,X).values())return v.isEmpty();return!1},WI=new WeakSet,Bg=function(v){VI(this,q).clear();for(const RI of v)RI.isEmpty()||(VI(this,q).add(RI),RI.select());jI(this,iI,eg).call(this,{hasSelectedEditor:!0})},cg(D,"_keyboardManager",new Z([[["ctrl+a","mac+meta+a"],O.prototype.selectAll],[["ctrl+c","mac+meta+c"],O.prototype.copy],[["ctrl+v","mac+meta+v"],O.prototype.paste],[["ctrl+x","mac+meta+x"],O.prototype.cut],[["ctrl+z","mac+meta+z"],O.prototype.undo],[["ctrl+y","ctrl+shift+Z","mac+meta+shift+Z"],O.prototype.redo],[["Backspace","alt+Backspace","ctrl+Backspace","shift+Backspace","mac+Backspace","mac+alt+Backspace","mac+ctrl+Backspace","Delete","ctrl+Delete","shift+Delete"],O.prototype.delete],[["Escape","mac+Escape"],O.prototype.unselectAll]])),c.AnnotationEditorUIManager=D},(wI,c,$)=>{Object.defineProperty(c,"__esModule",{value:!0}),c.StatTimer=c.RenderingCancelledException=c.PixelsPerInch=c.PageViewport=c.PDFDateString=c.DOMStandardFontDataFactory=c.DOMSVGFactory=c.DOMCanvasFactory=c.DOMCMapReaderFactory=c.AnnotationPrefix=void 0,c.deprecated=g,c.getColorValues=F,c.getCurrentTransform=hI,c.getCurrentTransformInverse=YI,c.getFilenameFromUrl=B,c.getPdfFilenameFromUrl=Y,c.getRGB=N,c.getXfaPageViewport=b,c.isDataScheme=C,c.isPdfFile=l,c.isValidFetchUrl=i,c.loadScript=I;var h=$(9),M=$(1);const _="http://www.w3.org/2000/svg",z="pdfjs_internal_id_";c.AnnotationPrefix=z;const nI=class{};let T=nI;cg(T,"CSS",96),cg(T,"PDF",72),cg(T,"PDF_TO_CSS_UNITS",nI.CSS/nI.PDF),c.PixelsPerInch=T;class r extends h.BaseCanvasFactory{constructor({ownerDocument:U=globalThis.document}={}){super(),this._document=U}_createCanvas(U,II){const q=this._document.createElement("canvas");return q.width=U,q.height=II,q}}c.DOMCanvasFactory=r;async function Z(gI,U=!1){if(i(gI,document.baseURI)){const II=await fetch(gI);if(!II.ok)throw new Error(II.statusText);return U?new Uint8Array(await II.arrayBuffer()):(0,M.stringToBytes)(await II.text())}return new Promise((II,q)=>{const mI=new XMLHttpRequest;mI.open("GET",gI,!0),U&&(mI.responseType="arraybuffer"),mI.onreadystatechange=()=>{if(mI.readyState===XMLHttpRequest.DONE){if(mI.status===200||mI.status===0){let NI;if(U&&mI.response?NI=new Uint8Array(mI.response):!U&&mI.responseText&&(NI=(0,M.stringToBytes)(mI.responseText)),NI){II(NI);return}}q(new Error(mI.statusText))}},mI.send(null)})}class p extends h.BaseCMapReaderFactory{_fetchData(U,II){return Z(U,this.isCompressed).then(q=>({cMapData:q,compressionType:II}))}}c.DOMCMapReaderFactory=p;class j extends h.BaseStandardFontDataFactory{_fetchData(U){return Z(U,!0)}}c.DOMStandardFontDataFactory=j;class D extends h.BaseSVGFactory{_createSVG(U){return document.createElementNS(_,U)}}c.DOMSVGFactory=D;class m{constructor({viewBox:U,scale:II,rotation:q,offsetX:mI=0,offsetY:NI=0,dontFlip:BI=!1}){this.viewBox=U,this.scale=II,this.rotation=q,this.offsetX=mI,this.offsetY=NI;const J=(U[2]+U[0])/2,e=(U[3]+U[1])/2;let w,x,E,P;switch(q%=360,q<0&&(q+=360),q){case 180:w=-1,x=0,E=0,P=1;break;case 90:w=0,x=1,E=1,P=0;break;case 270:w=0,x=-1,E=-1,P=0;break;case 0:w=1,x=0,E=0,P=-1;break;default:throw new Error("PageViewport: Invalid rotation, must be a multiple of 90 degrees.")}BI&&(E=-E,P=-P);let iI,aI,eI,A;w===0?(iI=Math.abs(e-U[1])*II+mI,aI=Math.abs(J-U[0])*II+NI,eI=Math.abs(U[3]-U[1])*II,A=Math.abs(U[2]-U[0])*II):(iI=Math.abs(J-U[0])*II+mI,aI=Math.abs(e-U[1])*II+NI,eI=Math.abs(U[2]-U[0])*II,A=Math.abs(U[3]-U[1])*II),this.transform=[w*II,x*II,E*II,P*II,iI-w*II*J-E*II*e,aI-x*II*J-P*II*e],this.width=eI,this.height=A}clone({scale:U=this.scale,rotation:II=this.rotation,offsetX:q=this.offsetX,offsetY:mI=this.offsetY,dontFlip:NI=!1}={}){return new m({viewBox:this.viewBox.slice(),scale:U,rotation:II,offsetX:q,offsetY:mI,dontFlip:NI})}convertToViewportPoint(U,II){return M.Util.applyTransform([U,II],this.transform)}convertToViewportRectangle(U){const II=M.Util.applyTransform([U[0],U[1]],this.transform),q=M.Util.applyTransform([U[2],U[3]],this.transform);return[II[0],II[1],q[0],q[1]]}convertToPdfPoint(U,II){return M.Util.applyInverseTransform([U,II],this.transform)}}c.PageViewport=m;class d extends M.BaseException{constructor(U,II){super(U,"RenderingCancelledException"),this.type=II}}c.RenderingCancelledException=d;function C(gI){const U=gI.length;let II=0;for(;II<U&&gI[II].trim()==="";)II++;return gI.substring(II,II+5).toLowerCase()==="data:"}function l(gI){return typeof gI=="string"&&/\.pdf$/i.test(gI)}function B(gI){const U=gI.indexOf("#"),II=gI.indexOf("?"),q=Math.min(U>0?U:gI.length,II>0?II:gI.length);return gI.substring(gI.lastIndexOf("/",q)+1,q)}function Y(gI,U="document.pdf"){if(typeof gI!="string")return U;if(C(gI))return(0,M.warn)('getPdfFilenameFromUrl: ignore "data:"-URL for performance reasons.'),U;const II=/^(?:(?:[^:]+:)?\/\/[^/]+)?([^?#]*)(\?[^#]*)?(#.*)?$/,q=/[^/?#=]+\.pdf\b(?!.*\.pdf\b)/i,mI=II.exec(gI);let NI=q.exec(mI[1])||q.exec(mI[2])||q.exec(mI[3]);if(NI&&(NI=NI[0],NI.includes("%")))try{NI=q.exec(decodeURIComponent(NI))[0]}catch{}return NI||U}class a{constructor(){this.started=Object.create(null),this.times=[]}time(U){U in this.started&&(0,M.warn)(`Timer is already running for ${U}`),this.started[U]=Date.now()}timeEnd(U){U in this.started||(0,M.warn)(`Timer has not been started for ${U}`),this.times.push({name:U,start:this.started[U],end:Date.now()}),delete this.started[U]}toString(){const U=[];let II=0;for(const q of this.times){const mI=q.name;mI.length>II&&(II=mI.length)}for(const q of this.times){const mI=q.end-q.start;U.push(`${q.name.padEnd(II)} ${mI}ms
`)}return U.join("")}}c.StatTimer=a;function i(gI,U){try{const{protocol:II}=U?new URL(gI,U):new URL(gI);return II==="http:"||II==="https:"}catch{return!1}}function I(gI,U=!1){return new Promise((II,q)=>{const mI=document.createElement("script");mI.src=gI,mI.onload=function(NI){U&&mI.remove(),II(NI)},mI.onerror=function(){q(new Error(`Cannot load script at: ${mI.src}`))},(document.head||document.documentElement).append(mI)})}function g(gI){console.log("Deprecated API usage: "+gI)}let o;class X{static toDateObject(U){if(!U||typeof U!="string")return null;o||(o=new RegExp("^D:(\\d{4})(\\d{2})?(\\d{2})?(\\d{2})?(\\d{2})?(\\d{2})?([Z|+|-])?(\\d{2})?'?(\\d{2})?'?"));const II=o.exec(U);if(!II)return null;const q=parseInt(II[1],10);let mI=parseInt(II[2],10);mI=mI>=1&&mI<=12?mI-1:0;let NI=parseInt(II[3],10);NI=NI>=1&&NI<=31?NI:1;let BI=parseInt(II[4],10);BI=BI>=0&&BI<=23?BI:0;let J=parseInt(II[5],10);J=J>=0&&J<=59?J:0;let e=parseInt(II[6],10);e=e>=0&&e<=59?e:0;const w=II[7]||"Z";let x=parseInt(II[8],10);x=x>=0&&x<=23?x:0;let E=parseInt(II[9],10)||0;return E=E>=0&&E<=59?E:0,w==="-"?(BI+=x,J+=E):w==="+"&&(BI-=x,J-=E),new Date(Date.UTC(q,mI,NI,BI,J,e))}}c.PDFDateString=X;function b(gI,{scale:U=1,rotation:II=0}){const{width:q,height:mI}=gI.attributes.style,NI=[0,0,parseInt(q),parseInt(mI)];return new m({viewBox:NI,scale:U,rotation:II})}function N(gI){if(gI.startsWith("#")){const U=parseInt(gI.slice(1),16);return[(U&16711680)>>16,(U&65280)>>8,U&255]}return gI.startsWith("rgb(")?gI.slice(4,-1).split(",").map(U=>parseInt(U)):gI.startsWith("rgba(")?gI.slice(5,-1).split(",").map(U=>parseInt(U)).slice(0,3):((0,M.warn)(`Not a valid color format: "${gI}"`),[0,0,0])}function F(gI){const U=document.createElement("span");U.style.visibility="hidden",document.body.append(U);for(const II of gI.keys()){U.style.color=II;const q=window.getComputedStyle(U).color;gI.set(II,N(q))}U.remove()}function hI(gI){const{a:U,b:II,c:q,d:mI,e:NI,f:BI}=gI.getTransform();return[U,II,q,mI,NI,BI]}function YI(gI){const{a:U,b:II,c:q,d:mI,e:NI,f:BI}=gI.getTransform().invertSelf();return[U,II,q,mI,NI,BI]}},(wI,c,$)=>{Object.defineProperty(c,"__esModule",{value:!0}),c.BaseStandardFontDataFactory=c.BaseSVGFactory=c.BaseCanvasFactory=c.BaseCMapReaderFactory=void 0;var h=$(1);class M{constructor(){this.constructor===M&&(0,h.unreachable)("Cannot initialize BaseCanvasFactory.")}create(Z,p){if(Z<=0||p<=0)throw new Error("Invalid canvas size");const j=this._createCanvas(Z,p);return{canvas:j,context:j.getContext("2d")}}reset(Z,p,j){if(!Z.canvas)throw new Error("Canvas is not specified");if(p<=0||j<=0)throw new Error("Invalid canvas size");Z.canvas.width=p,Z.canvas.height=j}destroy(Z){if(!Z.canvas)throw new Error("Canvas is not specified");Z.canvas.width=0,Z.canvas.height=0,Z.canvas=null,Z.context=null}_createCanvas(Z,p){(0,h.unreachable)("Abstract method `_createCanvas` called.")}}c.BaseCanvasFactory=M;class _{constructor({baseUrl:Z=null,isCompressed:p=!1}){this.constructor===_&&(0,h.unreachable)("Cannot initialize BaseCMapReaderFactory."),this.baseUrl=Z,this.isCompressed=p}async fetch({name:Z}){if(!this.baseUrl)throw new Error('The CMap "baseUrl" parameter must be specified, ensure that the "cMapUrl" and "cMapPacked" API parameters are provided.');if(!Z)throw new Error("CMap name must be specified.");const p=this.baseUrl+Z+(this.isCompressed?".bcmap":""),j=this.isCompressed?h.CMapCompressionType.BINARY:h.CMapCompressionType.NONE;return this._fetchData(p,j).catch(D=>{throw new Error(`Unable to load ${this.isCompressed?"binary ":""}CMap at: ${p}`)})}_fetchData(Z,p){(0,h.unreachable)("Abstract method `_fetchData` called.")}}c.BaseCMapReaderFactory=_;class z{constructor({baseUrl:Z=null}){this.constructor===z&&(0,h.unreachable)("Cannot initialize BaseStandardFontDataFactory."),this.baseUrl=Z}async fetch({filename:Z}){if(!this.baseUrl)throw new Error('The standard font "baseUrl" parameter must be specified, ensure that the "standardFontDataUrl" API parameter is provided.');if(!Z)throw new Error("Font filename must be specified.");const p=`${this.baseUrl}${Z}`;return this._fetchData(p).catch(j=>{throw new Error(`Unable to load font data at: ${p}`)})}_fetchData(Z){(0,h.unreachable)("Abstract method `_fetchData` called.")}}c.BaseStandardFontDataFactory=z;class T{constructor(){this.constructor===T&&(0,h.unreachable)("Cannot initialize BaseSVGFactory.")}create(Z,p,j=!1){if(Z<=0||p<=0)throw new Error("Invalid SVG dimensions");const D=this._createSVG("svg:svg");return D.setAttribute("version","1.1"),j||(D.setAttribute("width",`${Z}px`),D.setAttribute("height",`${p}px`)),D.setAttribute("preserveAspectRatio","none"),D.setAttribute("viewBox",`0 0 ${Z} ${p}`),D}createElement(Z){if(typeof Z!="string")throw new Error("Invalid SVG element type");return this._createSVG(Z)}_createSVG(Z){(0,h.unreachable)("Abstract method `_createSVG` called.")}}c.BaseSVGFactory=T},(wI,c,$)=>{Object.defineProperty(c,"__esModule",{value:!0}),c.MurmurHash3_64=void 0;var h=$(1);const M=3285377520,_=4294901760,z=65535;class T{constructor(Z){this.h1=Z?Z&4294967295:M,this.h2=Z?Z&4294967295:M}update(Z){let p,j;if(typeof Z=="string"){p=new Uint8Array(Z.length*2),j=0;for(let o=0,X=Z.length;o<X;o++){const b=Z.charCodeAt(o);b<=255?p[j++]=b:(p[j++]=b>>>8,p[j++]=b&255)}}else if((0,h.isArrayBuffer)(Z))p=Z.slice(),j=p.byteLength;else throw new Error("Wrong data format in MurmurHash3_64_update. Input must be a string or array.");const D=j>>2,m=j-D*4,d=new Uint32Array(p.buffer,0,D);let C=0,l=0,B=this.h1,Y=this.h2;const a=3432918353,i=461845907,I=a&z,g=i&z;for(let o=0;o<D;o++)o&1?(C=d[o],C=C*a&_|C*I&z,C=C<<15|C>>>17,C=C*i&_|C*g&z,B^=C,B=B<<13|B>>>19,B=B*5+3864292196):(l=d[o],l=l*a&_|l*I&z,l=l<<15|l>>>17,l=l*i&_|l*g&z,Y^=l,Y=Y<<13|Y>>>19,Y=Y*5+3864292196);switch(C=0,m){case 3:C^=p[D*4+2]<<16;case 2:C^=p[D*4+1]<<8;case 1:C^=p[D*4],C=C*a&_|C*I&z,C=C<<15|C>>>17,C=C*i&_|C*g&z,D&1?B^=C:Y^=C}this.h1=B,this.h2=Y}hexdigest(){let Z=this.h1,p=this.h2;Z^=p>>>1,Z=Z*3981806797&_|Z*36045&z,p=p*4283543511&_|((p<<16|Z>>>16)*2950163797&_)>>>16,Z^=p>>>1,Z=Z*444984403&_|Z*60499&z,p=p*3301882366&_|((p<<16|Z>>>16)*3120437893&_)>>>16,Z^=p>>>1;const j=(Z>>>0).toString(16),D=(p>>>0).toString(16);return j.padStart(8,"0")+D.padStart(8,"0")}}c.MurmurHash3_64=T},(wI,c,$)=>{Object.defineProperty(c,"__esModule",{value:!0}),c.FontLoader=c.FontFaceObject=void 0;var h=$(1);class M{constructor({docId:r,onUnsupportedFeature:Z,ownerDocument:p=globalThis.document,styleElement:j=null}){this.constructor===M&&(0,h.unreachable)("Cannot initialize BaseFontLoader."),this.docId=r,this._onUnsupportedFeature=Z,this._document=p,this.nativeFontFaces=[],this.styleElement=null}addNativeFontFace(r){this.nativeFontFaces.push(r),this._document.fonts.add(r)}insertRule(r){let Z=this.styleElement;Z||(Z=this.styleElement=this._document.createElement("style"),Z.id=`PDFJS_FONT_STYLE_TAG_${this.docId}`,this._document.documentElement.getElementsByTagName("head")[0].append(Z));const p=Z.sheet;p.insertRule(r,p.cssRules.length)}clear(){for(const r of this.nativeFontFaces)this._document.fonts.delete(r);this.nativeFontFaces.length=0,this.styleElement&&(this.styleElement.remove(),this.styleElement=null)}async bind(r){if(r.attached||r.missingFile)return;if(r.attached=!0,this.isFontLoadingAPISupported){const p=r.createNativeFontFace();if(p){this.addNativeFontFace(p);try{await p.loaded}catch(j){throw this._onUnsupportedFeature({featureId:h.UNSUPPORTED_FEATURES.errorFontLoadNative}),(0,h.warn)(`Failed to load font '${p.family}': '${j}'.`),r.disableFontFace=!0,j}}return}const Z=r.createFontFaceRule();if(Z){if(this.insertRule(Z),this.isSyncFontLoadingSupported)return;await new Promise(p=>{const j=this._queueLoadingCallback(p);this._prepareFontLoadEvent([Z],[r],j)})}}_queueLoadingCallback(r){(0,h.unreachable)("Abstract method `_queueLoadingCallback`.")}get isFontLoadingAPISupported(){var Z;const r=!!((Z=this._document)!=null&&Z.fonts);return(0,h.shadow)(this,"isFontLoadingAPISupported",r)}get isSyncFontLoadingSupported(){(0,h.unreachable)("Abstract method `isSyncFontLoadingSupported`.")}get _loadTestFont(){(0,h.unreachable)("Abstract method `_loadTestFont`.")}_prepareFontLoadEvent(r,Z,p){(0,h.unreachable)("Abstract method `_prepareFontLoadEvent`.")}}let _;c.FontLoader=_,c.FontLoader=_=class extends M{constructor(r){super(r),this.loadingContext={requests:[],nextRequestId:0},this.loadTestFontId=0}get isSyncFontLoadingSupported(){let r=!1;if(typeof navigator>"u")r=!0;else{const Z=/Mozilla\/5.0.*?rv:(\d+).*? Gecko/.exec(navigator.userAgent);(Z==null?void 0:Z[1])>=14&&(r=!0)}return(0,h.shadow)(this,"isSyncFontLoadingSupported",r)}_queueLoadingCallback(r){function Z(){for((0,h.assert)(!j.done,"completeRequest() cannot be called twice."),j.done=!0;p.requests.length>0&&p.requests[0].done;){const D=p.requests.shift();setTimeout(D.callback,0)}}const p=this.loadingContext,j={id:`pdfjs-font-loading-${p.nextRequestId++}`,done:!1,complete:Z,callback:r};return p.requests.push(j),j}get _loadTestFont(){const r=function(){return atob("T1RUTwALAIAAAwAwQ0ZGIDHtZg4AAAOYAAAAgUZGVE1lkzZwAAAEHAAAABxHREVGABQAFQAABDgAAAAeT1MvMlYNYwkAAAEgAAAAYGNtYXABDQLUAAACNAAAAUJoZWFk/xVFDQAAALwAAAA2aGhlYQdkA+oAAAD0AAAAJGhtdHgD6AAAAAAEWAAAAAZtYXhwAAJQAAAAARgAAAAGbmFtZVjmdH4AAAGAAAAAsXBvc3T/hgAzAAADeAAAACAAAQAAAAEAALZRFsRfDzz1AAsD6AAAAADOBOTLAAAAAM4KHDwAAAAAA+gDIQAAAAgAAgAAAAAAAAABAAADIQAAAFoD6AAAAAAD6AABAAAAAAAAAAAAAAAAAAAAAQAAUAAAAgAAAAQD6AH0AAUAAAKKArwAAACMAooCvAAAAeAAMQECAAACAAYJAAAAAAAAAAAAAQAAAAAAAAAAAAAAAFBmRWQAwAAuAC4DIP84AFoDIQAAAAAAAQAAAAAAAAAAACAAIAABAAAADgCuAAEAAAAAAAAAAQAAAAEAAAAAAAEAAQAAAAEAAAAAAAIAAQAAAAEAAAAAAAMAAQAAAAEAAAAAAAQAAQAAAAEAAAAAAAUAAQAAAAEAAAAAAAYAAQAAAAMAAQQJAAAAAgABAAMAAQQJAAEAAgABAAMAAQQJAAIAAgABAAMAAQQJAAMAAgABAAMAAQQJAAQAAgABAAMAAQQJAAUAAgABAAMAAQQJAAYAAgABWABYAAAAAAAAAwAAAAMAAAAcAAEAAAAAADwAAwABAAAAHAAEACAAAAAEAAQAAQAAAC7//wAAAC7////TAAEAAAAAAAABBgAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMAAAAAAAD/gwAyAAAAAQAAAAAAAAAAAAAAAAAAAAABAAQEAAEBAQJYAAEBASH4DwD4GwHEAvgcA/gXBIwMAYuL+nz5tQXkD5j3CBLnEQACAQEBIVhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYAAABAQAADwACAQEEE/t3Dov6fAH6fAT+fPp8+nwHDosMCvm1Cvm1DAz6fBQAAAAAAAABAAAAAMmJbzEAAAAAzgTjFQAAAADOBOQpAAEAAAAAAAAADAAUAAQAAAABAAAAAgABAAAAAAAAAAAD6AAAAAAAAA==")};return(0,h.shadow)(this,"_loadTestFont",r())}_prepareFontLoadEvent(r,Z,p){function j(YI,nI){return YI.charCodeAt(nI)<<24|YI.charCodeAt(nI+1)<<16|YI.charCodeAt(nI+2)<<8|YI.charCodeAt(nI+3)&255}function D(YI,nI,gI,U){const II=YI.substring(0,nI),q=YI.substring(nI+gI);return II+U+q}let m,d;const C=this._document.createElement("canvas");C.width=1,C.height=1;const l=C.getContext("2d");let B=0;function Y(YI,nI){if(B++,B>30){(0,h.warn)("Load test font never loaded."),nI();return}if(l.font="30px "+YI,l.fillText(".",0,20),l.getImageData(0,0,1,1).data[3]>0){nI();return}setTimeout(Y.bind(null,YI,nI))}const a=`lt${Date.now()}${this.loadTestFontId++}`;let i=this._loadTestFont;i=D(i,976,a.length,a);const g=16,o=1482184792;let X=j(i,g);for(m=0,d=a.length-3;m<d;m+=4)X=X-o+j(a,m)|0;m<a.length&&(X=X-o+j(a+"XXX",m)|0),i=D(i,g,4,(0,h.string32)(X));const b=`url(data:font/opentype;base64,${btoa(i)});`,N=`@font-face {font-family:"${a}";src:${b}}`;this.insertRule(N);const F=[];for(const YI of Z)F.push(YI.loadedName);F.push(a);const hI=this._document.createElement("div");hI.style.visibility="hidden",hI.style.width=hI.style.height="10px",hI.style.position="absolute",hI.style.top=hI.style.left="0px";for(const YI of F){const nI=this._document.createElement("span");nI.textContent="Hi",nI.style.fontFamily=YI,hI.append(nI)}this._document.body.append(hI),Y(a,()=>{hI.remove(),p.complete()})}};class z{constructor(r,{isEvalSupported:Z=!0,disableFontFace:p=!1,ignoreErrors:j=!1,onUnsupportedFeature:D,fontRegistry:m=null}){this.compiledGlyphs=Object.create(null);for(const d in r)this[d]=r[d];this.isEvalSupported=Z!==!1,this.disableFontFace=p===!0,this.ignoreErrors=j===!0,this._onUnsupportedFeature=D,this.fontRegistry=m}createNativeFontFace(){if(!this.data||this.disableFontFace)return null;let r;if(!this.cssFontInfo)r=new FontFace(this.loadedName,this.data,{});else{const Z={weight:this.cssFontInfo.fontWeight};this.cssFontInfo.italicAngle&&(Z.style=`oblique ${this.cssFontInfo.italicAngle}deg`),r=new FontFace(this.cssFontInfo.fontFamily,this.data,Z)}return this.fontRegistry&&this.fontRegistry.registerFont(this),r}createFontFaceRule(){if(!this.data||this.disableFontFace)return null;const r=(0,h.bytesToString)(this.data),Z=`url(data:${this.mimetype};base64,${btoa(r)});`;let p;if(!this.cssFontInfo)p=`@font-face {font-family:"${this.loadedName}";src:${Z}}`;else{let j=`font-weight: ${this.cssFontInfo.fontWeight};`;this.cssFontInfo.italicAngle&&(j+=`font-style: oblique ${this.cssFontInfo.italicAngle}deg;`),p=`@font-face {font-family:"${this.cssFontInfo.fontFamily}";${j}src:${Z}}`}return this.fontRegistry&&this.fontRegistry.registerFont(this,Z),p}getPathGenerator(r,Z){if(this.compiledGlyphs[Z]!==void 0)return this.compiledGlyphs[Z];let p;try{p=r.get(this.loadedName+"_path_"+Z)}catch(j){if(!this.ignoreErrors)throw j;return this._onUnsupportedFeature({featureId:h.UNSUPPORTED_FEATURES.errorFontGetPath}),(0,h.warn)(`getPathGenerator - ignoring character: "${j}".`),this.compiledGlyphs[Z]=function(D,m){}}if(this.isEvalSupported&&h.FeatureTest.isEvalSupported){const j=[];for(const D of p){const m=D.args!==void 0?D.args.join(","):"";j.push("c.",D.cmd,"(",m,`);
`)}return this.compiledGlyphs[Z]=new Function("c","size",j.join(""))}return this.compiledGlyphs[Z]=function(j,D){for(const m of p)m.cmd==="scale"&&(m.args=[D,-D]),j[m.cmd].apply(j,m.args)}}}c.FontFaceObject=z},(wI,c,$)=>{var mI,pg;Object.defineProperty(c,"__esModule",{value:!0}),c.CanvasGraphics=void 0;var h=$(8),M=$(1),_=$(13),z=$(14),T=$(3);const r=16,Z=100,p=4096,j=15,D=10,m=T.isNodeJS&&typeof Path2D>"u"?-1:1e3,d=16;function C(J,e){if(J._removeMirroring)throw new Error("Context is already forwarding operations.");J.__originalSave=J.save,J.__originalRestore=J.restore,J.__originalRotate=J.rotate,J.__originalScale=J.scale,J.__originalTranslate=J.translate,J.__originalTransform=J.transform,J.__originalSetTransform=J.setTransform,J.__originalResetTransform=J.resetTransform,J.__originalClip=J.clip,J.__originalMoveTo=J.moveTo,J.__originalLineTo=J.lineTo,J.__originalBezierCurveTo=J.bezierCurveTo,J.__originalRect=J.rect,J.__originalClosePath=J.closePath,J.__originalBeginPath=J.beginPath,J._removeMirroring=()=>{J.save=J.__originalSave,J.restore=J.__originalRestore,J.rotate=J.__originalRotate,J.scale=J.__originalScale,J.translate=J.__originalTranslate,J.transform=J.__originalTransform,J.setTransform=J.__originalSetTransform,J.resetTransform=J.__originalResetTransform,J.clip=J.__originalClip,J.moveTo=J.__originalMoveTo,J.lineTo=J.__originalLineTo,J.bezierCurveTo=J.__originalBezierCurveTo,J.rect=J.__originalRect,J.closePath=J.__originalClosePath,J.beginPath=J.__originalBeginPath,delete J._removeMirroring},J.save=function(){e.save(),this.__originalSave()},J.restore=function(){e.restore(),this.__originalRestore()},J.translate=function(x,E){e.translate(x,E),this.__originalTranslate(x,E)},J.scale=function(x,E){e.scale(x,E),this.__originalScale(x,E)},J.transform=function(x,E,P,iI,aI,eI){e.transform(x,E,P,iI,aI,eI),this.__originalTransform(x,E,P,iI,aI,eI)},J.setTransform=function(x,E,P,iI,aI,eI){e.setTransform(x,E,P,iI,aI,eI),this.__originalSetTransform(x,E,P,iI,aI,eI)},J.resetTransform=function(){e.resetTransform(),this.__originalResetTransform()},J.rotate=function(x){e.rotate(x),this.__originalRotate(x)},J.clip=function(x){e.clip(x),this.__originalClip(x)},J.moveTo=function(w,x){e.moveTo(w,x),this.__originalMoveTo(w,x)},J.lineTo=function(w,x){e.lineTo(w,x),this.__originalLineTo(w,x)},J.bezierCurveTo=function(w,x,E,P,iI,aI){e.bezierCurveTo(w,x,E,P,iI,aI),this.__originalBezierCurveTo(w,x,E,P,iI,aI)},J.rect=function(w,x,E,P){e.rect(w,x,E,P),this.__originalRect(w,x,E,P)},J.closePath=function(){e.closePath(),this.__originalClosePath()},J.beginPath=function(){e.beginPath(),this.__originalBeginPath()}}class l{constructor(e){this.canvasFactory=e,this.cache=Object.create(null)}getCanvas(e,w,x){let E;return this.cache[e]!==void 0?(E=this.cache[e],this.canvasFactory.reset(E,w,x)):(E=this.canvasFactory.create(w,x),this.cache[e]=E),E}delete(e){delete this.cache[e]}clear(){for(const e in this.cache){const w=this.cache[e];this.canvasFactory.destroy(w),delete this.cache[e]}}}function B(J,e,w,x,E,P,iI,aI,eI,A){const[W,L,S,Q,lI,uI]=(0,h.getCurrentTransform)(J);if(L===0&&S===0){const WI=iI*W+lI,tI=Math.round(WI),O=aI*Q+uI,f=Math.round(O),v=(iI+eI)*W+lI,RI=Math.abs(Math.round(v)-tI)||1,pI=(aI+A)*Q+uI,DI=Math.abs(Math.round(pI)-f)||1;return J.setTransform(Math.sign(W),0,0,Math.sign(Q),tI,f),J.drawImage(e,w,x,E,P,0,0,RI,DI),J.setTransform(W,L,S,Q,lI,uI),[RI,DI]}if(W===0&&Q===0){const WI=aI*S+lI,tI=Math.round(WI),O=iI*L+uI,f=Math.round(O),v=(aI+A)*S+lI,RI=Math.abs(Math.round(v)-tI)||1,pI=(iI+eI)*L+uI,DI=Math.abs(Math.round(pI)-f)||1;return J.setTransform(0,Math.sign(L),Math.sign(S),0,tI,f),J.drawImage(e,w,x,E,P,0,0,DI,RI),J.setTransform(W,L,S,Q,lI,uI),[DI,RI]}J.drawImage(e,w,x,E,P,iI,aI,eI,A);const MI=Math.hypot(W,L),ZI=Math.hypot(S,Q);return[MI*eI,ZI*A]}function Y(J){const{width:e,height:w}=J;if(e>m||w>m)return null;const x=1e3,E=new Uint8Array([0,2,4,0,1,0,5,4,8,10,0,8,0,2,1,0]),P=e+1;let iI=new Uint8Array(P*(w+1)),aI,eI,A;const W=e+7&-8;let L=new Uint8Array(W*w),S=0;for(const ZI of J.data){let WI=128;for(;WI>0;)L[S++]=ZI&WI?0:255,WI>>=1}let Q=0;for(S=0,L[S]!==0&&(iI[0]=1,++Q),eI=1;eI<e;eI++)L[S]!==L[S+1]&&(iI[eI]=L[S]?2:1,++Q),S++;for(L[S]!==0&&(iI[eI]=2,++Q),aI=1;aI<w;aI++){S=aI*W,A=aI*P,L[S-W]!==L[S]&&(iI[A]=L[S]?1:8,++Q);let ZI=(L[S]?4:0)+(L[S-W]?8:0);for(eI=1;eI<e;eI++)ZI=(ZI>>2)+(L[S+1]?4:0)+(L[S-W+1]?8:0),E[ZI]&&(iI[A+eI]=E[ZI],++Q),S++;if(L[S-W]!==L[S]&&(iI[A+eI]=L[S]?2:4,++Q),Q>x)return null}for(S=W*(w-1),A=aI*P,L[S]!==0&&(iI[A]=8,++Q),eI=1;eI<e;eI++)L[S]!==L[S+1]&&(iI[A+eI]=L[S]?4:8,++Q),S++;if(L[S]!==0&&(iI[A+eI]=4,++Q),Q>x)return null;const lI=new Int32Array([0,P,-1,0,-P,0,0,0,1]),uI=new Path2D;for(aI=0;Q&&aI<=w;aI++){let ZI=aI*P;const WI=ZI+e;for(;ZI<WI&&!iI[ZI];)ZI++;if(ZI===WI)continue;uI.moveTo(ZI%P,aI);const tI=ZI;let O=iI[ZI];do{const f=lI[O];do ZI+=f;while(!iI[ZI]);const v=iI[ZI];v!==5&&v!==10?(O=v,iI[ZI]=0):(O=v&51*O>>4,iI[ZI]&=O>>2|O<<2),uI.lineTo(ZI%P,ZI/P|0),iI[ZI]||--Q}while(tI!==ZI);--aI}return L=null,iI=null,function(ZI){ZI.save(),ZI.scale(1/e,-1/w),ZI.translate(0,-w),ZI.fill(uI),ZI.beginPath(),ZI.restore()}}class a{constructor(e,w){this.alphaIsShape=!1,this.fontSize=0,this.fontSizeScale=1,this.textMatrix=M.IDENTITY_MATRIX,this.textMatrixScale=1,this.fontMatrix=M.FONT_IDENTITY_MATRIX,this.leading=0,this.x=0,this.y=0,this.lineX=0,this.lineY=0,this.charSpacing=0,this.wordSpacing=0,this.textHScale=1,this.textRenderingMode=M.TextRenderingMode.FILL,this.textRise=0,this.fillColor="#000000",this.strokeColor="#000000",this.patternFill=!1,this.fillAlpha=1,this.strokeAlpha=1,this.lineWidth=1,this.activeSMask=null,this.transferMaps=null,this.startNewPathAndClipBox([0,0,e,w])}clone(){const e=Object.create(this);return e.clipBox=this.clipBox.slice(),e}setCurrentPoint(e,w){this.x=e,this.y=w}updatePathMinMax(e,w,x){[w,x]=M.Util.applyTransform([w,x],e),this.minX=Math.min(this.minX,w),this.minY=Math.min(this.minY,x),this.maxX=Math.max(this.maxX,w),this.maxY=Math.max(this.maxY,x)}updateRectMinMax(e,w){const x=M.Util.applyTransform(w,e),E=M.Util.applyTransform(w.slice(2),e);this.minX=Math.min(this.minX,x[0],E[0]),this.minY=Math.min(this.minY,x[1],E[1]),this.maxX=Math.max(this.maxX,x[0],E[0]),this.maxY=Math.max(this.maxY,x[1],E[1])}updateScalingPathMinMax(e,w){M.Util.scaleMinMax(e,w),this.minX=Math.min(this.minX,w[0]),this.maxX=Math.max(this.maxX,w[1]),this.minY=Math.min(this.minY,w[2]),this.maxY=Math.max(this.maxY,w[3])}updateCurvePathMinMax(e,w,x,E,P,iI,aI,eI,A,W){const L=M.Util.bezierBoundingBox(w,x,E,P,iI,aI,eI,A);if(W){W[0]=Math.min(W[0],L[0],L[2]),W[1]=Math.max(W[1],L[0],L[2]),W[2]=Math.min(W[2],L[1],L[3]),W[3]=Math.max(W[3],L[1],L[3]);return}this.updateRectMinMax(e,L)}getPathBoundingBox(e=_.PathType.FILL,w=null){const x=[this.minX,this.minY,this.maxX,this.maxY];if(e===_.PathType.STROKE){w||(0,M.unreachable)("Stroke bounding box must include transform.");const E=M.Util.singularValueDecompose2dScale(w),P=E[0]*this.lineWidth/2,iI=E[1]*this.lineWidth/2;x[0]-=P,x[1]-=iI,x[2]+=P,x[3]+=iI}return x}updateClipFromPath(){const e=M.Util.intersect(this.clipBox,this.getPathBoundingBox());this.startNewPathAndClipBox(e||[0,0,0,0])}isEmptyClip(){return this.minX===1/0}startNewPathAndClipBox(e){this.clipBox=e,this.minX=1/0,this.minY=1/0,this.maxX=0,this.maxY=0}getClippedPathBoundingBox(e=_.PathType.FILL,w=null){return M.Util.intersect(this.clipBox,this.getPathBoundingBox(e,w))}}function i(J,e,w=null){if(typeof ImageData<"u"&&e instanceof ImageData){J.putImageData(e,0,0);return}const x=e.height,E=e.width,P=x%d,iI=(x-P)/d,aI=P===0?iI:iI+1,eI=J.createImageData(E,d);let A=0,W;const L=e.data,S=eI.data;let Q,lI,uI,MI,ZI,WI,tI,O;if(w)switch(w.length){case 1:ZI=w[0],WI=w[0],tI=w[0],O=w[0];break;case 4:ZI=w[0],WI=w[1],tI=w[2],O=w[3];break}if(e.kind===M.ImageKind.GRAYSCALE_1BPP){const f=L.byteLength,v=new Uint32Array(S.buffer,0,S.byteLength>>2),RI=v.length,pI=E+7>>3;let DI=4294967295,FI=M.FeatureTest.isLittleEndian?4278190080:255;for(O&&O[0]===255&&O[255]===0&&([DI,FI]=[FI,DI]),Q=0;Q<aI;Q++){for(uI=Q<iI?d:P,W=0,lI=0;lI<uI;lI++){const TI=f-A;let vI=0;const fI=TI>pI?E:TI*8-7,PI=fI&-8;let EI=0,SI=0;for(;vI<PI;vI+=8)SI=L[A++],v[W++]=SI&128?DI:FI,v[W++]=SI&64?DI:FI,v[W++]=SI&32?DI:FI,v[W++]=SI&16?DI:FI,v[W++]=SI&8?DI:FI,v[W++]=SI&4?DI:FI,v[W++]=SI&2?DI:FI,v[W++]=SI&1?DI:FI;for(;vI<fI;vI++)EI===0&&(SI=L[A++],EI=128),v[W++]=SI&EI?DI:FI,EI>>=1}for(;W<RI;)v[W++]=0;J.putImageData(eI,0,Q*d)}}else if(e.kind===M.ImageKind.RGBA_32BPP){const f=!!(ZI||WI||tI);for(lI=0,MI=E*d*4,Q=0;Q<iI;Q++){if(S.set(L.subarray(A,A+MI)),A+=MI,f)for(let v=0;v<MI;v+=4)ZI&&(S[v+0]=ZI[S[v+0]]),WI&&(S[v+1]=WI[S[v+1]]),tI&&(S[v+2]=tI[S[v+2]]);J.putImageData(eI,0,lI),lI+=d}if(Q<aI){if(MI=E*P*4,S.set(L.subarray(A,A+MI)),f)for(let v=0;v<MI;v+=4)ZI&&(S[v+0]=ZI[S[v+0]]),WI&&(S[v+1]=WI[S[v+1]]),tI&&(S[v+2]=tI[S[v+2]]);J.putImageData(eI,0,lI)}}else if(e.kind===M.ImageKind.RGB_24BPP){const f=!!(ZI||WI||tI);for(uI=d,MI=E*uI,Q=0;Q<aI;Q++){for(Q>=iI&&(uI=P,MI=E*uI),W=0,lI=MI;lI--;)S[W++]=L[A++],S[W++]=L[A++],S[W++]=L[A++],S[W++]=255;if(f)for(let v=0;v<W;v+=4)ZI&&(S[v+0]=ZI[S[v+0]]),WI&&(S[v+1]=WI[S[v+1]]),tI&&(S[v+2]=tI[S[v+2]]);J.putImageData(eI,0,Q*d)}}else throw new Error(`bad image kind: ${e.kind}`)}function I(J,e){if(e.bitmap){J.drawImage(e.bitmap,0,0);return}const w=e.height,x=e.width,E=w%d,P=(w-E)/d,iI=E===0?P:P+1,aI=J.createImageData(x,d);let eI=0;const A=e.data,W=aI.data;for(let L=0;L<iI;L++){const S=L<P?d:E;({srcPos:eI}=(0,z.applyMaskImageData)({src:A,srcPos:eI,dest:W,width:x,height:S})),J.putImageData(aI,0,L*d)}}function g(J,e){const w=["strokeStyle","fillStyle","fillRule","globalAlpha","lineWidth","lineCap","lineJoin","miterLimit","globalCompositeOperation","font"];for(let x=0,E=w.length;x<E;x++){const P=w[x];J[P]!==void 0&&(e[P]=J[P])}J.setLineDash!==void 0&&(e.setLineDash(J.getLineDash()),e.lineDashOffset=J.lineDashOffset)}function o(J,e){J.strokeStyle=J.fillStyle=e||"#000000",J.fillRule="nonzero",J.globalAlpha=1,J.lineWidth=1,J.lineCap="butt",J.lineJoin="miter",J.miterLimit=10,J.globalCompositeOperation="source-over",J.font="10px sans-serif",J.setLineDash!==void 0&&(J.setLineDash([]),J.lineDashOffset=0)}function X(J,e,w,x){const E=J.length;for(let P=3;P<E;P+=4){const iI=J[P];if(iI===0)J[P-3]=e,J[P-2]=w,J[P-1]=x;else if(iI<255){const aI=255-iI;J[P-3]=J[P-3]*iI+e*aI>>8,J[P-2]=J[P-2]*iI+w*aI>>8,J[P-1]=J[P-1]*iI+x*aI>>8}}}function b(J,e,w){const x=J.length,E=1/255;for(let P=3;P<x;P+=4){const iI=w?w[J[P]]:J[P];e[P]=e[P]*iI*E|0}}function N(J,e,w){const x=J.length;for(let E=3;E<x;E+=4){const P=J[E-3]*77+J[E-2]*152+J[E-1]*28;e[E]=w?e[E]*w[P>>8]>>8:e[E]*P>>16}}function F(J,e,w,x,E,P,iI,aI,eI,A,W){const L=!!P,S=L?P[0]:0,Q=L?P[1]:0,lI=L?P[2]:0;let uI;E==="Luminosity"?uI=N:uI=b;const ZI=Math.min(x,Math.ceil(1048576/w));for(let WI=0;WI<x;WI+=ZI){const tI=Math.min(ZI,x-WI),O=J.getImageData(aI-A,WI+(eI-W),w,tI),f=e.getImageData(aI,WI+eI,w,tI);L&&X(O.data,S,Q,lI),uI(O.data,f.data,iI),e.putImageData(f,aI,WI+eI)}}function hI(J,e,w,x){const E=x[0],P=x[1],iI=x[2]-E,aI=x[3]-P;iI===0||aI===0||(F(e.context,w,iI,aI,e.subtype,e.backdrop,e.transferMap,E,P,e.offsetX,e.offsetY),J.save(),J.globalAlpha=1,J.globalCompositeOperation="source-over",J.setTransform(1,0,0,1,0,0),J.drawImage(w.canvas,0,0),J.restore())}function YI(J,e){const w=M.Util.singularValueDecompose2dScale(J);w[0]=Math.fround(w[0]),w[1]=Math.fround(w[1]);const x=Math.fround((globalThis.devicePixelRatio||1)*h.PixelsPerInch.PDF_TO_CSS_UNITS);return e!==void 0?e:w[0]<=x||w[1]<=x}const nI=["butt","round","square"],gI=["miter","round","bevel"],U={},II={},BI=class{constructor(e,w,x,E,P,iI,aI,eI){zI(this,mI);this.ctx=e,this.current=new a(this.ctx.canvas.width,this.ctx.canvas.height),this.stateStack=[],this.pendingClip=null,this.pendingEOFill=!1,this.res=null,this.xobjs=null,this.commonObjs=w,this.objs=x,this.canvasFactory=E,this.imageLayer=P,this.groupStack=[],this.processingType3=null,this.baseTransform=null,this.baseTransformStack=[],this.groupLevel=0,this.smaskStack=[],this.smaskCounter=0,this.tempSMask=null,this.suspendedCtx=null,this.contentVisible=!0,this.markedContentStack=[],this.optionalContentConfig=iI,this.cachedCanvases=new l(this.canvasFactory),this.cachedPatterns=new Map,this.annotationCanvasMap=aI,this.viewportScale=1,this.outputScaleX=1,this.outputScaleY=1,this.backgroundColor=(eI==null?void 0:eI.background)||null,this.foregroundColor=(eI==null?void 0:eI.foreground)||null,this._cachedScaleForStroking=null,this._cachedGetSinglePixelWidth=null,this._cachedBitmapsMap=new Map}getObject(e,w=null){return typeof e=="string"?e.startsWith("g_")?this.commonObjs.get(e):this.objs.get(e):w}beginDrawing({transform:e,viewport:w,transparency:x=!1,background:E=null}){const P=this.ctx.canvas.width,iI=this.ctx.canvas.height,aI=E||"#ffffff";if(this.ctx.save(),this.foregroundColor&&this.backgroundColor){this.ctx.fillStyle=this.foregroundColor;const eI=this.foregroundColor=this.ctx.fillStyle;this.ctx.fillStyle=this.backgroundColor;const A=this.backgroundColor=this.ctx.fillStyle;let W=!0,L=aI;if(this.ctx.fillStyle=aI,L=this.ctx.fillStyle,W=typeof L=="string"&&/^#[0-9A-Fa-f]{6}$/.test(L),eI==="#000000"&&A==="#ffffff"||eI===A||!W)this.foregroundColor=this.backgroundColor=null;else{const[S,Q,lI]=(0,h.getRGB)(L),uI=ZI=>(ZI/=255,ZI<=.03928?ZI/12.92:((ZI+.055)/1.055)**2.4),MI=Math.round(.2126*uI(S)+.7152*uI(Q)+.0722*uI(lI));this.selectColor=(ZI,WI,tI)=>{const O=.2126*uI(ZI)+.7152*uI(WI)+.0722*uI(tI);return Math.round(O)===MI?A:eI}}}if(this.ctx.fillStyle=this.backgroundColor||aI,this.ctx.fillRect(0,0,P,iI),this.ctx.restore(),x){const eI=this.cachedCanvases.getCanvas("transparent",P,iI);this.compositeCtx=this.ctx,this.transparentCanvas=eI.canvas,this.ctx=eI.context,this.ctx.save(),this.ctx.transform(...(0,h.getCurrentTransform)(this.compositeCtx))}this.ctx.save(),o(this.ctx,this.foregroundColor),e&&(this.ctx.transform(...e),this.outputScaleX=e[0],this.outputScaleY=e[0]),this.ctx.transform(...w.transform),this.viewportScale=w.scale,this.baseTransform=(0,h.getCurrentTransform)(this.ctx),this.imageLayer&&((0,h.deprecated)("The `imageLayer` functionality will be removed in the future."),this.imageLayer.beginLayout())}executeOperatorList(e,w,x,E){const P=e.argsArray,iI=e.fnArray;let aI=w||0;const eI=P.length;if(eI===aI)return aI;const A=eI-aI>D&&typeof x=="function",W=A?Date.now()+j:0;let L=0;const S=this.commonObjs,Q=this.objs;let lI;for(;;){if(E!==void 0&&aI===E.nextBreakPoint)return E.breakIt(aI,x),aI;if(lI=iI[aI],lI!==M.OPS.dependency)this[lI].apply(this,P[aI]);else for(const uI of P[aI]){const MI=uI.startsWith("g_")?S:Q;if(!MI.has(uI))return MI.get(uI,x),aI}if(aI++,aI===eI)return aI;if(A&&++L>D){if(Date.now()>W)return x(),aI;L=0}}}endDrawing(){jI(this,mI,pg).call(this),this.cachedCanvases.clear(),this.cachedPatterns.clear();for(const e of this._cachedBitmapsMap.values()){for(const w of e.values())typeof HTMLCanvasElement<"u"&&w instanceof HTMLCanvasElement&&(w.width=w.height=0);e.clear()}this._cachedBitmapsMap.clear(),this.imageLayer&&this.imageLayer.endLayout()}_scaleImage(e,w){const x=e.width,E=e.height;let P=Math.max(Math.hypot(w[0],w[1]),1),iI=Math.max(Math.hypot(w[2],w[3]),1),aI=x,eI=E,A="prescale1",W,L;for(;P>2&&aI>1||iI>2&&eI>1;){let S=aI,Q=eI;P>2&&aI>1&&(S=Math.ceil(aI/2),P/=aI/S),iI>2&&eI>1&&(Q=Math.ceil(eI/2),iI/=eI/Q),W=this.cachedCanvases.getCanvas(A,S,Q),L=W.context,L.clearRect(0,0,S,Q),L.drawImage(e,0,0,aI,eI,0,0,S,Q),e=W.canvas,aI=S,eI=Q,A=A==="prescale1"?"prescale2":"prescale1"}return{img:e,paintWidth:aI,paintHeight:eI}}_createMaskCanvas(e){const w=this.ctx,{width:x,height:E}=e,P=this.current.fillColor,iI=this.current.patternFill,aI=(0,h.getCurrentTransform)(w);let eI,A,W,L;if((e.bitmap||e.data)&&e.count>1){const RI=e.bitmap||e.data.buffer,pI=aI.slice(0,4);A=JSON.stringify(iI?pI:[pI,P]),eI=this._cachedBitmapsMap.get(RI),eI||(eI=new Map,this._cachedBitmapsMap.set(RI,eI));const DI=eI.get(A);if(DI&&!iI){const FI=Math.round(Math.min(aI[0],aI[2])+aI[4]),TI=Math.round(Math.min(aI[1],aI[3])+aI[5]);return{canvas:DI,offsetX:FI,offsetY:TI}}W=DI}W||(L=this.cachedCanvases.getCanvas("maskCanvas",x,E),I(L.context,e));let S=M.Util.transform(aI,[1/x,0,0,-1/E,0,0]);S=M.Util.transform(S,[1,0,0,1,0,-E]);const Q=M.Util.applyTransform([0,0],S),lI=M.Util.applyTransform([x,E],S),uI=M.Util.normalizeRect([Q[0],Q[1],lI[0],lI[1]]),MI=Math.round(uI[2]-uI[0])||1,ZI=Math.round(uI[3]-uI[1])||1,WI=this.cachedCanvases.getCanvas("fillCanvas",MI,ZI),tI=WI.context,O=Math.min(Q[0],lI[0]),f=Math.min(Q[1],lI[1]);tI.translate(-O,-f),tI.transform(...S),W||(W=this._scaleImage(L.canvas,(0,h.getCurrentTransformInverse)(tI)),W=W.img,eI&&iI&&eI.set(A,W)),tI.imageSmoothingEnabled=YI((0,h.getCurrentTransform)(tI),e.interpolate),B(tI,W,0,0,W.width,W.height,0,0,x,E),tI.globalCompositeOperation="source-in";const v=M.Util.transform((0,h.getCurrentTransformInverse)(tI),[1,0,0,1,-O,-f]);return tI.fillStyle=iI?P.getPattern(w,this,v,_.PathType.FILL):P,tI.fillRect(0,0,x,E),eI&&!iI&&(this.cachedCanvases.delete("fillCanvas"),eI.set(A,WI.canvas)),{canvas:WI.canvas,offsetX:Math.round(O),offsetY:Math.round(f)}}setLineWidth(e){e!==this.current.lineWidth&&(this._cachedScaleForStroking=null),this.current.lineWidth=e,this.ctx.lineWidth=e}setLineCap(e){this.ctx.lineCap=nI[e]}setLineJoin(e){this.ctx.lineJoin=gI[e]}setMiterLimit(e){this.ctx.miterLimit=e}setDash(e,w){const x=this.ctx;x.setLineDash!==void 0&&(x.setLineDash(e),x.lineDashOffset=w)}setRenderingIntent(e){}setFlatness(e){}setGState(e){for(let w=0,x=e.length;w<x;w++){const E=e[w],P=E[0],iI=E[1];switch(P){case"LW":this.setLineWidth(iI);break;case"LC":this.setLineCap(iI);break;case"LJ":this.setLineJoin(iI);break;case"ML":this.setMiterLimit(iI);break;case"D":this.setDash(iI[0],iI[1]);break;case"RI":this.setRenderingIntent(iI);break;case"FL":this.setFlatness(iI);break;case"Font":this.setFont(iI[0],iI[1]);break;case"CA":this.current.strokeAlpha=E[1];break;case"ca":this.current.fillAlpha=E[1],this.ctx.globalAlpha=E[1];break;case"BM":this.ctx.globalCompositeOperation=iI;break;case"SMask":this.current.activeSMask=iI?this.tempSMask:null,this.tempSMask=null,this.checkSMaskState();break;case"TR":this.current.transferMaps=iI}}}get inSMaskMode(){return!!this.suspendedCtx}checkSMaskState(){const e=this.inSMaskMode;this.current.activeSMask&&!e?this.beginSMaskMode():!this.current.activeSMask&&e&&this.endSMaskMode()}beginSMaskMode(){if(this.inSMaskMode)throw new Error("beginSMaskMode called while already in smask mode");const e=this.ctx.canvas.width,w=this.ctx.canvas.height,x="smaskGroupAt"+this.groupLevel,E=this.cachedCanvases.getCanvas(x,e,w);this.suspendedCtx=this.ctx,this.ctx=E.context;const P=this.ctx;P.setTransform(...(0,h.getCurrentTransform)(this.suspendedCtx)),g(this.suspendedCtx,P),C(P,this.suspendedCtx),this.setGState([["BM","source-over"],["ca",1],["CA",1]])}endSMaskMode(){if(!this.inSMaskMode)throw new Error("endSMaskMode called while not in smask mode");this.ctx._removeMirroring(),g(this.ctx,this.suspendedCtx),this.ctx=this.suspendedCtx,this.suspendedCtx=null}compose(e){if(!this.current.activeSMask)return;e?(e[0]=Math.floor(e[0]),e[1]=Math.floor(e[1]),e[2]=Math.ceil(e[2]),e[3]=Math.ceil(e[3])):e=[0,0,this.ctx.canvas.width,this.ctx.canvas.height];const w=this.current.activeSMask,x=this.suspendedCtx;hI(x,w,this.ctx,e),this.ctx.save(),this.ctx.setTransform(1,0,0,1,0,0),this.ctx.clearRect(0,0,this.ctx.canvas.width,this.ctx.canvas.height),this.ctx.restore()}save(){this.inSMaskMode?(g(this.ctx,this.suspendedCtx),this.suspendedCtx.save()):this.ctx.save();const e=this.current;this.stateStack.push(e),this.current=e.clone()}restore(){this.stateStack.length===0&&this.inSMaskMode&&this.endSMaskMode(),this.stateStack.length!==0&&(this.current=this.stateStack.pop(),this.inSMaskMode?(this.suspendedCtx.restore(),g(this.suspendedCtx,this.ctx)):this.ctx.restore(),this.checkSMaskState(),this.pendingClip=null,this._cachedScaleForStroking=null,this._cachedGetSinglePixelWidth=null)}transform(e,w,x,E,P,iI){this.ctx.transform(e,w,x,E,P,iI),this._cachedScaleForStroking=null,this._cachedGetSinglePixelWidth=null}constructPath(e,w,x){const E=this.ctx,P=this.current;let iI=P.x,aI=P.y,eI,A;const W=(0,h.getCurrentTransform)(E),L=W[0]===0&&W[3]===0||W[1]===0&&W[2]===0,S=L?x.slice(0):null;for(let Q=0,lI=0,uI=e.length;Q<uI;Q++)switch(e[Q]|0){case M.OPS.rectangle:iI=w[lI++],aI=w[lI++];const MI=w[lI++],ZI=w[lI++],WI=iI+MI,tI=aI+ZI;E.moveTo(iI,aI),MI===0||ZI===0?E.lineTo(WI,tI):(E.lineTo(WI,aI),E.lineTo(WI,tI),E.lineTo(iI,tI)),L||P.updateRectMinMax(W,[iI,aI,WI,tI]),E.closePath();break;case M.OPS.moveTo:iI=w[lI++],aI=w[lI++],E.moveTo(iI,aI),L||P.updatePathMinMax(W,iI,aI);break;case M.OPS.lineTo:iI=w[lI++],aI=w[lI++],E.lineTo(iI,aI),L||P.updatePathMinMax(W,iI,aI);break;case M.OPS.curveTo:eI=iI,A=aI,iI=w[lI+4],aI=w[lI+5],E.bezierCurveTo(w[lI],w[lI+1],w[lI+2],w[lI+3],iI,aI),P.updateCurvePathMinMax(W,eI,A,w[lI],w[lI+1],w[lI+2],w[lI+3],iI,aI,S),lI+=6;break;case M.OPS.curveTo2:eI=iI,A=aI,E.bezierCurveTo(iI,aI,w[lI],w[lI+1],w[lI+2],w[lI+3]),P.updateCurvePathMinMax(W,eI,A,iI,aI,w[lI],w[lI+1],w[lI+2],w[lI+3],S),iI=w[lI+2],aI=w[lI+3],lI+=4;break;case M.OPS.curveTo3:eI=iI,A=aI,iI=w[lI+2],aI=w[lI+3],E.bezierCurveTo(w[lI],w[lI+1],iI,aI,iI,aI),P.updateCurvePathMinMax(W,eI,A,w[lI],w[lI+1],iI,aI,iI,aI,S),lI+=4;break;case M.OPS.closePath:E.closePath();break}L&&P.updateScalingPathMinMax(W,S),P.setCurrentPoint(iI,aI)}closePath(){this.ctx.closePath()}stroke(e){e=typeof e<"u"?e:!0;const w=this.ctx,x=this.current.strokeColor;w.globalAlpha=this.current.strokeAlpha,this.contentVisible&&(typeof x=="object"&&(x!=null&&x.getPattern)?(w.save(),w.strokeStyle=x.getPattern(w,this,(0,h.getCurrentTransformInverse)(w),_.PathType.STROKE),this.rescaleAndStroke(!1),w.restore()):this.rescaleAndStroke(!0)),e&&this.consumePath(this.current.getClippedPathBoundingBox()),w.globalAlpha=this.current.fillAlpha}closeStroke(){this.closePath(),this.stroke()}fill(e){e=typeof e<"u"?e:!0;const w=this.ctx,x=this.current.fillColor,E=this.current.patternFill;let P=!1;E&&(w.save(),w.fillStyle=x.getPattern(w,this,(0,h.getCurrentTransformInverse)(w),_.PathType.FILL),P=!0);const iI=this.current.getClippedPathBoundingBox();this.contentVisible&&iI!==null&&(this.pendingEOFill?(w.fill("evenodd"),this.pendingEOFill=!1):w.fill()),P&&w.restore(),e&&this.consumePath(iI)}eoFill(){this.pendingEOFill=!0,this.fill()}fillStroke(){this.fill(!1),this.stroke(!1),this.consumePath()}eoFillStroke(){this.pendingEOFill=!0,this.fillStroke()}closeFillStroke(){this.closePath(),this.fillStroke()}closeEOFillStroke(){this.pendingEOFill=!0,this.closePath(),this.fillStroke()}endPath(){this.consumePath()}clip(){this.pendingClip=U}eoClip(){this.pendingClip=II}beginText(){this.current.textMatrix=M.IDENTITY_MATRIX,this.current.textMatrixScale=1,this.current.x=this.current.lineX=0,this.current.y=this.current.lineY=0}endText(){const e=this.pendingTextPaths,w=this.ctx;if(e===void 0){w.beginPath();return}w.save(),w.beginPath();for(const x of e)w.setTransform(...x.transform),w.translate(x.x,x.y),x.addToPath(w,x.fontSize);w.restore(),w.clip(),w.beginPath(),delete this.pendingTextPaths}setCharSpacing(e){this.current.charSpacing=e}setWordSpacing(e){this.current.wordSpacing=e}setHScale(e){this.current.textHScale=e/100}setLeading(e){this.current.leading=-e}setFont(e,w){const x=this.commonObjs.get(e),E=this.current;if(!x)throw new Error(`Can't find font for ${e}`);if(E.fontMatrix=x.fontMatrix||M.FONT_IDENTITY_MATRIX,(E.fontMatrix[0]===0||E.fontMatrix[3]===0)&&(0,M.warn)("Invalid font matrix for font "+e),w<0?(w=-w,E.fontDirection=-1):E.fontDirection=1,this.current.font=x,this.current.fontSize=w,x.isType3Font)return;const P=x.loadedName||"sans-serif";let iI="normal";x.black?iI="900":x.bold&&(iI="bold");const aI=x.italic?"italic":"normal",eI=`"${P}", ${x.fallbackName}`;let A=w;w<r?A=r:w>Z&&(A=Z),this.current.fontSizeScale=w/A,this.ctx.font=`${aI} ${iI} ${A}px ${eI}`}setTextRenderingMode(e){this.current.textRenderingMode=e}setTextRise(e){this.current.textRise=e}moveText(e,w){this.current.x=this.current.lineX+=e,this.current.y=this.current.lineY+=w}setLeadingMoveText(e,w){this.setLeading(-w),this.moveText(e,w)}setTextMatrix(e,w,x,E,P,iI){this.current.textMatrix=[e,w,x,E,P,iI],this.current.textMatrixScale=Math.hypot(e,w),this.current.x=this.current.lineX=0,this.current.y=this.current.lineY=0}nextLine(){this.moveText(0,this.current.leading)}paintChar(e,w,x,E){const P=this.ctx,iI=this.current,aI=iI.font,eI=iI.textRenderingMode,A=iI.fontSize/iI.fontSizeScale,W=eI&M.TextRenderingMode.FILL_STROKE_MASK,L=!!(eI&M.TextRenderingMode.ADD_TO_PATH_FLAG),S=iI.patternFill&&!aI.missingFile;let Q;(aI.disableFontFace||L||S)&&(Q=aI.getPathGenerator(this.commonObjs,e)),aI.disableFontFace||S?(P.save(),P.translate(w,x),P.beginPath(),Q(P,A),E&&P.setTransform(...E),(W===M.TextRenderingMode.FILL||W===M.TextRenderingMode.FILL_STROKE)&&P.fill(),(W===M.TextRenderingMode.STROKE||W===M.TextRenderingMode.FILL_STROKE)&&P.stroke(),P.restore()):((W===M.TextRenderingMode.FILL||W===M.TextRenderingMode.FILL_STROKE)&&P.fillText(e,w,x),(W===M.TextRenderingMode.STROKE||W===M.TextRenderingMode.FILL_STROKE)&&P.strokeText(e,w,x)),L&&(this.pendingTextPaths||(this.pendingTextPaths=[])).push({transform:(0,h.getCurrentTransform)(P),x:w,y:x,fontSize:A,addToPath:Q})}get isFontSubpixelAAEnabled(){const{context:e}=this.cachedCanvases.getCanvas("isFontSubpixelAAEnabled",10,10);e.scale(1.5,1),e.fillText("I",0,10);const w=e.getImageData(0,0,10,10).data;let x=!1;for(let E=3;E<w.length;E+=4)if(w[E]>0&&w[E]<255){x=!0;break}return(0,M.shadow)(this,"isFontSubpixelAAEnabled",x)}showText(e){const w=this.current,x=w.font;if(x.isType3Font)return this.showType3Text(e);const E=w.fontSize;if(E===0)return;const P=this.ctx,iI=w.fontSizeScale,aI=w.charSpacing,eI=w.wordSpacing,A=w.fontDirection,W=w.textHScale*A,L=e.length,S=x.vertical,Q=S?1:-1,lI=x.defaultVMetrics,uI=E*w.fontMatrix[0],MI=w.textRenderingMode===M.TextRenderingMode.FILL&&!x.disableFontFace&&!w.patternFill;P.save(),P.transform(...w.textMatrix),P.translate(w.x,w.y+w.textRise),A>0?P.scale(W,-1):P.scale(W,1);let ZI;if(w.patternFill){P.save();const v=w.fillColor.getPattern(P,this,(0,h.getCurrentTransformInverse)(P),_.PathType.FILL);ZI=(0,h.getCurrentTransform)(P),P.restore(),P.fillStyle=v}let WI=w.lineWidth;const tI=w.textMatrixScale;if(tI===0||WI===0){const v=w.textRenderingMode&M.TextRenderingMode.FILL_STROKE_MASK;(v===M.TextRenderingMode.STROKE||v===M.TextRenderingMode.FILL_STROKE)&&(WI=this.getSinglePixelWidth())}else WI/=tI;iI!==1&&(P.scale(iI,iI),WI/=iI),P.lineWidth=WI;let O=0,f;for(f=0;f<L;++f){const v=e[f];if(typeof v=="number"){O+=Q*v*E/1e3;continue}let RI=!1;const pI=(v.isSpace?eI:0)+aI,DI=v.fontChar,FI=v.accent;let TI,vI,fI=v.width;if(S){const EI=v.vmetric||lI,SI=-(v.vmetric?EI[1]:fI*.5)*uI,JI=EI[2]*uI;fI=EI?-EI[0]:fI,TI=SI/iI,vI=(O+JI)/iI}else TI=O/iI,vI=0;if(x.remeasure&&fI>0){const EI=P.measureText(DI).width*1e3/E*iI;if(fI<EI&&this.isFontSubpixelAAEnabled){const SI=fI/EI;RI=!0,P.save(),P.scale(SI,1),TI/=SI}else fI!==EI&&(TI+=(fI-EI)/2e3*E/iI)}if(this.contentVisible&&(v.isInFont||x.missingFile)){if(MI&&!FI)P.fillText(DI,TI,vI);else if(this.paintChar(DI,TI,vI,ZI),FI){const EI=TI+E*FI.offset.x/iI,SI=vI-E*FI.offset.y/iI;this.paintChar(FI.fontChar,EI,SI,ZI)}}let PI;S?PI=fI*uI-pI*A:PI=fI*uI+pI*A,O+=PI,RI&&P.restore()}S?w.y-=O:w.x+=O*W,P.restore(),this.compose()}showType3Text(e){const w=this.ctx,x=this.current,E=x.font,P=x.fontSize,iI=x.fontDirection,aI=E.vertical?1:-1,eI=x.charSpacing,A=x.wordSpacing,W=x.textHScale*iI,L=x.fontMatrix||M.FONT_IDENTITY_MATRIX,S=e.length,Q=x.textRenderingMode===M.TextRenderingMode.INVISIBLE;let lI,uI,MI,ZI;if(!(Q||P===0)){for(this._cachedScaleForStroking=null,this._cachedGetSinglePixelWidth=null,w.save(),w.transform(...x.textMatrix),w.translate(x.x,x.y),w.scale(W,iI),lI=0;lI<S;++lI){if(uI=e[lI],typeof uI=="number"){ZI=aI*uI*P/1e3,this.ctx.translate(ZI,0),x.x+=ZI*W;continue}const WI=(uI.isSpace?A:0)+eI,tI=E.charProcOperatorList[uI.operatorListId];if(!tI){(0,M.warn)(`Type3 character "${uI.operatorListId}" is not available.`);continue}this.contentVisible&&(this.processingType3=uI,this.save(),w.scale(P,P),w.transform(...L),this.executeOperatorList(tI),this.restore()),MI=M.Util.applyTransform([uI.width,0],L)[0]*P+WI,w.translate(MI,0),x.x+=MI*W}w.restore(),this.processingType3=null}}setCharWidth(e,w){}setCharWidthAndBounds(e,w,x,E,P,iI){this.ctx.rect(x,E,P-x,iI-E),this.ctx.clip(),this.endPath()}getColorN_Pattern(e){let w;if(e[0]==="TilingPattern"){const x=e[1],E=this.baseTransform||(0,h.getCurrentTransform)(this.ctx),P={createCanvasGraphics:iI=>new BI(iI,this.commonObjs,this.objs,this.canvasFactory)};w=new _.TilingPattern(e,x,this.ctx,P,E)}else w=this._getPattern(e[1],e[2]);return w}setStrokeColorN(){this.current.strokeColor=this.getColorN_Pattern(arguments)}setFillColorN(){this.current.fillColor=this.getColorN_Pattern(arguments),this.current.patternFill=!0}setStrokeRGBColor(e,w,x){var P;const E=((P=this.selectColor)==null?void 0:P.call(this,e,w,x))||M.Util.makeHexColor(e,w,x);this.ctx.strokeStyle=E,this.current.strokeColor=E}setFillRGBColor(e,w,x){var P;const E=((P=this.selectColor)==null?void 0:P.call(this,e,w,x))||M.Util.makeHexColor(e,w,x);this.ctx.fillStyle=E,this.current.fillColor=E,this.current.patternFill=!1}_getPattern(e,w=null){let x;return this.cachedPatterns.has(e)?x=this.cachedPatterns.get(e):(x=(0,_.getShadingPattern)(this.objs.get(e)),this.cachedPatterns.set(e,x)),w&&(x.matrix=w),x}shadingFill(e){if(!this.contentVisible)return;const w=this.ctx;this.save();const x=this._getPattern(e);w.fillStyle=x.getPattern(w,this,(0,h.getCurrentTransformInverse)(w),_.PathType.SHADING);const E=(0,h.getCurrentTransformInverse)(w);if(E){const P=w.canvas,iI=P.width,aI=P.height,eI=M.Util.applyTransform([0,0],E),A=M.Util.applyTransform([0,aI],E),W=M.Util.applyTransform([iI,0],E),L=M.Util.applyTransform([iI,aI],E),S=Math.min(eI[0],A[0],W[0],L[0]),Q=Math.min(eI[1],A[1],W[1],L[1]),lI=Math.max(eI[0],A[0],W[0],L[0]),uI=Math.max(eI[1],A[1],W[1],L[1]);this.ctx.fillRect(S,Q,lI-S,uI-Q)}else this.ctx.fillRect(-1e10,-1e10,2e10,2e10);this.compose(this.current.getClippedPathBoundingBox()),this.restore()}beginInlineImage(){(0,M.unreachable)("Should not call beginInlineImage")}beginImageData(){(0,M.unreachable)("Should not call beginImageData")}paintFormXObjectBegin(e,w){if(this.contentVisible&&(this.save(),this.baseTransformStack.push(this.baseTransform),Array.isArray(e)&&e.length===6&&this.transform(...e),this.baseTransform=(0,h.getCurrentTransform)(this.ctx),w)){const x=w[2]-w[0],E=w[3]-w[1];this.ctx.rect(w[0],w[1],x,E),this.current.updateRectMinMax((0,h.getCurrentTransform)(this.ctx),w),this.clip(),this.endPath()}}paintFormXObjectEnd(){this.contentVisible&&(this.restore(),this.baseTransform=this.baseTransformStack.pop())}beginGroup(e){if(!this.contentVisible)return;this.save(),this.inSMaskMode&&(this.endSMaskMode(),this.current.activeSMask=null);const w=this.ctx;e.isolated||(0,M.info)("TODO: Support non-isolated groups."),e.knockout&&(0,M.warn)("Knockout groups not supported.");const x=(0,h.getCurrentTransform)(w);if(e.matrix&&w.transform(...e.matrix),!e.bbox)throw new Error("Bounding box is required.");let E=M.Util.getAxialAlignedBoundingBox(e.bbox,(0,h.getCurrentTransform)(w));const P=[0,0,w.canvas.width,w.canvas.height];E=M.Util.intersect(E,P)||[0,0,0,0];const iI=Math.floor(E[0]),aI=Math.floor(E[1]);let eI=Math.max(Math.ceil(E[2])-iI,1),A=Math.max(Math.ceil(E[3])-aI,1),W=1,L=1;eI>p&&(W=eI/p,eI=p),A>p&&(L=A/p,A=p),this.current.startNewPathAndClipBox([0,0,eI,A]);let S="groupAt"+this.groupLevel;e.smask&&(S+="_smask_"+this.smaskCounter++%2);const Q=this.cachedCanvases.getCanvas(S,eI,A),lI=Q.context;lI.scale(1/W,1/L),lI.translate(-iI,-aI),lI.transform(...x),e.smask?this.smaskStack.push({canvas:Q.canvas,context:lI,offsetX:iI,offsetY:aI,scaleX:W,scaleY:L,subtype:e.smask.subtype,backdrop:e.smask.backdrop,transferMap:e.smask.transferMap||null,startTransformInverse:null}):(w.setTransform(1,0,0,1,0,0),w.translate(iI,aI),w.scale(W,L),w.save()),g(w,lI),this.ctx=lI,this.setGState([["BM","source-over"],["ca",1],["CA",1]]),this.groupStack.push(w),this.groupLevel++}endGroup(e){if(!this.contentVisible)return;this.groupLevel--;const w=this.ctx,x=this.groupStack.pop();if(this.ctx=x,this.ctx.imageSmoothingEnabled=!1,e.smask)this.tempSMask=this.smaskStack.pop(),this.restore();else{this.ctx.restore();const E=(0,h.getCurrentTransform)(this.ctx);this.restore(),this.ctx.save(),this.ctx.setTransform(...E);const P=M.Util.getAxialAlignedBoundingBox([0,0,w.canvas.width,w.canvas.height],E);this.ctx.drawImage(w.canvas,0,0),this.ctx.restore(),this.compose(P)}}beginAnnotation(e,w,x,E,P){if(jI(this,mI,pg).call(this),o(this.ctx,this.foregroundColor),this.ctx.save(),this.save(),this.baseTransform&&this.ctx.setTransform(...this.baseTransform),Array.isArray(w)&&w.length===4){const iI=w[2]-w[0],aI=w[3]-w[1];if(P&&this.annotationCanvasMap){x=x.slice(),x[4]-=w[0],x[5]-=w[1],w=w.slice(),w[0]=w[1]=0,w[2]=iI,w[3]=aI;const[eI,A]=M.Util.singularValueDecompose2dScale((0,h.getCurrentTransform)(this.ctx)),{viewportScale:W}=this,L=Math.ceil(iI*this.outputScaleX*W),S=Math.ceil(aI*this.outputScaleY*W);this.annotationCanvas=this.canvasFactory.create(L,S);const{canvas:Q,context:lI}=this.annotationCanvas;this.annotationCanvasMap.set(e,Q),this.annotationCanvas.savedCtx=this.ctx,this.ctx=lI,this.ctx.setTransform(eI,0,0,-A,0,aI*A),o(this.ctx,this.foregroundColor)}else o(this.ctx,this.foregroundColor),this.ctx.rect(w[0],w[1],iI,aI),this.ctx.clip(),this.endPath()}this.current=new a(this.ctx.canvas.width,this.ctx.canvas.height),this.transform(...x),this.transform(...E)}endAnnotation(){this.annotationCanvas&&(this.ctx=this.annotationCanvas.savedCtx,delete this.annotationCanvas.savedCtx,delete this.annotationCanvas)}paintImageMaskXObject(e){if(!this.contentVisible)return;const w=e.count;e=this.getObject(e.data,e),e.count=w;const x=this.ctx,E=this.processingType3;if(E&&(E.compiled===void 0&&(E.compiled=Y(e)),E.compiled)){E.compiled(x);return}const P=this._createMaskCanvas(e),iI=P.canvas;x.save(),x.setTransform(1,0,0,1,0,0),x.drawImage(iI,P.offsetX,P.offsetY),x.restore(),this.compose()}paintImageMaskXObjectRepeat(e,w,x=0,E=0,P,iI){if(!this.contentVisible)return;e=this.getObject(e.data,e);const aI=this.ctx;aI.save();const eI=(0,h.getCurrentTransform)(aI);aI.transform(w,x,E,P,0,0);const A=this._createMaskCanvas(e);aI.setTransform(1,0,0,1,0,0);for(let W=0,L=iI.length;W<L;W+=2){const S=M.Util.transform(eI,[w,x,E,P,iI[W],iI[W+1]]),[Q,lI]=M.Util.applyTransform([0,0],S);aI.drawImage(A.canvas,Q,lI)}aI.restore(),this.compose()}paintImageMaskXObjectGroup(e){if(!this.contentVisible)return;const w=this.ctx,x=this.current.fillColor,E=this.current.patternFill;for(const P of e){const{data:iI,width:aI,height:eI,transform:A}=P,W=this.cachedCanvases.getCanvas("maskCanvas",aI,eI),L=W.context;L.save();const S=this.getObject(iI,P);I(L,S),L.globalCompositeOperation="source-in",L.fillStyle=E?x.getPattern(L,this,(0,h.getCurrentTransformInverse)(w),_.PathType.FILL):x,L.fillRect(0,0,aI,eI),L.restore(),w.save(),w.transform(...A),w.scale(1,-1),B(w,W.canvas,0,0,aI,eI,0,-1,1,1),w.restore()}this.compose()}paintImageXObject(e){if(!this.contentVisible)return;const w=this.getObject(e);if(!w){(0,M.warn)("Dependent image isn't ready yet");return}this.paintInlineImageXObject(w)}paintImageXObjectRepeat(e,w,x,E){if(!this.contentVisible)return;const P=this.getObject(e);if(!P){(0,M.warn)("Dependent image isn't ready yet");return}const iI=P.width,aI=P.height,eI=[];for(let A=0,W=E.length;A<W;A+=2)eI.push({transform:[w,0,0,x,E[A],E[A+1]],x:0,y:0,w:iI,h:aI});this.paintInlineImageXObjectGroup(P,eI)}paintInlineImageXObject(e){if(!this.contentVisible)return;const w=e.width,x=e.height,E=this.ctx;this.save(),E.scale(1/w,-1/x);let P;if(typeof HTMLElement=="function"&&e instanceof HTMLElement||!e.data)P=e;else{const A=this.cachedCanvases.getCanvas("inlineImage",w,x),W=A.context;i(W,e,this.current.transferMaps),P=A.canvas}const iI=this._scaleImage(P,(0,h.getCurrentTransformInverse)(E));E.imageSmoothingEnabled=YI((0,h.getCurrentTransform)(E),e.interpolate);const[aI,eI]=B(E,iI.img,0,0,iI.paintWidth,iI.paintHeight,0,-x,w,x);if(this.imageLayer){const[A,W]=M.Util.applyTransform([0,-x],(0,h.getCurrentTransform)(this.ctx));this.imageLayer.appendImage({imgData:e,left:A,top:W,width:aI,height:eI})}this.compose(),this.restore()}paintInlineImageXObjectGroup(e,w){if(!this.contentVisible)return;const x=this.ctx,E=e.width,P=e.height,iI=this.cachedCanvases.getCanvas("inlineImage",E,P),aI=iI.context;i(aI,e,this.current.transferMaps);for(const eI of w){if(x.save(),x.transform(...eI.transform),x.scale(1,-1),B(x,iI.canvas,eI.x,eI.y,eI.w,eI.h,0,-1,1,1),this.imageLayer){const[A,W]=M.Util.applyTransform([eI.x,eI.y],(0,h.getCurrentTransform)(this.ctx));this.imageLayer.appendImage({imgData:e,left:A,top:W,width:E,height:P})}x.restore()}this.compose()}paintSolidColorImageMask(){this.contentVisible&&(this.ctx.fillRect(0,0,1,1),this.compose())}markPoint(e){}markPointProps(e,w){}beginMarkedContent(e){this.markedContentStack.push({visible:!0})}beginMarkedContentProps(e,w){e==="OC"?this.markedContentStack.push({visible:this.optionalContentConfig.isVisible(w)}):this.markedContentStack.push({visible:!0}),this.contentVisible=this.isContentVisible()}endMarkedContent(){this.markedContentStack.pop(),this.contentVisible=this.isContentVisible()}beginCompat(){}endCompat(){}consumePath(e){const w=this.current.isEmptyClip();this.pendingClip&&this.current.updateClipFromPath(),this.pendingClip||this.compose(e);const x=this.ctx;this.pendingClip&&(w||(this.pendingClip===II?x.clip("evenodd"):x.clip()),this.pendingClip=null),this.current.startNewPathAndClipBox(this.current.clipBox),x.beginPath()}getSinglePixelWidth(){if(!this._cachedGetSinglePixelWidth){const e=(0,h.getCurrentTransform)(this.ctx);if(e[1]===0&&e[2]===0)this._cachedGetSinglePixelWidth=1/Math.min(Math.abs(e[0]),Math.abs(e[3]));else{const w=Math.abs(e[0]*e[3]-e[2]*e[1]),x=Math.hypot(e[0],e[2]),E=Math.hypot(e[1],e[3]);this._cachedGetSinglePixelWidth=Math.max(x,E)/w}}return this._cachedGetSinglePixelWidth}getScaleForStroking(){if(!this._cachedScaleForStroking){const{lineWidth:e}=this.current,w=(0,h.getCurrentTransform)(this.ctx);let x,E;if(w[1]===0&&w[2]===0){const P=Math.abs(w[0]),iI=Math.abs(w[3]);if(e===0)x=1/P,E=1/iI;else{const aI=P*e,eI=iI*e;x=aI<1?1/aI:1,E=eI<1?1/eI:1}}else{const P=Math.abs(w[0]*w[3]-w[2]*w[1]),iI=Math.hypot(w[0],w[1]),aI=Math.hypot(w[2],w[3]);if(e===0)x=aI/P,E=iI/P;else{const eI=e*P;x=aI>eI?aI/eI:1,E=iI>eI?iI/eI:1}}this._cachedScaleForStroking=[x,E]}return this._cachedScaleForStroking}rescaleAndStroke(e){const{ctx:w}=this,{lineWidth:x}=this.current,[E,P]=this.getScaleForStroking();if(w.lineWidth=x||1,E===1&&P===1){w.stroke();return}let iI,aI,eI;e&&(iI=(0,h.getCurrentTransform)(w),aI=w.getLineDash().slice(),eI=w.lineDashOffset),w.scale(E,P);const A=Math.max(E,P);w.setLineDash(w.getLineDash().map(W=>W/A)),w.lineDashOffset/=A,w.stroke(),e&&(w.setTransform(...iI),w.setLineDash(aI),w.lineDashOffset=eI)}isContentVisible(){for(let e=this.markedContentStack.length-1;e>=0;e--)if(!this.markedContentStack[e].visible)return!1;return!0}};let q=BI;mI=new WeakSet,pg=function(){for(;this.stateStack.length||this.inSMaskMode;)this.restore();this.ctx.restore(),this.transparentCanvas&&(this.ctx=this.compositeCtx,this.ctx.save(),this.ctx.setTransform(1,0,0,1,0,0),this.ctx.drawImage(this.transparentCanvas,0,0),this.ctx.restore(),this.transparentCanvas=null)},c.CanvasGraphics=q;for(const J in M.OPS)q.prototype[J]!==void 0&&(q.prototype[M.OPS[J]]=q.prototype[J])},(wI,c,$)=>{Object.defineProperty(c,"__esModule",{value:!0}),c.TilingPattern=c.PathType=void 0,c.getShadingPattern=d;var h=$(1),M=$(8),_=$(3);const z={FILL:"Fill",STROKE:"Stroke",SHADING:"Shading"};c.PathType=z;function T(B,Y){if(!Y||_.isNodeJS)return;const a=Y[2]-Y[0],i=Y[3]-Y[1],I=new Path2D;I.rect(Y[0],Y[1],a,i),B.clip(I)}class r{constructor(){this.constructor===r&&(0,h.unreachable)("Cannot initialize BaseShadingPattern.")}getPattern(){(0,h.unreachable)("Abstract method `getPattern` called.")}}class Z extends r{constructor(Y){super(),this._type=Y[1],this._bbox=Y[2],this._colorStops=Y[3],this._p0=Y[4],this._p1=Y[5],this._r0=Y[6],this._r1=Y[7],this.matrix=null}_createGradient(Y){let a;this._type==="axial"?a=Y.createLinearGradient(this._p0[0],this._p0[1],this._p1[0],this._p1[1]):this._type==="radial"&&(a=Y.createRadialGradient(this._p0[0],this._p0[1],this._r0,this._p1[0],this._p1[1],this._r1));for(const i of this._colorStops)a.addColorStop(i[0],i[1]);return a}getPattern(Y,a,i,I){let g;if(I===z.STROKE||I===z.FILL){const o=a.current.getClippedPathBoundingBox(I,(0,M.getCurrentTransform)(Y))||[0,0,0,0],X=Math.ceil(o[2]-o[0])||1,b=Math.ceil(o[3]-o[1])||1,N=a.cachedCanvases.getCanvas("pattern",X,b,!0),F=N.context;F.clearRect(0,0,F.canvas.width,F.canvas.height),F.beginPath(),F.rect(0,0,F.canvas.width,F.canvas.height),F.translate(-o[0],-o[1]),i=h.Util.transform(i,[1,0,0,1,o[0],o[1]]),F.transform(...a.baseTransform),this.matrix&&F.transform(...this.matrix),T(F,this._bbox),F.fillStyle=this._createGradient(F),F.fill(),g=Y.createPattern(N.canvas,"no-repeat");const hI=new DOMMatrix(i);try{g.setTransform(hI)}catch(YI){(0,h.warn)(`RadialAxialShadingPattern.getPattern: "${YI==null?void 0:YI.message}".`)}}else T(Y,this._bbox),g=this._createGradient(Y);return g}}function p(B,Y,a,i,I,g,o,X){const b=Y.coords,N=Y.colors,F=B.data,hI=B.width*4;let YI;b[a+1]>b[i+1]&&(YI=a,a=i,i=YI,YI=g,g=o,o=YI),b[i+1]>b[I+1]&&(YI=i,i=I,I=YI,YI=o,o=X,X=YI),b[a+1]>b[i+1]&&(YI=a,a=i,i=YI,YI=g,g=o,o=YI);const nI=(b[a]+Y.offsetX)*Y.scaleX,gI=(b[a+1]+Y.offsetY)*Y.scaleY,U=(b[i]+Y.offsetX)*Y.scaleX,II=(b[i+1]+Y.offsetY)*Y.scaleY,q=(b[I]+Y.offsetX)*Y.scaleX,mI=(b[I+1]+Y.offsetY)*Y.scaleY;if(gI>=mI)return;const NI=N[g],BI=N[g+1],J=N[g+2],e=N[o],w=N[o+1],x=N[o+2],E=N[X],P=N[X+1],iI=N[X+2],aI=Math.round(gI),eI=Math.round(mI);let A,W,L,S,Q,lI,uI,MI;for(let ZI=aI;ZI<=eI;ZI++){if(ZI<II){let v;ZI<gI?v=0:v=(gI-ZI)/(gI-II),A=nI-(nI-U)*v,W=NI-(NI-e)*v,L=BI-(BI-w)*v,S=J-(J-x)*v}else{let v;ZI>mI?v=1:II===mI?v=0:v=(II-ZI)/(II-mI),A=U-(U-q)*v,W=e-(e-E)*v,L=w-(w-P)*v,S=x-(x-iI)*v}let WI;ZI<gI?WI=0:ZI>mI?WI=1:WI=(gI-ZI)/(gI-mI),Q=nI-(nI-q)*WI,lI=NI-(NI-E)*WI,uI=BI-(BI-P)*WI,MI=J-(J-iI)*WI;const tI=Math.round(Math.min(A,Q)),O=Math.round(Math.max(A,Q));let f=hI*ZI+tI*4;for(let v=tI;v<=O;v++)WI=(A-v)/(A-Q),WI<0?WI=0:WI>1&&(WI=1),F[f++]=W-(W-lI)*WI|0,F[f++]=L-(L-uI)*WI|0,F[f++]=S-(S-MI)*WI|0,F[f++]=255}}function j(B,Y,a){const i=Y.coords,I=Y.colors;let g,o;switch(Y.type){case"lattice":const X=Y.verticesPerRow,b=Math.floor(i.length/X)-1,N=X-1;for(g=0;g<b;g++){let F=g*X;for(let hI=0;hI<N;hI++,F++)p(B,a,i[F],i[F+1],i[F+X],I[F],I[F+1],I[F+X]),p(B,a,i[F+X+1],i[F+1],i[F+X],I[F+X+1],I[F+1],I[F+X])}break;case"triangles":for(g=0,o=i.length;g<o;g+=3)p(B,a,i[g],i[g+1],i[g+2],I[g],I[g+1],I[g+2]);break;default:throw new Error("illegal figure")}}class D extends r{constructor(Y){super(),this._coords=Y[2],this._colors=Y[3],this._figures=Y[4],this._bounds=Y[5],this._bbox=Y[7],this._background=Y[8],this.matrix=null}_createMeshCanvas(Y,a,i){const X=Math.floor(this._bounds[0]),b=Math.floor(this._bounds[1]),N=Math.ceil(this._bounds[2])-X,F=Math.ceil(this._bounds[3])-b,hI=Math.min(Math.ceil(Math.abs(N*Y[0]*1.1)),3e3),YI=Math.min(Math.ceil(Math.abs(F*Y[1]*1.1)),3e3),nI=N/hI,gI=F/YI,U={coords:this._coords,colors:this._colors,offsetX:-X,offsetY:-b,scaleX:1/nI,scaleY:1/gI},II=hI+2*2,q=YI+2*2,mI=i.getCanvas("mesh",II,q,!1),NI=mI.context,BI=NI.createImageData(hI,YI);if(a){const e=BI.data;for(let w=0,x=e.length;w<x;w+=4)e[w]=a[0],e[w+1]=a[1],e[w+2]=a[2],e[w+3]=255}for(const e of this._figures)j(BI,e,U);return NI.putImageData(BI,2,2),{canvas:mI.canvas,offsetX:X-2*nI,offsetY:b-2*gI,scaleX:nI,scaleY:gI}}getPattern(Y,a,i,I){T(Y,this._bbox);let g;if(I===z.SHADING)g=h.Util.singularValueDecompose2dScale((0,M.getCurrentTransform)(Y));else if(g=h.Util.singularValueDecompose2dScale(a.baseTransform),this.matrix){const X=h.Util.singularValueDecompose2dScale(this.matrix);g=[g[0]*X[0],g[1]*X[1]]}const o=this._createMeshCanvas(g,I===z.SHADING?null:this._background,a.cachedCanvases);return I!==z.SHADING&&(Y.setTransform(...a.baseTransform),this.matrix&&Y.transform(...this.matrix)),Y.translate(o.offsetX,o.offsetY),Y.scale(o.scaleX,o.scaleY),Y.createPattern(o.canvas,"no-repeat")}}class m extends r{getPattern(){return"hotpink"}}function d(B){switch(B[0]){case"RadialAxial":return new Z(B);case"Mesh":return new D(B);case"Dummy":return new m}throw new Error(`Unknown IR type: ${B[0]}`)}const C={COLORED:1,UNCOLORED:2};class l{static get MAX_PATTERN_SIZE(){return(0,h.shadow)(this,"MAX_PATTERN_SIZE",3e3)}constructor(Y,a,i,I,g){this.operatorList=Y[2],this.matrix=Y[3]||[1,0,0,1,0,0],this.bbox=Y[4],this.xstep=Y[5],this.ystep=Y[6],this.paintType=Y[7],this.tilingType=Y[8],this.color=a,this.ctx=i,this.canvasGraphicsFactory=I,this.baseTransform=g}createPatternCanvas(Y){const a=this.operatorList,i=this.bbox,I=this.xstep,g=this.ystep,o=this.paintType,X=this.tilingType,b=this.color,N=this.canvasGraphicsFactory;(0,h.info)("TilingType: "+X);const F=i[0],hI=i[1],YI=i[2],nI=i[3],gI=h.Util.singularValueDecompose2dScale(this.matrix),U=h.Util.singularValueDecompose2dScale(this.baseTransform),II=[gI[0]*U[0],gI[1]*U[1]],q=this.getSizeAndScale(I,this.ctx.canvas.width,II[0]),mI=this.getSizeAndScale(g,this.ctx.canvas.height,II[1]),NI=Y.cachedCanvases.getCanvas("pattern",q.size,mI.size,!0),BI=NI.context,J=N.createCanvasGraphics(BI);J.groupLevel=Y.groupLevel,this.setFillAndStrokeStyleToContext(J,o,b);let e=F,w=hI,x=YI,E=nI;return F<0&&(e=0,x+=Math.abs(F)),hI<0&&(w=0,E+=Math.abs(hI)),BI.translate(-(q.scale*e),-(mI.scale*w)),J.transform(q.scale,0,0,mI.scale,0,0),BI.save(),this.clipBbox(J,e,w,x,E),J.baseTransform=(0,M.getCurrentTransform)(J.ctx),J.executeOperatorList(a),J.endDrawing(),{canvas:NI.canvas,scaleX:q.scale,scaleY:mI.scale,offsetX:e,offsetY:w}}getSizeAndScale(Y,a,i){Y=Math.abs(Y);const I=Math.max(l.MAX_PATTERN_SIZE,a);let g=Math.ceil(Y*i);return g>=I?g=I:i=g/Y,{scale:i,size:g}}clipBbox(Y,a,i,I,g){const o=I-a,X=g-i;Y.ctx.rect(a,i,o,X),Y.current.updateRectMinMax((0,M.getCurrentTransform)(Y.ctx),[a,i,I,g]),Y.clip(),Y.endPath()}setFillAndStrokeStyleToContext(Y,a,i){const I=Y.ctx,g=Y.current;switch(a){case C.COLORED:const o=this.ctx;I.fillStyle=o.fillStyle,I.strokeStyle=o.strokeStyle,g.fillColor=o.fillStyle,g.strokeColor=o.strokeStyle;break;case C.UNCOLORED:const X=h.Util.makeHexColor(i[0],i[1],i[2]);I.fillStyle=X,I.strokeStyle=X,g.fillColor=X,g.strokeColor=X;break;default:throw new h.FormatError(`Unsupported paint type: ${a}`)}}getPattern(Y,a,i,I){let g=i;I!==z.SHADING&&(g=h.Util.transform(g,a.baseTransform),this.matrix&&(g=h.Util.transform(g,this.matrix)));const o=this.createPatternCanvas(a);let X=new DOMMatrix(g);X=X.translate(o.offsetX,o.offsetY),X=X.scale(1/o.scaleX,1/o.scaleY);const b=Y.createPattern(o.canvas,"repeat");try{b.setTransform(X)}catch(N){(0,h.warn)(`TilingPattern.getPattern: "${N==null?void 0:N.message}".`)}return b}}c.TilingPattern=l},(wI,c,$)=>{Object.defineProperty(c,"__esModule",{value:!0}),c.applyMaskImageData=M;var h=$(1);function M({src:_,srcPos:z=0,dest:T,destPos:r=0,width:Z,height:p,inverseDecode:j=!1}){const D=h.FeatureTest.isLittleEndian?4278190080:255,[m,d]=j?[0,D]:[D,0],C=Z>>3,l=Z&7,B=_.length;T=new Uint32Array(T.buffer);for(let Y=0;Y<p;Y++){for(const i=z+C;z<i;z++){const I=z<B?_[z]:255;T[r++]=I&128?d:m,T[r++]=I&64?d:m,T[r++]=I&32?d:m,T[r++]=I&16?d:m,T[r++]=I&8?d:m,T[r++]=I&4?d:m,T[r++]=I&2?d:m,T[r++]=I&1?d:m}if(l===0)continue;const a=z<B?_[z++]:255;for(let i=0;i<l;i++)T[r++]=a&1<<7-i?d:m}return{srcPos:z,destPos:r}}},(wI,c)=>{Object.defineProperty(c,"__esModule",{value:!0}),c.GlobalWorkerOptions=void 0;const $=Object.create(null);c.GlobalWorkerOptions=$,$.workerPort=$.workerPort===void 0?null:$.workerPort,$.workerSrc=$.workerSrc===void 0?"":$.workerSrc},(wI,c,$)=>{Object.defineProperty(c,"__esModule",{value:!0}),c.MessageHandler=void 0;var h=$(1);const M={UNKNOWN:0,DATA:1,ERROR:2},_={UNKNOWN:0,CANCEL:1,CANCEL_COMPLETE:2,CLOSE:3,ENQUEUE:4,ERROR:5,PULL:6,PULL_COMPLETE:7,START_COMPLETE:8};function z(r){switch(r instanceof Error||typeof r=="object"&&r!==null||(0,h.unreachable)('wrapReason: Expected "reason" to be a (possibly cloned) Error.'),r.name){case"AbortException":return new h.AbortException(r.message);case"MissingPDFException":return new h.MissingPDFException(r.message);case"PasswordException":return new h.PasswordException(r.message,r.code);case"UnexpectedResponseException":return new h.UnexpectedResponseException(r.message,r.status);case"UnknownErrorException":return new h.UnknownErrorException(r.message,r.details);default:return new h.UnknownErrorException(r.message,r.toString())}}class T{constructor(Z,p,j){this.sourceName=Z,this.targetName=p,this.comObj=j,this.callbackId=1,this.streamId=1,this.streamSinks=Object.create(null),this.streamControllers=Object.create(null),this.callbackCapabilities=Object.create(null),this.actionHandler=Object.create(null),this._onComObjOnMessage=D=>{const m=D.data;if(m.targetName!==this.sourceName)return;if(m.stream){this._processStreamMessage(m);return}if(m.callback){const C=m.callbackId,l=this.callbackCapabilities[C];if(!l)throw new Error(`Cannot resolve callback ${C}`);if(delete this.callbackCapabilities[C],m.callback===M.DATA)l.resolve(m.data);else if(m.callback===M.ERROR)l.reject(z(m.reason));else throw new Error("Unexpected callback case");return}const d=this.actionHandler[m.action];if(!d)throw new Error(`Unknown action from worker: ${m.action}`);if(m.callbackId){const C=this.sourceName,l=m.sourceName;new Promise(function(B){B(d(m.data))}).then(function(B){j.postMessage({sourceName:C,targetName:l,callback:M.DATA,callbackId:m.callbackId,data:B})},function(B){j.postMessage({sourceName:C,targetName:l,callback:M.ERROR,callbackId:m.callbackId,reason:z(B)})});return}if(m.streamId){this._createStreamSink(m);return}d(m.data)},j.addEventListener("message",this._onComObjOnMessage)}on(Z,p){const j=this.actionHandler;if(j[Z])throw new Error(`There is already an actionName called "${Z}"`);j[Z]=p}send(Z,p,j){this.comObj.postMessage({sourceName:this.sourceName,targetName:this.targetName,action:Z,data:p},j)}sendWithPromise(Z,p,j){const D=this.callbackId++,m=(0,h.createPromiseCapability)();this.callbackCapabilities[D]=m;try{this.comObj.postMessage({sourceName:this.sourceName,targetName:this.targetName,action:Z,callbackId:D,data:p},j)}catch(d){m.reject(d)}return m.promise}sendWithStream(Z,p,j,D){const m=this.streamId++,d=this.sourceName,C=this.targetName,l=this.comObj;return new ReadableStream({start:B=>{const Y=(0,h.createPromiseCapability)();return this.streamControllers[m]={controller:B,startCall:Y,pullCall:null,cancelCall:null,isClosed:!1},l.postMessage({sourceName:d,targetName:C,action:Z,streamId:m,data:p,desiredSize:B.desiredSize},D),Y.promise},pull:B=>{const Y=(0,h.createPromiseCapability)();return this.streamControllers[m].pullCall=Y,l.postMessage({sourceName:d,targetName:C,stream:_.PULL,streamId:m,desiredSize:B.desiredSize}),Y.promise},cancel:B=>{(0,h.assert)(B instanceof Error,"cancel must have a valid reason");const Y=(0,h.createPromiseCapability)();return this.streamControllers[m].cancelCall=Y,this.streamControllers[m].isClosed=!0,l.postMessage({sourceName:d,targetName:C,stream:_.CANCEL,streamId:m,reason:z(B)}),Y.promise}},j)}_createStreamSink(Z){const p=Z.streamId,j=this.sourceName,D=Z.sourceName,m=this.comObj,d=this,C=this.actionHandler[Z.action],l={enqueue(B,Y=1,a){if(this.isCancelled)return;const i=this.desiredSize;this.desiredSize-=Y,i>0&&this.desiredSize<=0&&(this.sinkCapability=(0,h.createPromiseCapability)(),this.ready=this.sinkCapability.promise),m.postMessage({sourceName:j,targetName:D,stream:_.ENQUEUE,streamId:p,chunk:B},a)},close(){this.isCancelled||(this.isCancelled=!0,m.postMessage({sourceName:j,targetName:D,stream:_.CLOSE,streamId:p}),delete d.streamSinks[p])},error(B){(0,h.assert)(B instanceof Error,"error must have a valid reason"),!this.isCancelled&&(this.isCancelled=!0,m.postMessage({sourceName:j,targetName:D,stream:_.ERROR,streamId:p,reason:z(B)}))},sinkCapability:(0,h.createPromiseCapability)(),onPull:null,onCancel:null,isCancelled:!1,desiredSize:Z.desiredSize,ready:null};l.sinkCapability.resolve(),l.ready=l.sinkCapability.promise,this.streamSinks[p]=l,new Promise(function(B){B(C(Z.data,l))}).then(function(){m.postMessage({sourceName:j,targetName:D,stream:_.START_COMPLETE,streamId:p,success:!0})},function(B){m.postMessage({sourceName:j,targetName:D,stream:_.START_COMPLETE,streamId:p,reason:z(B)})})}_processStreamMessage(Z){const p=Z.streamId,j=this.sourceName,D=Z.sourceName,m=this.comObj,d=this.streamControllers[p],C=this.streamSinks[p];switch(Z.stream){case _.START_COMPLETE:Z.success?d.startCall.resolve():d.startCall.reject(z(Z.reason));break;case _.PULL_COMPLETE:Z.success?d.pullCall.resolve():d.pullCall.reject(z(Z.reason));break;case _.PULL:if(!C){m.postMessage({sourceName:j,targetName:D,stream:_.PULL_COMPLETE,streamId:p,success:!0});break}C.desiredSize<=0&&Z.desiredSize>0&&C.sinkCapability.resolve(),C.desiredSize=Z.desiredSize,new Promise(function(l){l(C.onPull&&C.onPull())}).then(function(){m.postMessage({sourceName:j,targetName:D,stream:_.PULL_COMPLETE,streamId:p,success:!0})},function(l){m.postMessage({sourceName:j,targetName:D,stream:_.PULL_COMPLETE,streamId:p,reason:z(l)})});break;case _.ENQUEUE:if((0,h.assert)(d,"enqueue should have stream controller"),d.isClosed)break;d.controller.enqueue(Z.chunk);break;case _.CLOSE:if((0,h.assert)(d,"close should have stream controller"),d.isClosed)break;d.isClosed=!0,d.controller.close(),this._deleteStreamController(d,p);break;case _.ERROR:(0,h.assert)(d,"error should have stream controller"),d.controller.error(z(Z.reason)),this._deleteStreamController(d,p);break;case _.CANCEL_COMPLETE:Z.success?d.cancelCall.resolve():d.cancelCall.reject(z(Z.reason)),this._deleteStreamController(d,p);break;case _.CANCEL:if(!C)break;new Promise(function(l){l(C.onCancel&&C.onCancel(z(Z.reason)))}).then(function(){m.postMessage({sourceName:j,targetName:D,stream:_.CANCEL_COMPLETE,streamId:p,success:!0})},function(l){m.postMessage({sourceName:j,targetName:D,stream:_.CANCEL_COMPLETE,streamId:p,reason:z(l)})}),C.sinkCapability.reject(z(Z.reason)),C.isCancelled=!0,delete this.streamSinks[p];break;default:throw new Error("Unexpected stream case")}}async _deleteStreamController(Z,p){await Promise.allSettled([Z.startCall&&Z.startCall.promise,Z.pullCall&&Z.pullCall.promise,Z.cancelCall&&Z.cancelCall.promise]),delete this.streamControllers[p]}destroy(){this.comObj.removeEventListener("message",this._onComObjOnMessage)}}c.MessageHandler=T},(wI,c,$)=>{var _,z;Object.defineProperty(c,"__esModule",{value:!0}),c.Metadata=void 0;var h=$(1);class M{constructor({parsedData:r,rawData:Z}){zI(this,_,void 0);zI(this,z,void 0);UI(this,_,r),UI(this,z,Z)}getRaw(){return VI(this,z)}get(r){return VI(this,_).get(r)??null}getAll(){return(0,h.objectFromMap)(VI(this,_))}has(r){return VI(this,_).has(r)}}_=new WeakMap,z=new WeakMap,c.Metadata=M},(wI,c,$)=>{var T,r,Z,p,j,D,Dg;Object.defineProperty(c,"__esModule",{value:!0}),c.OptionalContentConfig=void 0;var h=$(1);const M=Symbol("INTERNAL");class _{constructor(C,l){zI(this,T,!0);this.name=C,this.intent=l}get visible(){return VI(this,T)}_setVisible(C,l){C!==M&&(0,h.unreachable)("Internal method `_setVisible` called."),UI(this,T,l)}}T=new WeakMap;class z{constructor(C){zI(this,D);zI(this,r,!0);zI(this,Z,new Map);zI(this,p,null);zI(this,j,null);if(this.name=null,this.creator=null,C!==null){this.name=C.name,this.creator=C.creator,UI(this,j,C.order);for(const l of C.groups)VI(this,Z).set(l.id,new _(l.name,l.intent));if(C.baseState==="OFF")for(const l of VI(this,Z).values())l._setVisible(M,!1);for(const l of C.on)VI(this,Z).get(l)._setVisible(M,!0);for(const l of C.off)VI(this,Z).get(l)._setVisible(M,!1);UI(this,p,new Map);for(const[l,B]of VI(this,Z))VI(this,p).set(l,B.visible)}}isVisible(C){if(VI(this,Z).size===0)return!0;if(!C)return(0,h.warn)("Optional content group not defined."),!0;if(C.type==="OCG")return VI(this,Z).has(C.id)?VI(this,Z).get(C.id).visible:((0,h.warn)(`Optional content group not found: ${C.id}`),!0);if(C.type==="OCMD"){if(C.expression)return jI(this,D,Dg).call(this,C.expression);if(!C.policy||C.policy==="AnyOn"){for(const l of C.ids){if(!VI(this,Z).has(l))return(0,h.warn)(`Optional content group not found: ${l}`),!0;if(VI(this,Z).get(l).visible)return!0}return!1}else if(C.policy==="AllOn"){for(const l of C.ids){if(!VI(this,Z).has(l))return(0,h.warn)(`Optional content group not found: ${l}`),!0;if(!VI(this,Z).get(l).visible)return!1}return!0}else if(C.policy==="AnyOff"){for(const l of C.ids){if(!VI(this,Z).has(l))return(0,h.warn)(`Optional content group not found: ${l}`),!0;if(!VI(this,Z).get(l).visible)return!0}return!1}else if(C.policy==="AllOff"){for(const l of C.ids){if(!VI(this,Z).has(l))return(0,h.warn)(`Optional content group not found: ${l}`),!0;if(VI(this,Z).get(l).visible)return!1}return!0}return(0,h.warn)(`Unknown optional content policy ${C.policy}.`),!0}return(0,h.warn)(`Unknown group type ${C.type}.`),!0}setVisibility(C,l=!0){if(!VI(this,Z).has(C)){(0,h.warn)(`Optional content group not found: ${C}`);return}VI(this,Z).get(C)._setVisible(M,!!l),UI(this,r,null)}get hasInitialVisibility(){if(VI(this,r)!==null)return VI(this,r);for(const[C,l]of VI(this,Z)){const B=VI(this,p).get(C);if(l.visible!==B)return UI(this,r,!1)}return UI(this,r,!0)}getOrder(){return VI(this,Z).size?VI(this,j)?VI(this,j).slice():[...VI(this,Z).keys()]:null}getGroups(){return VI(this,Z).size>0?(0,h.objectFromMap)(VI(this,Z)):null}getGroup(C){return VI(this,Z).get(C)||null}}r=new WeakMap,Z=new WeakMap,p=new WeakMap,j=new WeakMap,D=new WeakSet,Dg=function(C){const l=C.length;if(l<2)return!0;const B=C[0];for(let Y=1;Y<l;Y++){const a=C[Y];let i;if(Array.isArray(a))i=jI(this,D,Dg).call(this,a);else if(VI(this,Z).has(a))i=VI(this,Z).get(a).visible;else return(0,h.warn)(`Optional content group not found: ${a}`),!0;switch(B){case"And":if(!i)return!1;break;case"Or":if(i)return!0;break;case"Not":return!i;default:return!0}}return B==="And"},c.OptionalContentConfig=z},(wI,c,$)=>{Object.defineProperty(c,"__esModule",{value:!0}),c.PDFDataTransportStream=void 0;var h=$(1),M=$(8);class _{constructor(Z,p){(0,h.assert)(p,'PDFDataTransportStream - missing required "pdfDataRangeTransport" argument.'),this._queuedChunks=[],this._progressiveDone=Z.progressiveDone||!1,this._contentDispositionFilename=Z.contentDispositionFilename||null;const j=Z.initialData;if((j==null?void 0:j.length)>0){const D=new Uint8Array(j).buffer;this._queuedChunks.push(D)}this._pdfDataRangeTransport=p,this._isStreamingSupported=!Z.disableStream,this._isRangeSupported=!Z.disableRange,this._contentLength=Z.length,this._fullRequestReader=null,this._rangeReaders=[],this._pdfDataRangeTransport.addRangeListener((D,m)=>{this._onReceiveData({begin:D,chunk:m})}),this._pdfDataRangeTransport.addProgressListener((D,m)=>{this._onProgress({loaded:D,total:m})}),this._pdfDataRangeTransport.addProgressiveReadListener(D=>{this._onReceiveData({chunk:D})}),this._pdfDataRangeTransport.addProgressiveDoneListener(()=>{this._onProgressiveDone()}),this._pdfDataRangeTransport.transportReady()}_onReceiveData(Z){const p=new Uint8Array(Z.chunk).buffer;if(Z.begin===void 0)this._fullRequestReader?this._fullRequestReader._enqueue(p):this._queuedChunks.push(p);else{const j=this._rangeReaders.some(function(D){return D._begin!==Z.begin?!1:(D._enqueue(p),!0)});(0,h.assert)(j,"_onReceiveData - no `PDFDataTransportStreamRangeReader` instance found.")}}get _progressiveDataLength(){var Z;return((Z=this._fullRequestReader)==null?void 0:Z._loaded)??0}_onProgress(Z){if(Z.total===void 0){const p=this._rangeReaders[0];p!=null&&p.onProgress&&p.onProgress({loaded:Z.loaded})}else{const p=this._fullRequestReader;p!=null&&p.onProgress&&p.onProgress({loaded:Z.loaded,total:Z.total})}}_onProgressiveDone(){this._fullRequestReader&&this._fullRequestReader.progressiveDone(),this._progressiveDone=!0}_removeRangeReader(Z){const p=this._rangeReaders.indexOf(Z);p>=0&&this._rangeReaders.splice(p,1)}getFullReader(){(0,h.assert)(!this._fullRequestReader,"PDFDataTransportStream.getFullReader can only be called once.");const Z=this._queuedChunks;return this._queuedChunks=null,new z(this,Z,this._progressiveDone,this._contentDispositionFilename)}getRangeReader(Z,p){if(p<=this._progressiveDataLength)return null;const j=new T(this,Z,p);return this._pdfDataRangeTransport.requestDataRange(Z,p),this._rangeReaders.push(j),j}cancelAllRequests(Z){this._fullRequestReader&&this._fullRequestReader.cancel(Z);for(const p of this._rangeReaders.slice(0))p.cancel(Z);this._pdfDataRangeTransport.abort()}}c.PDFDataTransportStream=_;class z{constructor(Z,p,j=!1,D=null){this._stream=Z,this._done=j||!1,this._filename=(0,M.isPdfFile)(D)?D:null,this._queuedChunks=p||[],this._loaded=0;for(const m of this._queuedChunks)this._loaded+=m.byteLength;this._requests=[],this._headersReady=Promise.resolve(),Z._fullRequestReader=this,this.onProgress=null}_enqueue(Z){this._done||(this._requests.length>0?this._requests.shift().resolve({value:Z,done:!1}):this._queuedChunks.push(Z),this._loaded+=Z.byteLength)}get headersReady(){return this._headersReady}get filename(){return this._filename}get isRangeSupported(){return this._stream._isRangeSupported}get isStreamingSupported(){return this._stream._isStreamingSupported}get contentLength(){return this._stream._contentLength}async read(){if(this._queuedChunks.length>0)return{value:this._queuedChunks.shift(),done:!1};if(this._done)return{value:void 0,done:!0};const Z=(0,h.createPromiseCapability)();return this._requests.push(Z),Z.promise}cancel(Z){this._done=!0;for(const p of this._requests)p.resolve({value:void 0,done:!0});this._requests.length=0}progressiveDone(){this._done||(this._done=!0)}}class T{constructor(Z,p,j){this._stream=Z,this._begin=p,this._end=j,this._queuedChunk=null,this._requests=[],this._done=!1,this.onProgress=null}_enqueue(Z){if(!this._done){if(this._requests.length===0)this._queuedChunk=Z;else{this._requests.shift().resolve({value:Z,done:!1});for(const j of this._requests)j.resolve({value:void 0,done:!0});this._requests.length=0}this._done=!0,this._stream._removeRangeReader(this)}}get isStreamingSupported(){return!1}async read(){if(this._queuedChunk){const p=this._queuedChunk;return this._queuedChunk=null,{value:p,done:!1}}if(this._done)return{value:void 0,done:!0};const Z=(0,h.createPromiseCapability)();return this._requests.push(Z),Z.promise}cancel(Z){this._done=!0;for(const p of this._requests)p.resolve({value:void 0,done:!0});this._requests.length=0,this._stream._removeRangeReader(this)}}},(wI,c)=>{Object.defineProperty(c,"__esModule",{value:!0}),c.XfaText=void 0;class ${static textContent(M){const _=[],z={items:_,styles:Object.create(null)};function T(r){var j;if(!r)return;let Z=null;const p=r.name;if(p==="#text")Z=r.value;else if($.shouldBuildText(p))(j=r==null?void 0:r.attributes)!=null&&j.textContent?Z=r.attributes.textContent:r.value&&(Z=r.value);else return;if(Z!==null&&_.push({str:Z}),!!r.children)for(const D of r.children)T(D)}return T(M),z}static shouldBuildText(M){return!(M==="textarea"||M==="input"||M==="option"||M==="select")}}c.XfaText=$},(wI,c,$)=>{Object.defineProperty(c,"__esModule",{value:!0}),c.NodeStandardFontDataFactory=c.NodeCanvasFactory=c.NodeCMapReaderFactory=void 0;var h=$(9);const M=function(r){return new Promise((Z,p)=>{require$$5$1.readFile(r,(D,m)=>{if(D||!m){p(new Error(D));return}Z(new Uint8Array(m))})})};class _ extends h.BaseCanvasFactory{_createCanvas(Z,p){return require$$5$1.createCanvas(Z,p)}}c.NodeCanvasFactory=_;class z extends h.BaseCMapReaderFactory{_fetchData(Z,p){return M(Z).then(j=>({cMapData:j,compressionType:p}))}}c.NodeCMapReaderFactory=z;class T extends h.BaseStandardFontDataFactory{_fetchData(Z){return M(Z)}}c.NodeStandardFontDataFactory=T},(wI,c,$)=>{var r,Z,p,j,D,m,d,C,l,Hg,Y,Pg,i,Jg,g,_g;Object.defineProperty(c,"__esModule",{value:!0}),c.AnnotationEditorLayer=void 0;var h=$(7),M=$(1),_=$(23),z=$(24);const X=class{constructor(N){zI(this,l);zI(this,Y);zI(this,i);zI(this,g);zI(this,r,void 0);zI(this,Z,!1);zI(this,p,this.pointerup.bind(this));zI(this,j,this.pointerdown.bind(this));zI(this,D,new Map);zI(this,m,!1);zI(this,d,!1);zI(this,C,void 0);X._initialized||(X._initialized=!0,_.FreeTextEditor.initialize(N.l10n),z.InkEditor.initialize(N.l10n),N.uiManager.registerEditorTypes([_.FreeTextEditor,z.InkEditor])),UI(this,C,N.uiManager),this.annotationStorage=N.annotationStorage,this.pageIndex=N.pageIndex,this.div=N.div,UI(this,r,N.accessibilityManager),VI(this,C).addLayer(this)}updateToolbar(N){VI(this,C).updateToolbar(N)}updateMode(N=VI(this,C).getMode()){jI(this,g,_g).call(this),N===M.AnnotationEditorType.INK?(this.addInkEditorIfNeeded(!1),this.disableClick()):this.enableClick(),VI(this,C).unselectAll()}addInkEditorIfNeeded(N){if(!N&&VI(this,C).getMode()!==M.AnnotationEditorType.INK)return;if(!N){for(const hI of VI(this,D).values())if(hI.isEmpty()){hI.setInBackground();return}}jI(this,i,Jg).call(this,{offsetX:0,offsetY:0}).setInBackground()}setEditingState(N){VI(this,C).setEditingState(N)}addCommands(N){VI(this,C).addCommands(N)}enable(){this.div.style.pointerEvents="auto";for(const N of VI(this,D).values())N.enableEditing()}disable(){this.div.style.pointerEvents="none";for(const N of VI(this,D).values())N.disableEditing()}setActiveEditor(N){VI(this,C).getActive()!==N&&VI(this,C).setActiveEditor(N)}enableClick(){this.div.addEventListener("pointerdown",VI(this,j)),this.div.addEventListener("pointerup",VI(this,p))}disableClick(){this.div.removeEventListener("pointerdown",VI(this,j)),this.div.removeEventListener("pointerup",VI(this,p))}attach(N){VI(this,D).set(N.id,N)}detach(N){var F;VI(this,D).delete(N.id),(F=VI(this,r))==null||F.removePointerInTextLayer(N.contentDiv)}remove(N){VI(this,C).removeEditor(N),this.detach(N),this.annotationStorage.remove(N.id),N.div.style.display="none",setTimeout(()=>{N.div.style.display="",N.div.remove(),N.isAttachedToDOM=!1,document.activeElement===document.body&&VI(this,C).focusMainContainer()},0),VI(this,d)||this.addInkEditorIfNeeded(!1)}add(N){if(jI(this,l,Hg).call(this,N),VI(this,C).addEditor(N),this.attach(N),!N.isAttachedToDOM){const F=N.render();this.div.append(F),N.isAttachedToDOM=!0}this.moveEditorInDOM(N),N.onceAdded(),this.addToAnnotationStorage(N)}moveEditorInDOM(N){var F;(F=VI(this,r))==null||F.moveElementInDOM(this.div,N.div,N.contentDiv,!0)}addToAnnotationStorage(N){!N.isEmpty()&&!this.annotationStorage.has(N.id)&&this.annotationStorage.setValue(N.id,N)}addOrRebuild(N){N.needsToBeRebuilt()?N.rebuild():this.add(N)}addANewEditor(N){const F=()=>{this.addOrRebuild(N)},hI=()=>{N.remove()};this.addCommands({cmd:F,undo:hI,mustExec:!0})}addUndoableEditor(N){const F=()=>{this.addOrRebuild(N)},hI=()=>{N.remove()};this.addCommands({cmd:F,undo:hI,mustExec:!1})}getNextId(){return VI(this,C).getId()}deserialize(N){switch(N.annotationType){case M.AnnotationEditorType.FREETEXT:return _.FreeTextEditor.deserialize(N,this);case M.AnnotationEditorType.INK:return z.InkEditor.deserialize(N,this)}return null}setSelected(N){VI(this,C).setSelected(N)}toggleSelected(N){VI(this,C).toggleSelected(N)}isSelected(N){return VI(this,C).isSelected(N)}unselect(N){VI(this,C).unselect(N)}pointerup(N){const F=h.KeyboardManager.platform.isMac;if(!(N.button!==0||N.ctrlKey&&F)&&N.target===this.div&&VI(this,m)){if(UI(this,m,!1),!VI(this,Z)){UI(this,Z,!0);return}jI(this,i,Jg).call(this,N)}}pointerdown(N){const F=h.KeyboardManager.platform.isMac;if(N.button!==0||N.ctrlKey&&F||N.target!==this.div)return;UI(this,m,!0);const hI=VI(this,C).getActive();UI(this,Z,!hI||hI.isEmpty())}drop(N){const F=N.dataTransfer.getData("text/plain"),hI=VI(this,C).getEditor(F);if(!hI)return;N.preventDefault(),N.dataTransfer.dropEffect="move",jI(this,l,Hg).call(this,hI);const YI=this.div.getBoundingClientRect(),nI=N.clientX-YI.x,gI=N.clientY-YI.y;hI.translate(nI-hI.startX,gI-hI.startY),this.moveEditorInDOM(hI),hI.div.focus()}dragover(N){N.preventDefault()}destroy(){var N,F;((N=VI(this,C).getActive())==null?void 0:N.parent)===this&&VI(this,C).setActiveEditor(null);for(const hI of VI(this,D).values())(F=VI(this,r))==null||F.removePointerInTextLayer(hI.contentDiv),hI.isAttachedToDOM=!1,hI.div.remove(),hI.parent=null;this.div=null,VI(this,D).clear(),VI(this,C).removeLayer(this)}render(N){this.viewport=N.viewport,(0,h.bindEvents)(this,this.div,["dragover","drop"]),this.setDimensions();for(const F of VI(this,C).getEditors(this.pageIndex))this.add(F);this.updateMode()}update(N){this.viewport=N.viewport,this.setDimensions(),this.updateMode()}get scaleFactor(){return this.viewport.scale}get pageDimensions(){const[N,F,hI,YI]=this.viewport.viewBox,nI=hI-N,gI=YI-F;return[nI,gI]}get viewportBaseDimensions(){const{width:N,height:F,rotation:hI}=this.viewport;return hI%180===0?[N,F]:[F,N]}setDimensions(){const{width:N,height:F,rotation:hI}=this.viewport,YI=hI%180!==0,nI=Math.floor(N)+"px",gI=Math.floor(F)+"px";this.div.style.width=YI?gI:nI,this.div.style.height=YI?nI:gI,this.div.setAttribute("data-main-rotation",hI)}};let T=X;r=new WeakMap,Z=new WeakMap,p=new WeakMap,j=new WeakMap,D=new WeakMap,m=new WeakMap,d=new WeakMap,C=new WeakMap,l=new WeakSet,Hg=function(N){var F;N.parent!==this&&(this.attach(N),N.pageIndex=this.pageIndex,(F=N.parent)==null||F.detach(N),N.parent=this,N.div&&N.isAttachedToDOM&&(N.div.remove(),this.div.append(N.div)))},Y=new WeakSet,Pg=function(N){switch(VI(this,C).getMode()){case M.AnnotationEditorType.FREETEXT:return new _.FreeTextEditor(N);case M.AnnotationEditorType.INK:return new z.InkEditor(N)}return null},i=new WeakSet,Jg=function(N){const F=this.getNextId(),hI=jI(this,Y,Pg).call(this,{parent:this,id:F,x:N.offsetX,y:N.offsetY});return hI&&this.add(hI),hI},g=new WeakSet,_g=function(){UI(this,d,!0);for(const N of VI(this,D).values())N.isEmpty()&&N.remove();UI(this,d,!1)},cg(T,"_initialized",!1),c.AnnotationEditorLayer=T},(wI,c,$)=>{var T,r,Z,p,j,D,m,d,qg,l,$g,Y,IC,i,Sg;Object.defineProperty(c,"__esModule",{value:!0}),c.FreeTextEditor=void 0;var h=$(1),M=$(7),_=$(6);const g=class extends _.AnnotationEditor{constructor(b){super({...b,name:"freeTextEditor"});zI(this,d);zI(this,l);zI(this,Y);zI(this,i);zI(this,T,this.editorDivBlur.bind(this));zI(this,r,this.editorDivFocus.bind(this));zI(this,Z,this.editorDivKeydown.bind(this));zI(this,p,void 0);zI(this,j,"");zI(this,D,!1);zI(this,m,void 0);UI(this,p,b.color||g._defaultColor||_.AnnotationEditor._defaultLineColor),UI(this,m,b.fontSize||g._defaultFontSize)}static initialize(b){this._l10nPromise=new Map(["free_text_default_content","editor_free_text_aria_label"].map(F=>[F,b.get(F)]));const N=getComputedStyle(document.documentElement);this._internalPadding=parseFloat(N.getPropertyValue("--freetext-padding"))}static updateDefaultParams(b,N){switch(b){case h.AnnotationEditorParamsType.FREETEXT_SIZE:g._defaultFontSize=N;break;case h.AnnotationEditorParamsType.FREETEXT_COLOR:g._defaultColor=N;break}}updateParams(b,N){switch(b){case h.AnnotationEditorParamsType.FREETEXT_SIZE:jI(this,d,qg).call(this,N);break;case h.AnnotationEditorParamsType.FREETEXT_COLOR:jI(this,l,$g).call(this,N);break}}static get defaultPropertiesToUpdate(){return[[h.AnnotationEditorParamsType.FREETEXT_SIZE,g._defaultFontSize],[h.AnnotationEditorParamsType.FREETEXT_COLOR,g._defaultColor||_.AnnotationEditor._defaultLineColor]]}get propertiesToUpdate(){return[[h.AnnotationEditorParamsType.FREETEXT_SIZE,VI(this,m)],[h.AnnotationEditorParamsType.FREETEXT_COLOR,VI(this,p)]]}getInitialTranslation(){return[-g._internalPadding*this.parent.scaleFactor,-(g._internalPadding+VI(this,m))*this.parent.scaleFactor]}rebuild(){super.rebuild(),this.div!==null&&(this.isAttachedToDOM||this.parent.add(this))}enableEditMode(){this.isInEditMode()||(this.parent.setEditingState(!1),this.parent.updateToolbar(h.AnnotationEditorType.FREETEXT),super.enableEditMode(),this.enableEditing(),this.overlayDiv.classList.remove("enabled"),this.editorDiv.contentEditable=!0,this.div.draggable=!1,this.editorDiv.addEventListener("keydown",VI(this,Z)),this.editorDiv.addEventListener("focus",VI(this,r)),this.editorDiv.addEventListener("blur",VI(this,T)))}disableEditMode(){this.isInEditMode()&&(this.parent.setEditingState(!0),super.disableEditMode(),this.disableEditing(),this.overlayDiv.classList.add("enabled"),this.editorDiv.contentEditable=!1,this.div.draggable=!0,this.editorDiv.removeEventListener("keydown",VI(this,Z)),this.editorDiv.removeEventListener("focus",VI(this,r)),this.editorDiv.removeEventListener("blur",VI(this,T)),this.div.focus(),this.isEditing=!1)}focusin(b){super.focusin(b),b.target!==this.editorDiv&&this.editorDiv.focus()}onceAdded(){this.width||(this.enableEditMode(),this.editorDiv.focus())}isEmpty(){return!this.editorDiv||this.editorDiv.innerText.trim()===""}remove(){this.isEditing=!1,this.parent.setEditingState(!0),super.remove()}commit(){super.commit(),VI(this,D)||(UI(this,D,!0),this.parent.addUndoableEditor(this)),this.disableEditMode(),UI(this,j,jI(this,Y,IC).call(this).trimEnd()),jI(this,i,Sg).call(this)}shouldGetKeyboardEvents(){return this.isInEditMode()}dblclick(b){this.enableEditMode(),this.editorDiv.focus()}keydown(b){b.target===this.div&&b.key==="Enter"&&(this.enableEditMode(),this.editorDiv.focus())}editorDivKeydown(b){g._keyboardManager.exec(this,b)}editorDivFocus(b){this.isEditing=!0}editorDivBlur(b){this.isEditing=!1}disableEditing(){this.editorDiv.setAttribute("role","comment"),this.editorDiv.removeAttribute("aria-multiline")}enableEditing(){this.editorDiv.setAttribute("role","textbox"),this.editorDiv.setAttribute("aria-multiline",!0)}render(){if(this.div)return this.div;let b,N;this.width&&(b=this.x,N=this.y),super.render(),this.editorDiv=document.createElement("div"),this.editorDiv.className="internal",this.editorDiv.setAttribute("id",`${this.id}-editor`),this.enableEditing(),g._l10nPromise.get("editor_free_text_aria_label").then(hI=>{var YI;return(YI=this.editorDiv)==null?void 0:YI.setAttribute("aria-label",hI)}),g._l10nPromise.get("free_text_default_content").then(hI=>{var YI;return(YI=this.editorDiv)==null?void 0:YI.setAttribute("default-content",hI)}),this.editorDiv.contentEditable=!0;const{style:F}=this.editorDiv;if(F.fontSize=`calc(${VI(this,m)}px * var(--scale-factor))`,F.color=VI(this,p),this.div.append(this.editorDiv),this.overlayDiv=document.createElement("div"),this.overlayDiv.classList.add("overlay","enabled"),this.div.append(this.overlayDiv),(0,M.bindEvents)(this,this.div,["dblclick","keydown"]),this.width){const[hI,YI]=this.parent.viewportBaseDimensions;this.setAt(b*hI,N*YI,this.width*hI,this.height*YI);for(const nI of VI(this,j).split(`
`)){const gI=document.createElement("div");gI.append(nI?document.createTextNode(nI):document.createElement("br")),this.editorDiv.append(gI)}this.div.draggable=!0,this.editorDiv.contentEditable=!1}else this.div.draggable=!1,this.editorDiv.contentEditable=!0;return this.div}get contentDiv(){return this.editorDiv}static deserialize(b,N){const F=super.deserialize(b,N);return UI(F,m,b.fontSize),UI(F,p,h.Util.makeHexColor(...b.color)),UI(F,j,b.value),F}serialize(){if(this.isEmpty())return null;const b=g._internalPadding*this.parent.scaleFactor,N=this.getRect(b,b),F=_.AnnotationEditor._colorManager.convert(getComputedStyle(this.editorDiv).color);return{annotationType:h.AnnotationEditorType.FREETEXT,color:F,fontSize:VI(this,m),value:VI(this,j),pageIndex:this.parent.pageIndex,rect:N,rotation:this.rotation}}};let z=g;T=new WeakMap,r=new WeakMap,Z=new WeakMap,p=new WeakMap,j=new WeakMap,D=new WeakMap,m=new WeakMap,d=new WeakSet,qg=function(b){const N=hI=>{this.editorDiv.style.fontSize=`calc(${hI}px * var(--scale-factor))`,this.translate(0,-(hI-VI(this,m))*this.parent.scaleFactor),UI(this,m,hI),jI(this,i,Sg).call(this)},F=VI(this,m);this.parent.addCommands({cmd:()=>{N(b)},undo:()=>{N(F)},mustExec:!0,type:h.AnnotationEditorParamsType.FREETEXT_SIZE,overwriteIfSameType:!0,keepUndo:!0})},l=new WeakSet,$g=function(b){const N=VI(this,p);this.parent.addCommands({cmd:()=>{UI(this,p,b),this.editorDiv.style.color=b},undo:()=>{UI(this,p,N),this.editorDiv.style.color=N},mustExec:!0,type:h.AnnotationEditorParamsType.FREETEXT_COLOR,overwriteIfSameType:!0,keepUndo:!0})},Y=new WeakSet,IC=function(){const b=this.editorDiv.getElementsByTagName("div");if(b.length===0)return this.editorDiv.innerText;const N=[];for(let F=0,hI=b.length;F<hI;F++){const nI=b[F].firstChild;(nI==null?void 0:nI.nodeName)==="#text"?N.push(nI.data):N.push("")}return N.join(`
`)},i=new WeakSet,Sg=function(){const[b,N]=this.parent.viewportBaseDimensions,F=this.div.getBoundingClientRect();this.width=F.width/b,this.height=F.height/N},cg(z,"_freeTextDefaultContent",""),cg(z,"_l10nPromise"),cg(z,"_internalPadding",0),cg(z,"_defaultColor",null),cg(z,"_defaultFontSize",10),cg(z,"_keyboardManager",new M.KeyboardManager([[["ctrl+Enter","mac+meta+Enter","Escape","mac+Escape"],g.prototype.commitOrRemove]])),cg(z,"_type","freetext"),c.FreeTextEditor=z},(wI,c,$)=>{var Z,p,j,D,m,d,C,l,B,Y,a,i,I,g,o,gC,b,CC,F,AC,YI,iC,gI,Lg,II,lC,mI,sC,BI,dC,e,bg,x,Fg,P,Yg,aI,Vg,A,ag,L,rg,Q,Ng,uI,kg,ZI,cC,tI,oC,f,ZC,RI,zg,DI,Xg,TI,tg,fI,Tg;Object.defineProperty(c,"__esModule",{value:!0}),c.InkEditor=void 0,Object.defineProperty(c,"fitCurve",{enumerable:!0,get:function(){return _.fitCurve}});var h=$(1),M=$(6),_=$(25),z=$(7);const T=16,EI=class extends M.AnnotationEditor{constructor(yI){super({...yI,name:"inkEditor"});zI(this,o);zI(this,b);zI(this,F);zI(this,YI);zI(this,gI);zI(this,II);zI(this,mI);zI(this,BI);zI(this,e);zI(this,x);zI(this,P);zI(this,aI);zI(this,A);zI(this,L);zI(this,Q);zI(this,ZI);zI(this,tI);zI(this,f);zI(this,RI);zI(this,DI);zI(this,TI);zI(this,fI);zI(this,Z,0);zI(this,p,0);zI(this,j,0);zI(this,D,this.canvasPointermove.bind(this));zI(this,m,this.canvasPointerleave.bind(this));zI(this,d,this.canvasPointerup.bind(this));zI(this,C,this.canvasPointerdown.bind(this));zI(this,l,!1);zI(this,B,!1);zI(this,Y,null);zI(this,a,null);zI(this,i,0);zI(this,I,0);zI(this,g,null);this.color=yI.color||null,this.thickness=yI.thickness||null,this.opacity=yI.opacity||null,this.paths=[],this.bezierPath2D=[],this.currentPath=[],this.scaleFactor=1,this.translationX=this.translationY=0,this.x=0,this.y=0}static initialize(yI){this._l10nPromise=new Map(["editor_ink_canvas_aria_label","editor_ink_aria_label"].map(HI=>[HI,yI.get(HI)]))}static updateDefaultParams(yI,HI){switch(yI){case h.AnnotationEditorParamsType.INK_THICKNESS:EI._defaultThickness=HI;break;case h.AnnotationEditorParamsType.INK_COLOR:EI._defaultColor=HI;break;case h.AnnotationEditorParamsType.INK_OPACITY:EI._defaultOpacity=HI/100;break}}updateParams(yI,HI){switch(yI){case h.AnnotationEditorParamsType.INK_THICKNESS:jI(this,o,gC).call(this,HI);break;case h.AnnotationEditorParamsType.INK_COLOR:jI(this,b,CC).call(this,HI);break;case h.AnnotationEditorParamsType.INK_OPACITY:jI(this,F,AC).call(this,HI);break}}static get defaultPropertiesToUpdate(){return[[h.AnnotationEditorParamsType.INK_THICKNESS,EI._defaultThickness],[h.AnnotationEditorParamsType.INK_COLOR,EI._defaultColor||M.AnnotationEditor._defaultLineColor],[h.AnnotationEditorParamsType.INK_OPACITY,Math.round(EI._defaultOpacity*100)]]}get propertiesToUpdate(){return[[h.AnnotationEditorParamsType.INK_THICKNESS,this.thickness||EI._defaultThickness],[h.AnnotationEditorParamsType.INK_COLOR,this.color||EI._defaultColor||M.AnnotationEditor._defaultLineColor],[h.AnnotationEditorParamsType.INK_OPACITY,Math.round(100*(this.opacity??EI._defaultOpacity))]]}rebuild(){super.rebuild(),this.div!==null&&(this.canvas||(jI(this,P,Yg).call(this),jI(this,aI,Vg).call(this)),this.isAttachedToDOM||(this.parent.add(this),jI(this,A,ag).call(this)),jI(this,TI,tg).call(this))}remove(){this.canvas!==null&&(this.isEmpty()||this.commit(),this.canvas.width=this.canvas.height=0,this.canvas.remove(),this.canvas=null,VI(this,a).disconnect(),UI(this,a,null),super.remove())}enableEditMode(){VI(this,l)||this.canvas===null||(super.enableEditMode(),this.div.draggable=!1,this.canvas.addEventListener("pointerdown",VI(this,C)),this.canvas.addEventListener("pointerup",VI(this,d)))}disableEditMode(){!this.isInEditMode()||this.canvas===null||(super.disableEditMode(),this.div.draggable=!this.isEmpty(),this.div.classList.remove("editing"),this.canvas.removeEventListener("pointerdown",VI(this,C)),this.canvas.removeEventListener("pointerup",VI(this,d)))}onceAdded(){this.div.draggable=!this.isEmpty()}isEmpty(){return this.paths.length===0||this.paths.length===1&&this.paths[0].length===0}commit(){VI(this,l)||(super.commit(),this.isEditing=!1,this.disableEditMode(),this.setInForeground(),UI(this,l,!0),this.div.classList.add("disabled"),jI(this,TI,tg).call(this,!0),this.parent.addInkEditorIfNeeded(!0),this.parent.moveEditorInDOM(this),this.div.focus())}focusin(yI){super.focusin(yI),this.enableEditMode()}canvasPointerdown(yI){yI.button!==0||!this.isInEditMode()||VI(this,l)||(this.setInForeground(),yI.type!=="mouse"&&this.div.focus(),yI.stopPropagation(),this.canvas.addEventListener("pointerleave",VI(this,m)),this.canvas.addEventListener("pointermove",VI(this,D)),jI(this,II,lC).call(this,yI.offsetX,yI.offsetY))}canvasPointermove(yI){yI.stopPropagation(),jI(this,mI,sC).call(this,yI.offsetX,yI.offsetY)}canvasPointerup(yI){yI.button===0&&this.isInEditMode()&&this.currentPath.length!==0&&(yI.stopPropagation(),jI(this,x,Fg).call(this,yI),this.setInBackground())}canvasPointerleave(yI){jI(this,x,Fg).call(this,yI),this.setInBackground()}render(){if(this.div)return this.div;let yI,HI;this.width&&(yI=this.x,HI=this.y),super.render(),EI._l10nPromise.get("editor_ink_aria_label").then(LI=>{var rI;return(rI=this.div)==null?void 0:rI.setAttribute("aria-label",LI)});const[cI,CI,AI,KI]=jI(this,YI,iC).call(this);if(this.setAt(cI,CI,0,0),this.setDims(AI,KI),jI(this,P,Yg).call(this),this.width){const[LI,rI]=this.parent.viewportBaseDimensions;this.setAt(yI*LI,HI*rI,this.width*LI,this.height*rI),UI(this,B,!0),jI(this,A,ag).call(this),this.setDims(this.width*LI,this.height*rI),jI(this,e,bg).call(this),jI(this,fI,Tg).call(this),this.div.classList.add("disabled")}else this.div.classList.add("editing"),this.enableEditMode();return jI(this,aI,Vg).call(this),this.div}setDimensions(yI,HI){const cI=Math.round(yI),CI=Math.round(HI);if(VI(this,i)===cI&&VI(this,I)===CI)return;UI(this,i,cI),UI(this,I,CI),this.canvas.style.visibility="hidden",VI(this,Z)&&Math.abs(VI(this,Z)-yI/HI)>.01&&(HI=Math.ceil(yI/VI(this,Z)),this.setDims(yI,HI));const[AI,KI]=this.parent.viewportBaseDimensions;this.width=yI/AI,this.height=HI/KI,VI(this,l)&&jI(this,L,rg).call(this,yI,HI),jI(this,A,ag).call(this),jI(this,e,bg).call(this),this.canvas.style.visibility="visible"}static deserialize(yI,HI){var _I,$I;const cI=super.deserialize(yI,HI);cI.thickness=yI.thickness,cI.color=h.Util.makeHexColor(...yI.color),cI.opacity=yI.opacity;const[CI,AI]=HI.pageDimensions,KI=cI.width*CI,LI=cI.height*AI,rI=HI.scaleFactor,kI=yI.thickness/2;UI(cI,Z,KI/LI),UI(cI,l,!0),UI(cI,i,Math.round(KI)),UI(cI,I,Math.round(LI));for(const{bezier:OI}of yI.paths){const gg=[];cI.paths.push(gg);let Ig=rI*(OI[0]-kI),Ag=rI*(LI-OI[1]-kI);for(let lg=2,ig=OI.length;lg<ig;lg+=6){const og=rI*(OI[lg]-kI),Zg=rI*(LI-OI[lg+1]-kI),sg=rI*(OI[lg+2]-kI),Cg=rI*(LI-OI[lg+3]-kI),dg=rI*(OI[lg+4]-kI),Gg=rI*(LI-OI[lg+5]-kI);gg.push([[Ig,Ag],[og,Zg],[sg,Cg],[dg,Gg]]),Ig=dg,Ag=Gg}const qI=jI(this,uI,kg).call(this,gg);cI.bezierPath2D.push(qI)}const xI=jI(_I=cI,RI,zg).call(_I);return UI(cI,j,Math.max(T,xI[2]-xI[0])),UI(cI,p,Math.max(T,xI[3]-xI[1])),jI($I=cI,L,rg).call($I,KI,LI),cI}serialize(){if(this.isEmpty())return null;const yI=this.getRect(0,0),HI=this.rotation%180===0?yI[3]-yI[1]:yI[2]-yI[0],cI=M.AnnotationEditor._colorManager.convert(this.ctx.strokeStyle);return{annotationType:h.AnnotationEditorType.INK,color:cI,thickness:this.thickness,opacity:this.opacity,paths:jI(this,ZI,cC).call(this,this.scaleFactor/this.parent.scaleFactor,this.translationX,this.translationY,HI),pageIndex:this.parent.pageIndex,rect:yI,rotation:this.rotation}}};let r=EI;Z=new WeakMap,p=new WeakMap,j=new WeakMap,D=new WeakMap,m=new WeakMap,d=new WeakMap,C=new WeakMap,l=new WeakMap,B=new WeakMap,Y=new WeakMap,a=new WeakMap,i=new WeakMap,I=new WeakMap,g=new WeakMap,o=new WeakSet,gC=function(yI){const HI=this.thickness;this.parent.addCommands({cmd:()=>{this.thickness=yI,jI(this,TI,tg).call(this)},undo:()=>{this.thickness=HI,jI(this,TI,tg).call(this)},mustExec:!0,type:h.AnnotationEditorParamsType.INK_THICKNESS,overwriteIfSameType:!0,keepUndo:!0})},b=new WeakSet,CC=function(yI){const HI=this.color;this.parent.addCommands({cmd:()=>{this.color=yI,jI(this,e,bg).call(this)},undo:()=>{this.color=HI,jI(this,e,bg).call(this)},mustExec:!0,type:h.AnnotationEditorParamsType.INK_COLOR,overwriteIfSameType:!0,keepUndo:!0})},F=new WeakSet,AC=function(yI){yI/=100;const HI=this.opacity;this.parent.addCommands({cmd:()=>{this.opacity=yI,jI(this,e,bg).call(this)},undo:()=>{this.opacity=HI,jI(this,e,bg).call(this)},mustExec:!0,type:h.AnnotationEditorParamsType.INK_OPACITY,overwriteIfSameType:!0,keepUndo:!0})},YI=new WeakSet,iC=function(){const{width:yI,height:HI,rotation:cI}=this.parent.viewport;switch(cI){case 90:return[0,yI,yI,HI];case 180:return[yI,HI,yI,HI];case 270:return[HI,0,yI,HI];default:return[0,0,yI,HI]}},gI=new WeakSet,Lg=function(){this.ctx.lineWidth=this.thickness*this.parent.scaleFactor/this.scaleFactor,this.ctx.lineCap="round",this.ctx.lineJoin="round",this.ctx.miterLimit=10,this.ctx.strokeStyle=`${this.color}${(0,z.opacityToHex)(this.opacity)}`},II=new WeakSet,lC=function(yI,HI){this.isEditing=!0,VI(this,B)||(UI(this,B,!0),jI(this,A,ag).call(this),this.thickness||(this.thickness=EI._defaultThickness),this.color||(this.color=EI._defaultColor||M.AnnotationEditor._defaultLineColor),this.opacity??(this.opacity=EI._defaultOpacity)),this.currentPath.push([yI,HI]),UI(this,Y,null),jI(this,gI,Lg).call(this),this.ctx.beginPath(),this.ctx.moveTo(yI,HI),UI(this,g,()=>{VI(this,g)&&(VI(this,Y)&&(this.isEmpty()?(this.ctx.setTransform(1,0,0,1,0,0),this.ctx.clearRect(0,0,this.canvas.width,this.canvas.height)):jI(this,e,bg).call(this),this.ctx.lineTo(...VI(this,Y)),UI(this,Y,null),this.ctx.stroke()),window.requestAnimationFrame(VI(this,g)))}),window.requestAnimationFrame(VI(this,g))},mI=new WeakSet,sC=function(yI,HI){const[cI,CI]=this.currentPath.at(-1);yI===cI&&HI===CI||(this.currentPath.push([yI,HI]),UI(this,Y,[yI,HI]))},BI=new WeakSet,dC=function(yI,HI){var kI;this.ctx.closePath(),UI(this,g,null),yI=Math.min(Math.max(yI,0),this.canvas.width),HI=Math.min(Math.max(HI,0),this.canvas.height);const[cI,CI]=this.currentPath.at(-1);(yI!==cI||HI!==CI)&&this.currentPath.push([yI,HI]);let AI;if(this.currentPath.length!==1)AI=(0,_.fitCurve)(this.currentPath,30,null);else{const xI=[yI,HI];AI=[[xI,xI.slice(),xI.slice(),xI]]}const KI=jI(kI=EI,uI,kg).call(kI,AI);this.currentPath.length=0;const LI=()=>{this.paths.push(AI),this.bezierPath2D.push(KI),this.rebuild()},rI=()=>{this.paths.pop(),this.bezierPath2D.pop(),this.paths.length===0?this.remove():(this.canvas||(jI(this,P,Yg).call(this),jI(this,aI,Vg).call(this)),jI(this,TI,tg).call(this))};this.parent.addCommands({cmd:LI,undo:rI,mustExec:!0})},e=new WeakSet,bg=function(){if(this.isEmpty()){jI(this,Q,Ng).call(this);return}jI(this,gI,Lg).call(this);const{canvas:yI,ctx:HI}=this;HI.setTransform(1,0,0,1,0,0),HI.clearRect(0,0,yI.width,yI.height),jI(this,Q,Ng).call(this);for(const cI of this.bezierPath2D)HI.stroke(cI)},x=new WeakSet,Fg=function(yI){jI(this,BI,dC).call(this,yI.offsetX,yI.offsetY),this.canvas.removeEventListener("pointerleave",VI(this,m)),this.canvas.removeEventListener("pointermove",VI(this,D)),this.parent.addToAnnotationStorage(this)},P=new WeakSet,Yg=function(){this.canvas=document.createElement("canvas"),this.canvas.width=this.canvas.height=0,this.canvas.className="inkEditorCanvas",EI._l10nPromise.get("editor_ink_canvas_aria_label").then(yI=>{var HI;return(HI=this.canvas)==null?void 0:HI.setAttribute("aria-label",yI)}),this.div.append(this.canvas),this.ctx=this.canvas.getContext("2d")},aI=new WeakSet,Vg=function(){UI(this,a,new ResizeObserver(yI=>{const HI=yI[0].contentRect;HI.width&&HI.height&&this.setDimensions(HI.width,HI.height)})),VI(this,a).observe(this.div)},A=new WeakSet,ag=function(){if(!VI(this,B))return;const[yI,HI]=this.parent.viewportBaseDimensions;this.canvas.width=Math.ceil(this.width*yI),this.canvas.height=Math.ceil(this.height*HI),jI(this,Q,Ng).call(this)},L=new WeakSet,rg=function(yI,HI){const cI=jI(this,DI,Xg).call(this),CI=(yI-cI)/VI(this,j),AI=(HI-cI)/VI(this,p);this.scaleFactor=Math.min(CI,AI)},Q=new WeakSet,Ng=function(){const yI=jI(this,DI,Xg).call(this)/2;this.ctx.setTransform(this.scaleFactor,0,0,this.scaleFactor,this.translationX*this.scaleFactor+yI,this.translationY*this.scaleFactor+yI)},uI=new WeakSet,kg=function(yI){const HI=new Path2D;for(let cI=0,CI=yI.length;cI<CI;cI++){const[AI,KI,LI,rI]=yI[cI];cI===0&&HI.moveTo(...AI),HI.bezierCurveTo(KI[0],KI[1],LI[0],LI[1],rI[0],rI[1])}return HI},ZI=new WeakSet,cC=function(yI,HI,cI,CI){const KI=[],LI=this.thickness/2;let rI,kI;for(const xI of this.paths){rI=[],kI=[];for(let _I=0,$I=xI.length;_I<$I;_I++){const[OI,gg,Ig,Ag]=xI[_I],qI=yI*(OI[0]+HI)+LI,lg=CI-yI*(OI[1]+cI)-LI,ig=yI*(gg[0]+HI)+LI,og=CI-yI*(gg[1]+cI)-LI,Zg=yI*(Ig[0]+HI)+LI,sg=CI-yI*(Ig[1]+cI)-LI,Cg=yI*(Ag[0]+HI)+LI,dg=CI-yI*(Ag[1]+cI)-LI;_I===0&&(rI.push(qI,lg),kI.push(qI,lg)),rI.push(ig,og,Zg,sg,Cg,dg),jI(this,tI,oC).call(this,qI,lg,ig,og,Zg,sg,Cg,dg,4,kI)}KI.push({bezier:rI,points:kI})}return KI},tI=new WeakSet,oC=function(yI,HI,cI,CI,AI,KI,LI,rI,kI,xI){if(jI(this,f,ZC).call(this,yI,HI,cI,CI,AI,KI,LI,rI)){xI.push(LI,rI);return}for(let _I=1;_I<kI-1;_I++){const $I=_I/kI,OI=1-$I;let gg=$I*yI+OI*cI,Ig=$I*HI+OI*CI,Ag=$I*cI+OI*AI,qI=$I*CI+OI*KI;const lg=$I*AI+OI*LI,ig=$I*KI+OI*rI;gg=$I*gg+OI*Ag,Ig=$I*Ig+OI*qI,Ag=$I*Ag+OI*lg,qI=$I*qI+OI*ig,gg=$I*gg+OI*Ag,Ig=$I*Ig+OI*qI,xI.push(gg,Ig)}xI.push(LI,rI)},f=new WeakSet,ZC=function(yI,HI,cI,CI,AI,KI,LI,rI){const xI=(3*cI-2*yI-LI)**2,_I=(3*CI-2*HI-rI)**2,$I=(3*AI-yI-2*LI)**2,OI=(3*KI-HI-2*rI)**2;return Math.max(xI,$I)+Math.max(_I,OI)<=10},RI=new WeakSet,zg=function(){let yI=1/0,HI=-1/0,cI=1/0,CI=-1/0;for(const AI of this.paths)for(const[KI,LI,rI,kI]of AI){const xI=h.Util.bezierBoundingBox(...KI,...LI,...rI,...kI);yI=Math.min(yI,xI[0]),cI=Math.min(cI,xI[1]),HI=Math.max(HI,xI[2]),CI=Math.max(CI,xI[3])}return[yI,cI,HI,CI]},DI=new WeakSet,Xg=function(){return VI(this,l)?Math.ceil(this.thickness*this.parent.scaleFactor):0},TI=new WeakSet,tg=function(yI=!1){if(this.isEmpty())return;if(!VI(this,l)){jI(this,e,bg).call(this);return}const HI=jI(this,RI,zg).call(this),cI=jI(this,DI,Xg).call(this);UI(this,j,Math.max(T,HI[2]-HI[0])),UI(this,p,Math.max(T,HI[3]-HI[1]));const CI=Math.ceil(cI+VI(this,j)*this.scaleFactor),AI=Math.ceil(cI+VI(this,p)*this.scaleFactor),[KI,LI]=this.parent.viewportBaseDimensions;this.width=CI/KI,this.height=AI/LI,UI(this,Z,CI/AI),jI(this,fI,Tg).call(this);const rI=this.translationX,kI=this.translationY;this.translationX=-HI[0],this.translationY=-HI[1],jI(this,A,ag).call(this),jI(this,e,bg).call(this),UI(this,i,CI),UI(this,I,AI),this.setDims(CI,AI);const xI=yI?cI/this.scaleFactor/2:0;this.translate(rI-this.translationX-xI,kI-this.translationY-xI)},fI=new WeakSet,Tg=function(){const{style:yI}=this.div;VI(this,Z)>=1?(yI.minHeight=`${T}px`,yI.minWidth=`${Math.round(VI(this,Z)*T)}px`):(yI.minWidth=`${T}px`,yI.minHeight=`${Math.round(T/VI(this,Z))}px`)},zI(r,uI),cg(r,"_defaultColor",null),cg(r,"_defaultOpacity",1),cg(r,"_defaultThickness",1),cg(r,"_l10nPromise"),cg(r,"_type","ink"),c.InkEditor=r},(wI,c,$)=>{Object.defineProperty(c,"__esModule",{value:!0}),c.fitCurve=void 0;const h=$(26);c.fitCurve=h},wI=>{function c(d,C,l){if(!Array.isArray(d))throw new TypeError("First argument should be an array");if(d.forEach(i=>{if(!Array.isArray(i)||i.some(I=>typeof I!="number")||i.length!==d[0].length)throw Error("Each point should be an array of numbers. Each point should have the same amount of numbers.")}),d=d.filter((i,I)=>I===0||!i.every((g,o)=>g===d[I-1][o])),d.length<2)return[];const B=d.length,Y=j(d[1],d[0]),a=j(d[B-2],d[B-1]);return $(d,Y,a,C,l)}function $(d,C,l,B,Y){var i,I,g,o,X,b,N,F,hI,YI,nI,gI,U;if(d.length===2)return gI=D.vectorLen(D.subtract(d[0],d[1]))/3,i=[d[0],D.addArrays(d[0],D.mulItems(C,gI)),D.addArrays(d[1],D.mulItems(l,gI)),d[1]],[i];if(I=T(d),[i,o,b]=h(d,I,I,C,l,Y),o===0||o<B)return[i];if(o<B*B)for(g=I,X=o,N=b,U=0;U<20;U++){if(g=_(i,d,g),[i,o,b]=h(d,I,g,C,l,Y),o<B)return[i];if(b===N){let II=o/X;if(II>.9999&&II<1.0001)break}X=o,N=b}return nI=[],F=D.subtract(d[b-1],d[b+1]),F.every(II=>II===0)&&(F=D.subtract(d[b-1],d[b]),[F[0],F[1]]=[-F[1],F[0]]),hI=D.normalize(F),YI=D.mulItems(hI,-1),nI=nI.concat($(d.slice(0,b+1),C,hI,B,Y)),nI=nI.concat($(d.slice(b),YI,l,B,Y)),nI}function h(d,C,l,B,Y,a){var i,I,g;return i=M(d,l,B,Y),[I,g]=r(d,i,C),a&&a({bez:i,points:d,params:C,maxErr:I,maxPoint:g}),[i,I,g]}function M(d,C,l,B){var Y,a,i,I,g,o,X,b,N,F,hI,YI,nI,gI,U,II,q,mI=d[0],NI=d[d.length-1];for(Y=[mI,null,null,NI],a=D.zeros_Xx2x2(C.length),nI=0,gI=C.length;nI<gI;nI++)II=C[nI],q=1-II,i=a[nI],i[0]=D.mulItems(l,3*II*(q*q)),i[1]=D.mulItems(B,3*q*(II*II));for(I=[[0,0],[0,0]],g=[0,0],nI=0,gI=d.length;nI<gI;nI++)II=C[nI],i=a[nI],I[0][0]+=D.dot(i[0],i[0]),I[0][1]+=D.dot(i[0],i[1]),I[1][0]+=D.dot(i[0],i[1]),I[1][1]+=D.dot(i[1],i[1]),U=D.subtract(d[nI],m.q([mI,mI,NI,NI],II)),g[0]+=D.dot(i[0],U),g[1]+=D.dot(i[1],U);return o=I[0][0]*I[1][1]-I[1][0]*I[0][1],X=I[0][0]*g[1]-I[1][0]*g[0],b=g[0]*I[1][1]-g[1]*I[0][1],N=o===0?0:b/o,F=o===0?0:X/o,YI=D.vectorLen(D.subtract(mI,NI)),hI=1e-6*YI,N<hI||F<hI?(Y[1]=D.addArrays(mI,D.mulItems(l,YI/3)),Y[2]=D.addArrays(NI,D.mulItems(B,YI/3))):(Y[1]=D.addArrays(mI,D.mulItems(l,N)),Y[2]=D.addArrays(NI,D.mulItems(B,F))),Y}function _(d,C,l){return l.map((B,Y)=>z(d,C[Y],B))}function z(d,C,l){var B=D.subtract(m.q(d,l),C),Y=m.qprime(d,l),a=D.mulMatrix(B,Y),i=D.sum(D.squareItems(Y))+2*D.mulMatrix(B,m.qprimeprime(d,l));return i===0?l:l-a/i}function T(d){var C=[],l,B,Y;return d.forEach((a,i)=>{l=i?B+D.vectorLen(D.subtract(a,Y)):0,C.push(l),B=l,Y=a}),C=C.map(a=>a/B),C}function r(d,C,l){var B,Y,a,i,I,g,o,X;Y=0,a=Math.floor(d.length/2);const b=Z(C,10);for(I=0,g=d.length;I<g;I++)o=d[I],X=p(C,l[I],b,10),i=D.subtract(m.q(C,X),o),B=i[0]*i[0]+i[1]*i[1],B>Y&&(Y=B,a=I);return[Y,a]}var Z=function(d,C){for(var l,B=[0],Y=d[0],a=0,i=1;i<=C;i++)l=m.q(d,i/C),a+=D.vectorLen(D.subtract(l,Y)),B.push(a),Y=l;return B=B.map(I=>I/a),B};function p(d,C,l,B){if(C<0)return 0;if(C>1)return 1;for(var Y,a,i,I,g,o=1;o<=B;o++)if(C<=l[o]){I=(o-1)/B,i=o/B,a=l[o-1],Y=l[o],g=(C-a)/(Y-a)*(i-I)+I;break}return g}function j(d,C){return D.normalize(D.subtract(d,C))}class D{static zeros_Xx2x2(C){for(var l=[];C--;)l.push([0,0]);return l}static mulItems(C,l){return C.map(B=>B*l)}static mulMatrix(C,l){return C.reduce((B,Y,a)=>B+Y*l[a],0)}static subtract(C,l){return C.map((B,Y)=>B-l[Y])}static addArrays(C,l){return C.map((B,Y)=>B+l[Y])}static addItems(C,l){return C.map(B=>B+l)}static sum(C){return C.reduce((l,B)=>l+B)}static dot(C,l){return D.mulMatrix(C,l)}static vectorLen(C){return Math.hypot(...C)}static divItems(C,l){return C.map(B=>B/l)}static squareItems(C){return C.map(l=>l*l)}static normalize(C){return this.divItems(C,this.vectorLen(C))}}class m{static q(C,l){var B=1-l,Y=D.mulItems(C[0],B*B*B),a=D.mulItems(C[1],3*B*B*l),i=D.mulItems(C[2],3*B*l*l),I=D.mulItems(C[3],l*l*l);return D.addArrays(D.addArrays(Y,a),D.addArrays(i,I))}static qprime(C,l){var B=1-l,Y=D.mulItems(D.subtract(C[1],C[0]),3*B*B),a=D.mulItems(D.subtract(C[2],C[1]),6*B*l),i=D.mulItems(D.subtract(C[3],C[2]),3*l*l);return D.addArrays(D.addArrays(Y,a),i)}static qprimeprime(C,l){return D.addArrays(D.mulItems(D.addArrays(D.subtract(C[2],D.mulItems(C[1],2)),C[0]),6*(1-l)),D.mulItems(D.addArrays(D.subtract(C[3],D.mulItems(C[2],2)),C[1]),6*l))}}wI.exports=c,wI.exports.fitCubic=$,wI.exports.createTangent=j},(wI,c,$)=>{var e,jg,x,xg,P,Qg;Object.defineProperty(c,"__esModule",{value:!0}),c.AnnotationLayer=void 0;var h=$(1),M=$(8),_=$(5),z=$(28),T=$(29);const r=1e3,Z=9,p=new WeakSet;function j(eI){return{width:eI[2]-eI[0],height:eI[3]-eI[1]}}class D{static create(A){switch(A.data.annotationType){case h.AnnotationType.LINK:return new d(A);case h.AnnotationType.TEXT:return new C(A);case h.AnnotationType.WIDGET:switch(A.data.fieldType){case"Tx":return new B(A);case"Btn":return A.data.radioButton?new a(A):A.data.checkBox?new Y(A):new i(A);case"Ch":return new I(A)}return new l(A);case h.AnnotationType.POPUP:return new g(A);case h.AnnotationType.FREETEXT:return new X(A);case h.AnnotationType.LINE:return new b(A);case h.AnnotationType.SQUARE:return new N(A);case h.AnnotationType.CIRCLE:return new F(A);case h.AnnotationType.POLYLINE:return new hI(A);case h.AnnotationType.CARET:return new nI(A);case h.AnnotationType.INK:return new gI(A);case h.AnnotationType.POLYGON:return new YI(A);case h.AnnotationType.HIGHLIGHT:return new U(A);case h.AnnotationType.UNDERLINE:return new II(A);case h.AnnotationType.SQUIGGLY:return new q(A);case h.AnnotationType.STRIKEOUT:return new mI(A);case h.AnnotationType.STAMP:return new NI(A);case h.AnnotationType.FILEATTACHMENT:return new BI(A);default:return new m(A)}}}class m{constructor(A,{isRenderable:W=!1,ignoreBorder:L=!1,createQuadrilaterals:S=!1}={}){this.isRenderable=W,this.data=A.data,this.layer=A.layer,this.page=A.page,this.viewport=A.viewport,this.linkService=A.linkService,this.downloadManager=A.downloadManager,this.imageResourcesPath=A.imageResourcesPath,this.renderForms=A.renderForms,this.svgFactory=A.svgFactory,this.annotationStorage=A.annotationStorage,this.enableScripting=A.enableScripting,this.hasJSActions=A.hasJSActions,this._fieldObjects=A.fieldObjects,this._mouseState=A.mouseState,W&&(this.container=this._createContainer(L)),S&&(this.quadrilaterals=this._createQuadrilaterals(L))}_createContainer(A=!1){const W=this.data,L=this.page,S=this.viewport,Q=document.createElement("section"),{width:lI,height:uI}=j(W.rect),[MI,ZI,WI,tI]=S.viewBox,O=WI-MI,f=tI-ZI;Q.setAttribute("data-annotation-id",W.id);const v=h.Util.normalizeRect([W.rect[0],L.view[3]-W.rect[1]+L.view[1],W.rect[2],L.view[3]-W.rect[3]+L.view[1]]);if(!A&&W.borderStyle.width>0){Q.style.borderWidth=`${W.borderStyle.width}px`;const pI=W.borderStyle.horizontalCornerRadius,DI=W.borderStyle.verticalCornerRadius;if(pI>0||DI>0){const TI=`calc(${pI}px * var(--scale-factor)) / calc(${DI}px * var(--scale-factor))`;Q.style.borderRadius=TI}else if(this instanceof a){const TI=`calc(${lI}px * var(--scale-factor)) / calc(${uI}px * var(--scale-factor))`;Q.style.borderRadius=TI}switch(W.borderStyle.style){case h.AnnotationBorderStyleType.SOLID:Q.style.borderStyle="solid";break;case h.AnnotationBorderStyleType.DASHED:Q.style.borderStyle="dashed";break;case h.AnnotationBorderStyleType.BEVELED:(0,h.warn)("Unimplemented border style: beveled");break;case h.AnnotationBorderStyleType.INSET:(0,h.warn)("Unimplemented border style: inset");break;case h.AnnotationBorderStyleType.UNDERLINE:Q.style.borderBottomStyle="solid";break}const FI=W.borderColor||null;FI?Q.style.borderColor=h.Util.makeHexColor(FI[0]|0,FI[1]|0,FI[2]|0):Q.style.borderWidth=0}Q.style.left=`${100*(v[0]-MI)/O}%`,Q.style.top=`${100*(v[1]-ZI)/f}%`;const{rotation:RI}=W;return W.hasOwnCanvas||RI===0?(Q.style.width=`${100*lI/O}%`,Q.style.height=`${100*uI/f}%`):this.setRotation(RI,Q),Q}setRotation(A,W=this.container){const[L,S,Q,lI]=this.viewport.viewBox,uI=Q-L,MI=lI-S,{width:ZI,height:WI}=j(this.data.rect);let tI,O;A%180===0?(tI=100*ZI/uI,O=100*WI/MI):(tI=100*WI/uI,O=100*ZI/MI),W.style.width=`${tI}%`,W.style.height=`${O}%`,W.setAttribute("data-main-rotation",(360-A)%360)}get _commonActions(){const A=(W,L,S)=>{const Q=S.detail[W];S.target.style[L]=z.ColorConverters[`${Q[0]}_HTML`](Q.slice(1))};return(0,h.shadow)(this,"_commonActions",{display:W=>{const L=W.detail.display%2===1;this.container.style.visibility=L?"hidden":"visible",this.annotationStorage.setValue(this.data.id,{hidden:L,print:W.detail.display===0||W.detail.display===3})},print:W=>{this.annotationStorage.setValue(this.data.id,{print:W.detail.print})},hidden:W=>{this.container.style.visibility=W.detail.hidden?"hidden":"visible",this.annotationStorage.setValue(this.data.id,{hidden:W.detail.hidden})},focus:W=>{setTimeout(()=>W.target.focus({preventScroll:!1}),0)},userName:W=>{W.target.title=W.detail.userName},readonly:W=>{W.detail.readonly?W.target.setAttribute("readonly",""):W.target.removeAttribute("readonly")},required:W=>{this._setRequired(W.target,W.detail.required)},bgColor:W=>{A("bgColor","backgroundColor",W)},fillColor:W=>{A("fillColor","backgroundColor",W)},fgColor:W=>{A("fgColor","color",W)},textColor:W=>{A("textColor","color",W)},borderColor:W=>{A("borderColor","borderColor",W)},strokeColor:W=>{A("strokeColor","borderColor",W)},rotation:W=>{const L=W.detail.rotation;this.setRotation(L),this.annotationStorage.setValue(this.data.id,{rotation:L})}})}_dispatchEventFromSandbox(A,W){const L=this._commonActions;for(const S of Object.keys(W.detail)){const Q=A[S]||L[S];Q&&Q(W)}}_setDefaultPropertiesFromJS(A){if(!this.enableScripting)return;const W=this.annotationStorage.getRawValue(this.data.id);if(!W)return;const L=this._commonActions;for(const[S,Q]of Object.entries(W)){const lI=L[S];if(lI){const uI={detail:{[S]:Q},target:A};lI(uI),delete W[S]}}}_createQuadrilaterals(A=!1){if(!this.data.quadPoints)return null;const W=[],L=this.data.rect;for(const S of this.data.quadPoints)this.data.rect=[S[2].x,S[2].y,S[1].x,S[1].y],W.push(this._createContainer(A));return this.data.rect=L,W}_createPopup(A,W){let L=this.container;this.quadrilaterals&&(A=A||this.quadrilaterals,L=this.quadrilaterals[0]),A||(A=document.createElement("div"),A.className="popupTriggerArea",L.append(A));const Q=new o({container:L,trigger:A,color:W.color,titleObj:W.titleObj,modificationDate:W.modificationDate,contentsObj:W.contentsObj,richText:W.richText,hideWrapper:!0}).render();Q.style.left="100%",L.append(Q)}_renderQuadrilaterals(A){for(const W of this.quadrilaterals)W.className=A;return this.quadrilaterals}render(){(0,h.unreachable)("Abstract method `AnnotationElement.render` called")}_getElementsByName(A,W=null){const L=[];if(this._fieldObjects){const S=this._fieldObjects[A];if(S)for(const{page:Q,id:lI,exportValues:uI}of S){if(Q===-1||lI===W)continue;const MI=typeof uI=="string"?uI:null,ZI=document.querySelector(`[data-element-id="${lI}"]`);if(ZI&&!p.has(ZI)){(0,h.warn)(`_getElementsByName - element not allowed: ${lI}`);continue}L.push({id:lI,exportValue:MI,domElement:ZI})}return L}for(const S of document.getElementsByName(A)){const{id:Q,exportValue:lI}=S;Q!==W&&p.has(S)&&L.push({id:Q,exportValue:lI,domElement:S})}return L}static get platform(){const A=typeof navigator<"u"?navigator.platform:"";return(0,h.shadow)(this,"platform",{isWin:A.includes("Win"),isMac:A.includes("Mac")})}}class d extends m{constructor(A,W=null){super(A,{isRenderable:!0,ignoreBorder:!!(W!=null&&W.ignoreBorder),createQuadrilaterals:!0}),this.isTooltipOnly=A.data.isTooltipOnly}render(){const{data:A,linkService:W}=this,L=document.createElement("a");L.setAttribute("data-element-id",A.id);let S=!1;return A.url?(W.addLinkAttributes(L,A.url,A.newWindow),S=!0):A.action?(this._bindNamedAction(L,A.action),S=!0):A.dest?(this._bindLink(L,A.dest),S=!0):(A.actions&&(A.actions.Action||A.actions["Mouse Up"]||A.actions["Mouse Down"])&&this.enableScripting&&this.hasJSActions&&(this._bindJSAction(L,A),S=!0),A.resetForm?(this._bindResetFormAction(L,A.resetForm),S=!0):this.isTooltipOnly&&!S&&(this._bindLink(L,""),S=!0)),this.quadrilaterals?this._renderQuadrilaterals("linkAnnotation").map((Q,lI)=>{const uI=lI===0?L:L.cloneNode();return Q.append(uI),Q}):(this.container.className="linkAnnotation",S&&this.container.append(L),this.container)}_bindLink(A,W){A.href=this.linkService.getDestinationHash(W),A.onclick=()=>(W&&this.linkService.goToDestination(W),!1),(W||W==="")&&(A.className="internalLink")}_bindNamedAction(A,W){A.href=this.linkService.getAnchorUrl(""),A.onclick=()=>(this.linkService.executeNamedAction(W),!1),A.className="internalLink"}_bindJSAction(A,W){A.href=this.linkService.getAnchorUrl("");const L=new Map([["Action","onclick"],["Mouse Up","onmouseup"],["Mouse Down","onmousedown"]]);for(const S of Object.keys(W.actions)){const Q=L.get(S);Q&&(A[Q]=()=>{var lI;return(lI=this.linkService.eventBus)==null||lI.dispatch("dispatcheventinsandbox",{source:this,detail:{id:W.id,name:S}}),!1})}A.onclick||(A.onclick=()=>!1),A.className="internalLink"}_bindResetFormAction(A,W){const L=A.onclick;if(L||(A.href=this.linkService.getAnchorUrl("")),A.className="internalLink",!this._fieldObjects){(0,h.warn)('_bindResetFormAction - "resetForm" action not supported, ensure that the `fieldObjects` parameter is provided.'),L||(A.onclick=()=>!1);return}A.onclick=()=>{var WI;L&&L();const{fields:S,refs:Q,include:lI}=W,uI=[];if(S.length!==0||Q.length!==0){const tI=new Set(Q);for(const O of S){const f=this._fieldObjects[O]||[];for(const{id:v}of f)tI.add(v)}for(const O of Object.values(this._fieldObjects))for(const f of O)tI.has(f.id)===lI&&uI.push(f)}else for(const tI of Object.values(this._fieldObjects))uI.push(...tI);const MI=this.annotationStorage,ZI=[];for(const tI of uI){const{id:O}=tI;switch(ZI.push(O),tI.type){case"text":{const v=tI.defaultValue||"";MI.setValue(O,{value:v});break}case"checkbox":case"radiobutton":{const v=tI.defaultValue===tI.exportValues;MI.setValue(O,{value:v});break}case"combobox":case"listbox":{const v=tI.defaultValue||"";MI.setValue(O,{value:v});break}default:continue}const f=document.querySelector(`[data-element-id="${O}"]`);if(f){if(!p.has(f)){(0,h.warn)(`_bindResetFormAction - element not allowed: ${O}`);continue}}else continue;f.dispatchEvent(new Event("resetform"))}return this.enableScripting&&((WI=this.linkService.eventBus)==null||WI.dispatch("dispatcheventinsandbox",{source:this,detail:{id:"app",ids:ZI,name:"ResetForm"}})),!1}}}class C extends m{constructor(A){var L,S,Q;const W=!!(A.data.hasPopup||(L=A.data.titleObj)!=null&&L.str||(S=A.data.contentsObj)!=null&&S.str||(Q=A.data.richText)!=null&&Q.str);super(A,{isRenderable:W})}render(){this.container.className="textAnnotation";const A=document.createElement("img");return A.src=this.imageResourcesPath+"annotation-"+this.data.name.toLowerCase()+".svg",A.alt="[{{type}} Annotation]",A.dataset.l10nId="text_annotation_type",A.dataset.l10nArgs=JSON.stringify({type:this.data.name}),this.data.hasPopup||this._createPopup(A,this.data),this.container.append(A),this.container}}class l extends m{render(){return this.data.alternativeText&&(this.container.title=this.data.alternativeText),this.container}_getKeyModifier(A){const{isWin:W,isMac:L}=m.platform;return W&&A.ctrlKey||L&&A.metaKey}_setEventListener(A,W,L,S){W.includes("mouse")?A.addEventListener(W,Q=>{var lI;(lI=this.linkService.eventBus)==null||lI.dispatch("dispatcheventinsandbox",{source:this,detail:{id:this.data.id,name:L,value:S(Q),shift:Q.shiftKey,modifier:this._getKeyModifier(Q)}})}):A.addEventListener(W,Q=>{var lI;(lI=this.linkService.eventBus)==null||lI.dispatch("dispatcheventinsandbox",{source:this,detail:{id:this.data.id,name:L,value:S(Q)}})})}_setEventListeners(A,W,L){var S;for(const[Q,lI]of W)(lI==="Action"||(S=this.data.actions)!=null&&S[lI])&&this._setEventListener(A,Q,lI,L)}_setBackgroundColor(A){const W=this.data.backgroundColor||null;A.style.backgroundColor=W===null?"transparent":h.Util.makeHexColor(W[0],W[1],W[2])}_setTextStyle(A){const W=["left","center","right"],{fontColor:L}=this.data.defaultAppearanceData,S=this.data.defaultAppearanceData.fontSize||Z,Q=A.style;let lI;if(this.data.multiLine){const uI=Math.abs(this.data.rect[3]-this.data.rect[1]),MI=Math.round(uI/(h.LINE_FACTOR*S))||1,ZI=uI/MI;lI=Math.min(S,Math.round(ZI/h.LINE_FACTOR))}else{const uI=Math.abs(this.data.rect[3]-this.data.rect[1]);lI=Math.min(S,Math.round(uI/h.LINE_FACTOR))}Q.fontSize=`calc(${lI}px * var(--scale-factor))`,Q.color=h.Util.makeHexColor(L[0],L[1],L[2]),this.data.textAlignment!==null&&(Q.textAlign=W[this.data.textAlignment])}_setRequired(A,W){W?A.setAttribute("required",!0):A.removeAttribute("required"),A.setAttribute("aria-required",W)}}class B extends l{constructor(A){const W=A.renderForms||!A.data.hasAppearance&&!!A.data.fieldValue;super(A,{isRenderable:W})}setPropertyOnSiblings(A,W,L,S){const Q=this.annotationStorage;for(const lI of this._getElementsByName(A.name,A.id))lI.domElement&&(lI.domElement[W]=L),Q.setValue(lI.id,{[S]:L})}render(){var S;const A=this.annotationStorage,W=this.data.id;this.container.className="textWidgetAnnotation";let L=null;if(this.renderForms){const Q=A.getValue(W,{value:this.data.fieldValue});let lI=Q.formattedValue||Q.value||"";const uI=A.getValue(W,{charLimit:this.data.maxLen}).charLimit;uI&&lI.length>uI&&(lI=lI.slice(0,uI));const MI={userValue:lI,formattedValue:null,valueOnFocus:""};this.data.multiLine?(L=document.createElement("textarea"),L.textContent=lI,this.data.doNotScroll&&(L.style.overflowY="hidden")):(L=document.createElement("input"),L.type="text",L.setAttribute("value",lI),this.data.doNotScroll&&(L.style.overflowX="hidden")),p.add(L),L.setAttribute("data-element-id",W),L.disabled=this.data.readOnly,L.name=this.data.fieldName,L.tabIndex=r,this._setRequired(L,this.data.required),uI&&(L.maxLength=uI),L.addEventListener("input",WI=>{A.setValue(W,{value:WI.target.value}),this.setPropertyOnSiblings(L,"value",WI.target.value,"value")}),L.addEventListener("resetform",WI=>{const tI=this.data.defaultFieldValue??"";L.value=MI.userValue=tI,MI.formattedValue=null});let ZI=WI=>{const{formattedValue:tI}=MI;tI!=null&&(WI.target.value=tI),WI.target.scrollLeft=0};if(this.enableScripting&&this.hasJSActions){L.addEventListener("focus",tI=>{MI.userValue&&(tI.target.value=MI.userValue),MI.valueOnFocus=tI.target.value}),L.addEventListener("updatefromsandbox",tI=>{const O={value(f){MI.userValue=f.detail.value??"",A.setValue(W,{value:MI.userValue.toString()}),f.target.value=MI.userValue},formattedValue(f){const{formattedValue:v}=f.detail;MI.formattedValue=v,v!=null&&f.target!==document.activeElement&&(f.target.value=v),A.setValue(W,{formattedValue:v})},selRange(f){f.target.setSelectionRange(...f.detail.selRange)},charLimit:f=>{var DI;const{charLimit:v}=f.detail,{target:RI}=f;if(v===0){RI.removeAttribute("maxLength");return}RI.setAttribute("maxLength",v);let pI=MI.userValue;!pI||pI.length<=v||(pI=pI.slice(0,v),RI.value=MI.userValue=pI,A.setValue(W,{value:pI}),(DI=this.linkService.eventBus)==null||DI.dispatch("dispatcheventinsandbox",{source:this,detail:{id:W,name:"Keystroke",value:pI,willCommit:!0,commitKey:1,selStart:RI.selectionStart,selEnd:RI.selectionEnd}}))}};this._dispatchEventFromSandbox(O,tI)}),L.addEventListener("keydown",tI=>{var v;let O=-1;if(tI.key==="Escape"?O=0:tI.key==="Enter"?O=2:tI.key==="Tab"&&(O=3),O===-1)return;const{value:f}=tI.target;MI.valueOnFocus!==f&&(MI.userValue=f,(v=this.linkService.eventBus)==null||v.dispatch("dispatcheventinsandbox",{source:this,detail:{id:W,name:"Keystroke",value:f,willCommit:!0,commitKey:O,selStart:tI.target.selectionStart,selEnd:tI.target.selectionEnd}}))});const WI=ZI;ZI=null,L.addEventListener("blur",tI=>{var f;const{value:O}=tI.target;MI.userValue=O,this._mouseState.isDown&&MI.valueOnFocus!==O&&((f=this.linkService.eventBus)==null||f.dispatch("dispatcheventinsandbox",{source:this,detail:{id:W,name:"Keystroke",value:O,willCommit:!0,commitKey:1,selStart:tI.target.selectionStart,selEnd:tI.target.selectionEnd}})),WI(tI)}),(S=this.data.actions)!=null&&S.Keystroke&&L.addEventListener("beforeinput",tI=>{var TI;const{data:O,target:f}=tI,{value:v,selectionStart:RI,selectionEnd:pI}=f;let DI=RI,FI=pI;switch(tI.inputType){case"deleteWordBackward":{const vI=v.substring(0,RI).match(/\w*[^\w]*$/);vI&&(DI-=vI[0].length);break}case"deleteWordForward":{const vI=v.substring(RI).match(/^[^\w]*\w*/);vI&&(FI+=vI[0].length);break}case"deleteContentBackward":RI===pI&&(DI-=1);break;case"deleteContentForward":RI===pI&&(FI+=1);break}tI.preventDefault(),(TI=this.linkService.eventBus)==null||TI.dispatch("dispatcheventinsandbox",{source:this,detail:{id:W,name:"Keystroke",value:v,change:O||"",willCommit:!1,selStart:DI,selEnd:FI}})}),this._setEventListeners(L,[["focus","Focus"],["blur","Blur"],["mousedown","Mouse Down"],["mouseenter","Mouse Enter"],["mouseleave","Mouse Exit"],["mouseup","Mouse Up"]],tI=>tI.target.value)}if(ZI&&L.addEventListener("blur",ZI),this.data.comb){const tI=(this.data.rect[2]-this.data.rect[0])/uI;L.classList.add("comb"),L.style.letterSpacing=`calc(${tI}px * var(--scale-factor) - 1ch)`}}else L=document.createElement("div"),L.textContent=this.data.fieldValue,L.style.verticalAlign="middle",L.style.display="table-cell";return this._setTextStyle(L),this._setBackgroundColor(L),this._setDefaultPropertiesFromJS(L),this.container.append(L),this.container}}class Y extends l{constructor(A){super(A,{isRenderable:A.renderForms})}render(){const A=this.annotationStorage,W=this.data,L=W.id;let S=A.getValue(L,{value:W.exportValue===W.fieldValue}).value;typeof S=="string"&&(S=S!=="Off",A.setValue(L,{value:S})),this.container.className="buttonWidgetAnnotation checkBox";const Q=document.createElement("input");return p.add(Q),Q.setAttribute("data-element-id",L),Q.disabled=W.readOnly,this._setRequired(Q,this.data.required),Q.type="checkbox",Q.name=W.fieldName,S&&Q.setAttribute("checked",!0),Q.setAttribute("exportValue",W.exportValue),Q.tabIndex=r,Q.addEventListener("change",lI=>{const{name:uI,checked:MI}=lI.target;for(const ZI of this._getElementsByName(uI,L)){const WI=MI&&ZI.exportValue===W.exportValue;ZI.domElement&&(ZI.domElement.checked=WI),A.setValue(ZI.id,{value:WI})}A.setValue(L,{value:MI})}),Q.addEventListener("resetform",lI=>{const uI=W.defaultFieldValue||"Off";lI.target.checked=uI===W.exportValue}),this.enableScripting&&this.hasJSActions&&(Q.addEventListener("updatefromsandbox",lI=>{const uI={value(MI){MI.target.checked=MI.detail.value!=="Off",A.setValue(L,{value:MI.target.checked})}};this._dispatchEventFromSandbox(uI,lI)}),this._setEventListeners(Q,[["change","Validate"],["change","Action"],["focus","Focus"],["blur","Blur"],["mousedown","Mouse Down"],["mouseenter","Mouse Enter"],["mouseleave","Mouse Exit"],["mouseup","Mouse Up"]],lI=>lI.target.checked)),this._setBackgroundColor(Q),this._setDefaultPropertiesFromJS(Q),this.container.append(Q),this.container}}class a extends l{constructor(A){super(A,{isRenderable:A.renderForms})}render(){this.container.className="buttonWidgetAnnotation radioButton";const A=this.annotationStorage,W=this.data,L=W.id;let S=A.getValue(L,{value:W.fieldValue===W.buttonValue}).value;typeof S=="string"&&(S=S!==W.buttonValue,A.setValue(L,{value:S}));const Q=document.createElement("input");if(p.add(Q),Q.setAttribute("data-element-id",L),Q.disabled=W.readOnly,this._setRequired(Q,this.data.required),Q.type="radio",Q.name=W.fieldName,S&&Q.setAttribute("checked",!0),Q.tabIndex=r,Q.addEventListener("change",lI=>{const{name:uI,checked:MI}=lI.target;for(const ZI of this._getElementsByName(uI,L))A.setValue(ZI.id,{value:!1});A.setValue(L,{value:MI})}),Q.addEventListener("resetform",lI=>{const uI=W.defaultFieldValue;lI.target.checked=uI!=null&&uI===W.buttonValue}),this.enableScripting&&this.hasJSActions){const lI=W.buttonValue;Q.addEventListener("updatefromsandbox",uI=>{const MI={value:ZI=>{const WI=lI===ZI.detail.value;for(const tI of this._getElementsByName(ZI.target.name)){const O=WI&&tI.id===L;tI.domElement&&(tI.domElement.checked=O),A.setValue(tI.id,{value:O})}}};this._dispatchEventFromSandbox(MI,uI)}),this._setEventListeners(Q,[["change","Validate"],["change","Action"],["focus","Focus"],["blur","Blur"],["mousedown","Mouse Down"],["mouseenter","Mouse Enter"],["mouseleave","Mouse Exit"],["mouseup","Mouse Up"]],uI=>uI.target.checked)}return this._setBackgroundColor(Q),this._setDefaultPropertiesFromJS(Q),this.container.append(Q),this.container}}class i extends d{constructor(A){super(A,{ignoreBorder:A.data.hasAppearance})}render(){const A=super.render();A.className="buttonWidgetAnnotation pushButton",this.data.alternativeText&&(A.title=this.data.alternativeText);const W=A.lastChild;return this.enableScripting&&this.hasJSActions&&W&&(this._setDefaultPropertiesFromJS(W),W.addEventListener("updatefromsandbox",L=>{this._dispatchEventFromSandbox({},L)})),A}}class I extends l{constructor(A){super(A,{isRenderable:A.renderForms})}render(){this.container.className="choiceWidgetAnnotation";const A=this.annotationStorage,W=this.data.id,L=A.getValue(W,{value:this.data.fieldValue}),S=document.createElement("select");p.add(S),S.setAttribute("data-element-id",W),S.disabled=this.data.readOnly,this._setRequired(S,this.data.required),S.name=this.data.fieldName,S.tabIndex=r;let Q=this.data.combo&&this.data.options.length>0;this.data.combo||(S.size=this.data.options.length,this.data.multiSelect&&(S.multiple=!0)),S.addEventListener("resetform",ZI=>{const WI=this.data.defaultFieldValue;for(const tI of S.options)tI.selected=tI.value===WI});for(const ZI of this.data.options){const WI=document.createElement("option");WI.textContent=ZI.displayValue,WI.value=ZI.exportValue,L.value.includes(ZI.exportValue)&&(WI.setAttribute("selected",!0),Q=!1),S.append(WI)}let lI=null;if(Q){const ZI=document.createElement("option");ZI.value=" ",ZI.setAttribute("hidden",!0),ZI.setAttribute("selected",!0),S.prepend(ZI),lI=()=>{ZI.remove(),S.removeEventListener("input",lI),lI=null},S.addEventListener("input",lI)}const uI=(ZI,WI)=>{const tI=WI?"value":"textContent",O=ZI.target.options;return ZI.target.multiple?Array.prototype.filter.call(O,f=>f.selected).map(f=>f[tI]):O.selectedIndex===-1?null:O[O.selectedIndex][tI]},MI=ZI=>{const WI=ZI.target.options;return Array.prototype.map.call(WI,tI=>({displayValue:tI.textContent,exportValue:tI.value}))};return this.enableScripting&&this.hasJSActions?(S.addEventListener("updatefromsandbox",ZI=>{const WI={value(tI){lI==null||lI();const O=tI.detail.value,f=new Set(Array.isArray(O)?O:[O]);for(const v of S.options)v.selected=f.has(v.value);A.setValue(W,{value:uI(tI,!0)})},multipleSelection(tI){S.multiple=!0},remove(tI){const O=S.options,f=tI.detail.remove;O[f].selected=!1,S.remove(f),O.length>0&&Array.prototype.findIndex.call(O,RI=>RI.selected)===-1&&(O[0].selected=!0),A.setValue(W,{value:uI(tI,!0),items:MI(tI)})},clear(tI){for(;S.length!==0;)S.remove(0);A.setValue(W,{value:null,items:[]})},insert(tI){const{index:O,displayValue:f,exportValue:v}=tI.detail.insert,RI=S.children[O],pI=document.createElement("option");pI.textContent=f,pI.value=v,RI?RI.before(pI):S.append(pI),A.setValue(W,{value:uI(tI,!0),items:MI(tI)})},items(tI){const{items:O}=tI.detail;for(;S.length!==0;)S.remove(0);for(const f of O){const{displayValue:v,exportValue:RI}=f,pI=document.createElement("option");pI.textContent=v,pI.value=RI,S.append(pI)}S.options.length>0&&(S.options[0].selected=!0),A.setValue(W,{value:uI(tI,!0),items:MI(tI)})},indices(tI){const O=new Set(tI.detail.indices);for(const f of tI.target.options)f.selected=O.has(f.index);A.setValue(W,{value:uI(tI,!0)})},editable(tI){tI.target.disabled=!tI.detail.editable}};this._dispatchEventFromSandbox(WI,ZI)}),S.addEventListener("input",ZI=>{var O;const WI=uI(ZI,!0),tI=uI(ZI,!1);A.setValue(W,{value:WI}),(O=this.linkService.eventBus)==null||O.dispatch("dispatcheventinsandbox",{source:this,detail:{id:W,name:"Keystroke",value:tI,changeEx:WI,willCommit:!0,commitKey:1,keyDown:!1}})}),this._setEventListeners(S,[["focus","Focus"],["blur","Blur"],["mousedown","Mouse Down"],["mouseenter","Mouse Enter"],["mouseleave","Mouse Exit"],["mouseup","Mouse Up"],["input","Action"]],ZI=>ZI.target.checked)):S.addEventListener("input",function(ZI){A.setValue(W,{value:uI(ZI,!0)})}),this.data.combo&&this._setTextStyle(S),this._setBackgroundColor(S),this._setDefaultPropertiesFromJS(S),this.container.append(S),this.container}}class g extends m{constructor(A){var L,S,Q;const W=!!((L=A.data.titleObj)!=null&&L.str||(S=A.data.contentsObj)!=null&&S.str||(Q=A.data.richText)!=null&&Q.str);super(A,{isRenderable:W})}render(){const A=["Line","Square","Circle","PolyLine","Polygon","Ink"];if(this.container.className="popupAnnotation",A.includes(this.data.parentType))return this.container;const W=`[data-annotation-id="${this.data.parentId}"]`,L=this.layer.querySelectorAll(W);if(L.length===0)return this.container;const S=new o({container:this.container,trigger:Array.from(L),color:this.data.color,titleObj:this.data.titleObj,modificationDate:this.data.modificationDate,contentsObj:this.data.contentsObj,richText:this.data.richText}),Q=this.page,lI=h.Util.normalizeRect([this.data.parentRect[0],Q.view[3]-this.data.parentRect[1]+Q.view[1],this.data.parentRect[2],Q.view[3]-this.data.parentRect[3]+Q.view[1]]),uI=lI[0]+this.data.parentRect[2]-this.data.parentRect[0],MI=lI[1],[ZI,WI,tI,O]=this.viewport.viewBox,f=tI-ZI,v=O-WI;return this.container.style.left=`${100*(uI-ZI)/f}%`,this.container.style.top=`${100*(MI-WI)/v}%`,this.container.append(S.render()),this.container}}class o{constructor(A){this.container=A.container,this.trigger=A.trigger,this.color=A.color,this.titleObj=A.titleObj,this.modificationDate=A.modificationDate,this.contentsObj=A.contentsObj,this.richText=A.richText,this.hideWrapper=A.hideWrapper||!1,this.pinned=!1}render(){var uI,MI;const W=document.createElement("div");W.className="popupWrapper",this.hideElement=this.hideWrapper?W:this.container,this.hideElement.hidden=!0;const L=document.createElement("div");L.className="popup";const S=this.color;if(S){const ZI=.7*(255-S[0])+S[0],WI=.7*(255-S[1])+S[1],tI=.7*(255-S[2])+S[2];L.style.backgroundColor=h.Util.makeHexColor(ZI|0,WI|0,tI|0)}const Q=document.createElement("h1");Q.dir=this.titleObj.dir,Q.textContent=this.titleObj.str,L.append(Q);const lI=M.PDFDateString.toDateObject(this.modificationDate);if(lI){const ZI=document.createElement("span");ZI.className="popupDate",ZI.textContent="{{date}}, {{time}}",ZI.dataset.l10nId="annotation_date_string",ZI.dataset.l10nArgs=JSON.stringify({date:lI.toLocaleDateString(),time:lI.toLocaleTimeString()}),L.append(ZI)}if((uI=this.richText)!=null&&uI.str&&(!((MI=this.contentsObj)!=null&&MI.str)||this.contentsObj.str===this.richText.str))T.XfaLayer.render({xfaHtml:this.richText.html,intent:"richText",div:L}),L.lastChild.className="richText popupContent";else{const ZI=this._formatContents(this.contentsObj);L.append(ZI)}Array.isArray(this.trigger)||(this.trigger=[this.trigger]);for(const ZI of this.trigger)ZI.addEventListener("click",this._toggle.bind(this)),ZI.addEventListener("mouseover",this._show.bind(this,!1)),ZI.addEventListener("mouseout",this._hide.bind(this,!1));return L.addEventListener("click",this._hide.bind(this,!0)),W.append(L),W}_formatContents({str:A,dir:W}){const L=document.createElement("p");L.className="popupContent",L.dir=W;const S=A.split(/(?:\r\n?|\n)/);for(let Q=0,lI=S.length;Q<lI;++Q){const uI=S[Q];L.append(document.createTextNode(uI)),Q<lI-1&&L.append(document.createElement("br"))}return L}_toggle(){this.pinned?this._hide(!0):this._show(!0)}_show(A=!1){A&&(this.pinned=!0),this.hideElement.hidden&&(this.hideElement.hidden=!1,this.container.style.zIndex=parseInt(this.container.style.zIndex)+1e3)}_hide(A=!0){A&&(this.pinned=!1),!this.hideElement.hidden&&!this.pinned&&(this.hideElement.hidden=!0,this.container.style.zIndex=parseInt(this.container.style.zIndex)-1e3)}}class X extends m{constructor(A){var L,S,Q;const W=!!(A.data.hasPopup||(L=A.data.titleObj)!=null&&L.str||(S=A.data.contentsObj)!=null&&S.str||(Q=A.data.richText)!=null&&Q.str);super(A,{isRenderable:W,ignoreBorder:!0}),this.textContent=A.data.textContent}render(){if(this.container.className="freeTextAnnotation",this.textContent){const A=document.createElement("div");A.className="annotationTextContent",A.setAttribute("role","comment");for(const W of this.textContent){const L=document.createElement("span");L.textContent=W,A.append(L)}this.container.append(A)}return this.data.hasPopup||this._createPopup(null,this.data),this.container}}class b extends m{constructor(A){var L,S,Q;const W=!!(A.data.hasPopup||(L=A.data.titleObj)!=null&&L.str||(S=A.data.contentsObj)!=null&&S.str||(Q=A.data.richText)!=null&&Q.str);super(A,{isRenderable:W,ignoreBorder:!0})}render(){this.container.className="lineAnnotation";const A=this.data,{width:W,height:L}=j(A.rect),S=this.svgFactory.create(W,L,!0),Q=this.svgFactory.createElement("svg:line");return Q.setAttribute("x1",A.rect[2]-A.lineCoordinates[0]),Q.setAttribute("y1",A.rect[3]-A.lineCoordinates[1]),Q.setAttribute("x2",A.rect[2]-A.lineCoordinates[2]),Q.setAttribute("y2",A.rect[3]-A.lineCoordinates[3]),Q.setAttribute("stroke-width",A.borderStyle.width||1),Q.setAttribute("stroke","transparent"),Q.setAttribute("fill","transparent"),S.append(Q),this.container.append(S),this._createPopup(Q,A),this.container}}class N extends m{constructor(A){var L,S,Q;const W=!!(A.data.hasPopup||(L=A.data.titleObj)!=null&&L.str||(S=A.data.contentsObj)!=null&&S.str||(Q=A.data.richText)!=null&&Q.str);super(A,{isRenderable:W,ignoreBorder:!0})}render(){this.container.className="squareAnnotation";const A=this.data,{width:W,height:L}=j(A.rect),S=this.svgFactory.create(W,L,!0),Q=A.borderStyle.width,lI=this.svgFactory.createElement("svg:rect");return lI.setAttribute("x",Q/2),lI.setAttribute("y",Q/2),lI.setAttribute("width",W-Q),lI.setAttribute("height",L-Q),lI.setAttribute("stroke-width",Q||1),lI.setAttribute("stroke","transparent"),lI.setAttribute("fill","transparent"),S.append(lI),this.container.append(S),this._createPopup(lI,A),this.container}}class F extends m{constructor(A){var L,S,Q;const W=!!(A.data.hasPopup||(L=A.data.titleObj)!=null&&L.str||(S=A.data.contentsObj)!=null&&S.str||(Q=A.data.richText)!=null&&Q.str);super(A,{isRenderable:W,ignoreBorder:!0})}render(){this.container.className="circleAnnotation";const A=this.data,{width:W,height:L}=j(A.rect),S=this.svgFactory.create(W,L,!0),Q=A.borderStyle.width,lI=this.svgFactory.createElement("svg:ellipse");return lI.setAttribute("cx",W/2),lI.setAttribute("cy",L/2),lI.setAttribute("rx",W/2-Q/2),lI.setAttribute("ry",L/2-Q/2),lI.setAttribute("stroke-width",Q||1),lI.setAttribute("stroke","transparent"),lI.setAttribute("fill","transparent"),S.append(lI),this.container.append(S),this._createPopup(lI,A),this.container}}class hI extends m{constructor(A){var L,S,Q;const W=!!(A.data.hasPopup||(L=A.data.titleObj)!=null&&L.str||(S=A.data.contentsObj)!=null&&S.str||(Q=A.data.richText)!=null&&Q.str);super(A,{isRenderable:W,ignoreBorder:!0}),this.containerClassName="polylineAnnotation",this.svgElementName="svg:polyline"}render(){this.container.className=this.containerClassName;const A=this.data,{width:W,height:L}=j(A.rect),S=this.svgFactory.create(W,L,!0);let Q=[];for(const uI of A.vertices){const MI=uI.x-A.rect[0],ZI=A.rect[3]-uI.y;Q.push(MI+","+ZI)}Q=Q.join(" ");const lI=this.svgFactory.createElement(this.svgElementName);return lI.setAttribute("points",Q),lI.setAttribute("stroke-width",A.borderStyle.width||1),lI.setAttribute("stroke","transparent"),lI.setAttribute("fill","transparent"),S.append(lI),this.container.append(S),this._createPopup(lI,A),this.container}}class YI extends hI{constructor(A){super(A),this.containerClassName="polygonAnnotation",this.svgElementName="svg:polygon"}}class nI extends m{constructor(A){var L,S,Q;const W=!!(A.data.hasPopup||(L=A.data.titleObj)!=null&&L.str||(S=A.data.contentsObj)!=null&&S.str||(Q=A.data.richText)!=null&&Q.str);super(A,{isRenderable:W,ignoreBorder:!0})}render(){return this.container.className="caretAnnotation",this.data.hasPopup||this._createPopup(null,this.data),this.container}}class gI extends m{constructor(A){var L,S,Q;const W=!!(A.data.hasPopup||(L=A.data.titleObj)!=null&&L.str||(S=A.data.contentsObj)!=null&&S.str||(Q=A.data.richText)!=null&&Q.str);super(A,{isRenderable:W,ignoreBorder:!0}),this.containerClassName="inkAnnotation",this.svgElementName="svg:polyline"}render(){this.container.className=this.containerClassName;const A=this.data,{width:W,height:L}=j(A.rect),S=this.svgFactory.create(W,L,!0);for(const Q of A.inkLists){let lI=[];for(const MI of Q){const ZI=MI.x-A.rect[0],WI=A.rect[3]-MI.y;lI.push(`${ZI},${WI}`)}lI=lI.join(" ");const uI=this.svgFactory.createElement(this.svgElementName);uI.setAttribute("points",lI),uI.setAttribute("stroke-width",A.borderStyle.width||1),uI.setAttribute("stroke","transparent"),uI.setAttribute("fill","transparent"),this._createPopup(uI,A),S.append(uI)}return this.container.append(S),this.container}}class U extends m{constructor(A){var L,S,Q;const W=!!(A.data.hasPopup||(L=A.data.titleObj)!=null&&L.str||(S=A.data.contentsObj)!=null&&S.str||(Q=A.data.richText)!=null&&Q.str);super(A,{isRenderable:W,ignoreBorder:!0,createQuadrilaterals:!0})}render(){return this.data.hasPopup||this._createPopup(null,this.data),this.quadrilaterals?this._renderQuadrilaterals("highlightAnnotation"):(this.container.className="highlightAnnotation",this.container)}}class II extends m{constructor(A){var L,S,Q;const W=!!(A.data.hasPopup||(L=A.data.titleObj)!=null&&L.str||(S=A.data.contentsObj)!=null&&S.str||(Q=A.data.richText)!=null&&Q.str);super(A,{isRenderable:W,ignoreBorder:!0,createQuadrilaterals:!0})}render(){return this.data.hasPopup||this._createPopup(null,this.data),this.quadrilaterals?this._renderQuadrilaterals("underlineAnnotation"):(this.container.className="underlineAnnotation",this.container)}}class q extends m{constructor(A){var L,S,Q;const W=!!(A.data.hasPopup||(L=A.data.titleObj)!=null&&L.str||(S=A.data.contentsObj)!=null&&S.str||(Q=A.data.richText)!=null&&Q.str);super(A,{isRenderable:W,ignoreBorder:!0,createQuadrilaterals:!0})}render(){return this.data.hasPopup||this._createPopup(null,this.data),this.quadrilaterals?this._renderQuadrilaterals("squigglyAnnotation"):(this.container.className="squigglyAnnotation",this.container)}}class mI extends m{constructor(A){var L,S,Q;const W=!!(A.data.hasPopup||(L=A.data.titleObj)!=null&&L.str||(S=A.data.contentsObj)!=null&&S.str||(Q=A.data.richText)!=null&&Q.str);super(A,{isRenderable:W,ignoreBorder:!0,createQuadrilaterals:!0})}render(){return this.data.hasPopup||this._createPopup(null,this.data),this.quadrilaterals?this._renderQuadrilaterals("strikeoutAnnotation"):(this.container.className="strikeoutAnnotation",this.container)}}class NI extends m{constructor(A){var L,S,Q;const W=!!(A.data.hasPopup||(L=A.data.titleObj)!=null&&L.str||(S=A.data.contentsObj)!=null&&S.str||(Q=A.data.richText)!=null&&Q.str);super(A,{isRenderable:W,ignoreBorder:!0})}render(){return this.container.className="stampAnnotation",this.data.hasPopup||this._createPopup(null,this.data),this.container}}class BI extends m{constructor(A){var S;super(A,{isRenderable:!0});const{filename:W,content:L}=this.data.file;this.filename=(0,M.getFilenameFromUrl)(W),this.content=L,(S=this.linkService.eventBus)==null||S.dispatch("fileattachmentannotation",{source:this,filename:W,content:L})}render(){var W,L;this.container.className="fileAttachmentAnnotation";const A=document.createElement("div");return A.className="popupTriggerArea",A.addEventListener("dblclick",this._download.bind(this)),!this.data.hasPopup&&((W=this.data.titleObj)!=null&&W.str||(L=this.data.contentsObj)!=null&&L.str||this.data.richText)&&this._createPopup(A,this.data),this.container.append(A),this.container}_download(){var A;(A=this.downloadManager)==null||A.openOrDownloadData(this.container,this.content,this.filename)}}const aI=class{static render(A){var uI,MI;const{annotations:W,div:L,viewport:S,accessibilityManager:Q}=A;jI(this,x,xg).call(this,L,S);let lI=0;for(const ZI of W){if(ZI.annotationType!==h.AnnotationType.POPUP){const{width:tI,height:O}=j(ZI.rect);if(tI<=0||O<=0)continue}const WI=D.create({data:ZI,layer:L,page:A.page,viewport:S,linkService:A.linkService,downloadManager:A.downloadManager,imageResourcesPath:A.imageResourcesPath||"",renderForms:A.renderForms!==!1,svgFactory:new M.DOMSVGFactory,annotationStorage:A.annotationStorage||new _.AnnotationStorage,enableScripting:A.enableScripting,hasJSActions:A.hasJSActions,fieldObjects:A.fieldObjects,mouseState:A.mouseState||{isDown:!1}});if(WI.isRenderable){const tI=WI.render();if(ZI.hidden&&(tI.style.visibility="hidden"),Array.isArray(tI))for(const O of tI)O.style.zIndex=lI++,jI(uI=aI,e,jg).call(uI,O,ZI.id,L,Q);else tI.style.zIndex=lI++,WI instanceof g?L.prepend(tI):jI(MI=aI,e,jg).call(MI,tI,ZI.id,L,Q)}}jI(this,P,Qg).call(this,L,A.annotationCanvasMap)}static update(A){const{annotationCanvasMap:W,div:L,viewport:S}=A;jI(this,x,xg).call(this,L,S),jI(this,P,Qg).call(this,L,W),L.hidden=!1}};let J=aI;e=new WeakSet,jg=function(A,W,L,S){const Q=A.firstChild||A;Q.id=`${M.AnnotationPrefix}${W}`,L.append(A),S==null||S.moveElementInDOM(L,A,Q,!1)},x=new WeakSet,xg=function(A,{width:W,height:L,rotation:S}){const{style:Q}=A,lI=S%180!==0,uI=Math.floor(W)+"px",MI=Math.floor(L)+"px";Q.width=lI?MI:uI,Q.height=lI?uI:MI,A.setAttribute("data-main-rotation",S)},P=new WeakSet,Qg=function(A,W){if(W){for(const[L,S]of W){const Q=A.querySelector(`[data-annotation-id="${L}"]`);if(!Q)continue;const{firstChild:lI}=Q;lI?lI.nodeName==="CANVAS"?lI.replaceWith(S):lI.before(S):Q.append(S)}W.clear()}},zI(J,e),zI(J,x),zI(J,P),c.AnnotationLayer=J},(wI,c)=>{Object.defineProperty(c,"__esModule",{value:!0}),c.ColorConverters=void 0;function $(M){return Math.floor(Math.max(0,Math.min(1,M))*255).toString(16).padStart(2,"0")}class h{static CMYK_G([_,z,T,r]){return["G",1-Math.min(1,.3*_+.59*T+.11*z+r)]}static G_CMYK([_]){return["CMYK",0,0,0,1-_]}static G_RGB([_]){return["RGB",_,_,_]}static G_HTML([_]){const z=$(_);return`#${z}${z}${z}`}static RGB_G([_,z,T]){return["G",.3*_+.59*z+.11*T]}static RGB_HTML([_,z,T]){const r=$(_),Z=$(z),p=$(T);return`#${r}${Z}${p}`}static T_HTML(){return"#00000000"}static CMYK_RGB([_,z,T,r]){return["RGB",1-Math.min(1,_+r),1-Math.min(1,T+r),1-Math.min(1,z+r)]}static CMYK_HTML(_){const z=this.CMYK_RGB(_).slice(1);return this.RGB_HTML(z)}static RGB_CMYK([_,z,T]){const r=1-_,Z=1-z,p=1-T,j=Math.min(r,Z,p);return["CMYK",r,Z,p,j]}}c.ColorConverters=h},(wI,c,$)=>{Object.defineProperty(c,"__esModule",{value:!0}),c.XfaLayer=void 0;var h=$(20);class M{static setupStorage(z,T,r,Z,p){const j=Z.getValue(T,{value:null});switch(r.name){case"textarea":if(j.value!==null&&(z.textContent=j.value),p==="print")break;z.addEventListener("input",D=>{Z.setValue(T,{value:D.target.value})});break;case"input":if(r.attributes.type==="radio"||r.attributes.type==="checkbox"){if(j.value===r.attributes.xfaOn?z.setAttribute("checked",!0):j.value===r.attributes.xfaOff&&z.removeAttribute("checked"),p==="print")break;z.addEventListener("change",D=>{Z.setValue(T,{value:D.target.checked?D.target.getAttribute("xfaOn"):D.target.getAttribute("xfaOff")})})}else{if(j.value!==null&&z.setAttribute("value",j.value),p==="print")break;z.addEventListener("input",D=>{Z.setValue(T,{value:D.target.value})})}break;case"select":if(j.value!==null)for(const D of r.children)D.attributes.value===j.value&&(D.attributes.selected=!0);z.addEventListener("input",D=>{const m=D.target.options,d=m.selectedIndex===-1?"":m[m.selectedIndex].value;Z.setValue(T,{value:d})});break}}static setAttributes({html:z,element:T,storage:r=null,intent:Z,linkService:p}){const{attributes:j}=T,D=z instanceof HTMLAnchorElement;j.type==="radio"&&(j.name=`${j.name}-${Z}`);for(const[m,d]of Object.entries(j))if(d!=null)switch(m){case"class":d.length&&z.setAttribute(m,d.join(" "));break;case"dataId":break;case"id":z.setAttribute("data-element-id",d);break;case"style":Object.assign(z.style,d);break;case"textContent":z.textContent=d;break;default:(!D||m!=="href"&&m!=="newWindow")&&z.setAttribute(m,d)}D&&p.addLinkAttributes(z,j.href,j.newWindow),r&&j.dataId&&this.setupStorage(z,j.dataId,T,r)}static render(z){var C;const T=z.annotationStorage,r=z.linkService,Z=z.xfaHtml,p=z.intent||"display",j=document.createElement(Z.name);Z.attributes&&this.setAttributes({html:j,element:Z,intent:p,linkService:r});const D=[[Z,-1,j]],m=z.div;if(m.append(j),z.viewport){const l=`matrix(${z.viewport.transform.join(",")})`;m.style.transform=l}p!=="richText"&&m.setAttribute("class","xfaLayer xfaFont");const d=[];for(;D.length>0;){const[l,B,Y]=D.at(-1);if(B+1===l.children.length){D.pop();continue}const a=l.children[++D.at(-1)[1]];if(a===null)continue;const{name:i}=a;if(i==="#text"){const g=document.createTextNode(a.value);d.push(g),Y.append(g);continue}let I;if((C=a==null?void 0:a.attributes)!=null&&C.xmlns?I=document.createElementNS(a.attributes.xmlns,i):I=document.createElement(i),Y.append(I),a.attributes&&this.setAttributes({html:I,element:a,storage:T,intent:p,linkService:r}),a.children&&a.children.length>0)D.push([a,-1,I]);else if(a.value){const g=document.createTextNode(a.value);h.XfaText.shouldBuildText(i)&&d.push(g),I.append(g)}}for(const l of m.querySelectorAll(".xfaNonInteractive input, .xfaNonInteractive textarea"))l.setAttribute("readOnly",!0);return{textDivs:d}}static update(z){const T=`matrix(${z.viewport.transform.join(",")})`;z.div.style.transform=T,z.div.hidden=!1}}c.XfaLayer=M},(wI,c,$)=>{Object.defineProperty(c,"__esModule",{value:!0}),c.TextLayerRenderTask=void 0,c.renderTextLayer=Y;var h=$(1),M=$(8);const _=1e5,z=30,T=.8,r=new Map,Z=/^\s+$/g;function p(a,i){const I=r.get(a);if(I)return I;i.save(),i.font=`${z}px ${a}`;const g=i.measureText("");let o=g.fontBoundingBoxAscent,X=Math.abs(g.fontBoundingBoxDescent);if(o){i.restore();const N=o/(o+X);return r.set(a,N),N}i.strokeStyle="red",i.clearRect(0,0,z,z),i.strokeText("g",0,0);let b=i.getImageData(0,0,z,z).data;X=0;for(let N=b.length-1-3;N>=0;N-=4)if(b[N]>0){X=Math.ceil(N/4/z);break}i.clearRect(0,0,z,z),i.strokeText("A",0,z),b=i.getImageData(0,0,z,z).data,o=0;for(let N=0,F=b.length;N<F;N+=4)if(b[N]>0){o=z-Math.floor(N/4/z);break}if(i.restore(),o){const N=o/(o+X);return r.set(a,N),N}return r.set(a,T),T}function j(a,i,I,g){const o=document.createElement("span"),X=a._enhanceTextSelection?{angle:0,canvasWidth:0,hasText:i.str!=="",hasEOL:i.hasEOL,originalTransform:null,paddingBottom:0,paddingLeft:0,paddingRight:0,paddingTop:0,scale:1,fontSize:0}:{angle:0,canvasWidth:0,hasText:i.str!=="",hasEOL:i.hasEOL,fontSize:0};a._textDivs.push(o);const b=h.Util.transform(a._viewport.transform,i.transform);let N=Math.atan2(b[1],b[0]);const F=I[i.fontName];F.vertical&&(N+=Math.PI/2);const hI=Math.hypot(b[2],b[3]),YI=hI*p(F.fontFamily,g);let nI,gI;N===0?(nI=b[4],gI=b[5]-YI):(nI=b[4]+YI*Math.sin(N),gI=b[5]-YI*Math.cos(N)),o.style.left=`${nI}px`,o.style.top=`${gI}px`,o.style.fontSize=`${hI}px`,o.style.fontFamily=F.fontFamily,X.fontSize=hI,o.setAttribute("role","presentation"),o.textContent=i.str,o.dir=i.dir,a._fontInspectorEnabled&&(o.dataset.fontName=i.fontName),N!==0&&(X.angle=N*(180/Math.PI));let U=!1;if(i.str.length>1||a._enhanceTextSelection&&Z.test(i.str))U=!0;else if(i.str!==" "&&i.transform[0]!==i.transform[3]){const II=Math.abs(i.transform[0]),q=Math.abs(i.transform[3]);II!==q&&Math.max(II,q)/Math.min(II,q)>1.5&&(U=!0)}if(U&&(F.vertical?X.canvasWidth=i.height*a._viewport.scale:X.canvasWidth=i.width*a._viewport.scale),a._textDivProperties.set(o,X),a._textContentStream&&a._layoutText(o),a._enhanceTextSelection&&X.hasText){let II=1,q=0;N!==0&&(II=Math.cos(N),q=Math.sin(N));const mI=(F.vertical?i.height:i.width)*a._viewport.scale,NI=hI;let BI,J;N!==0?(BI=[II,q,-q,II,nI,gI],J=h.Util.getAxialAlignedBoundingBox([0,0,mI,NI],BI)):J=[nI,gI,nI+mI,gI+NI],a._bounds.push({left:J[0],top:J[1],right:J[2],bottom:J[3],div:o,size:[mI,NI],m:BI})}}function D(a){if(a._canceled)return;const i=a._textDivs,I=a._capability,g=i.length;if(g>_){a._renderingDone=!0,I.resolve();return}if(!a._textContentStream)for(let o=0;o<g;o++)a._layoutText(i[o]);a._renderingDone=!0,I.resolve()}function m(a,i,I){let g=0;for(let o=0;o<I;o++){const X=a[i++];X>0&&(g=g?Math.min(X,g):X)}return g}function d(a){const i=a._bounds,I=a._viewport,g=C(I.width,I.height,i);for(let o=0;o<g.length;o++){const X=i[o].div,b=a._textDivProperties.get(X);if(b.angle===0){b.paddingLeft=i[o].left-g[o].left,b.paddingTop=i[o].top-g[o].top,b.paddingRight=g[o].right-i[o].right,b.paddingBottom=g[o].bottom-i[o].bottom,a._textDivProperties.set(X,b);continue}const N=g[o],F=i[o],hI=F.m,YI=hI[0],nI=hI[1],gI=[[0,0],[0,F.size[1]],[F.size[0],0],F.size],U=new Float64Array(64);for(let q=0,mI=gI.length;q<mI;q++){const NI=h.Util.applyTransform(gI[q],hI);U[q+0]=YI&&(N.left-NI[0])/YI,U[q+4]=nI&&(N.top-NI[1])/nI,U[q+8]=YI&&(N.right-NI[0])/YI,U[q+12]=nI&&(N.bottom-NI[1])/nI,U[q+16]=nI&&(N.left-NI[0])/-nI,U[q+20]=YI&&(N.top-NI[1])/YI,U[q+24]=nI&&(N.right-NI[0])/-nI,U[q+28]=YI&&(N.bottom-NI[1])/YI,U[q+32]=YI&&(N.left-NI[0])/-YI,U[q+36]=nI&&(N.top-NI[1])/-nI,U[q+40]=YI&&(N.right-NI[0])/-YI,U[q+44]=nI&&(N.bottom-NI[1])/-nI,U[q+48]=nI&&(N.left-NI[0])/nI,U[q+52]=YI&&(N.top-NI[1])/-YI,U[q+56]=nI&&(N.right-NI[0])/nI,U[q+60]=YI&&(N.bottom-NI[1])/-YI}const II=1+Math.min(Math.abs(YI),Math.abs(nI));b.paddingLeft=m(U,32,16)/II,b.paddingTop=m(U,48,16)/II,b.paddingRight=m(U,0,16)/II,b.paddingBottom=m(U,16,16)/II,a._textDivProperties.set(X,b)}}function C(a,i,I){const g=I.map(function(X,b){return{x1:X.left,y1:X.top,x2:X.right,y2:X.bottom,index:b,x1New:void 0,x2New:void 0}});l(a,g);const o=new Array(I.length);for(const X of g){const b=X.index;o[b]={left:X.x1New,top:0,right:X.x2New,bottom:0}}I.map(function(X,b){const N=o[b],F=g[b];F.x1=X.top,F.y1=a-N.right,F.x2=X.bottom,F.y2=a-N.left,F.index=b,F.x1New=void 0,F.x2New=void 0}),l(i,g);for(const X of g){const b=X.index;o[b].top=X.x1New,o[b].bottom=X.x2New}return o}function l(a,i){i.sort(function(o,X){return o.x1-X.x1||o.index-X.index});const g=[{start:-1/0,end:1/0,boundary:{x1:-1/0,y1:-1/0,x2:0,y2:1/0,index:-1,x1New:0,x2New:0}}];for(const o of i){let X=0;for(;X<g.length&&g[X].end<=o.y1;)X++;let b=g.length-1;for(;b>=0&&g[b].start>=o.y2;)b--;let N,F,hI,YI,nI=-1/0;for(hI=X;hI<=b;hI++){N=g[hI],F=N.boundary;let II;F.x2>o.x1?II=F.index>o.index?F.x1New:o.x1:F.x2New===void 0?II=(F.x2+o.x1)/2:II=F.x2New,II>nI&&(nI=II)}for(o.x1New=nI,hI=X;hI<=b;hI++)N=g[hI],F=N.boundary,F.x2New===void 0?F.x2>o.x1?F.index>o.index&&(F.x2New=F.x2):F.x2New=nI:F.x2New>nI&&(F.x2New=Math.max(nI,F.x2));const gI=[];let U=null;for(hI=X;hI<=b;hI++){N=g[hI],F=N.boundary;const II=F.x2>o.x2?F:o;U===II?gI.at(-1).end=N.end:(gI.push({start:N.start,end:N.end,boundary:II}),U=II)}for(g[X].start<o.y1&&(gI[0].start=o.y1,gI.unshift({start:g[X].start,end:o.y1,boundary:g[X].boundary})),o.y2<g[b].end&&(gI.at(-1).end=o.y2,gI.push({start:o.y2,end:g[b].end,boundary:g[b].boundary})),hI=X;hI<=b;hI++){if(N=g[hI],F=N.boundary,F.x2New!==void 0)continue;let II=!1;for(YI=X-1;!II&&YI>=0&&g[YI].start>=F.y1;YI--)II=g[YI].boundary===F;for(YI=b+1;!II&&YI<g.length&&g[YI].end<=F.y2;YI++)II=g[YI].boundary===F;for(YI=0;!II&&YI<gI.length;YI++)II=gI[YI].boundary===F;II||(F.x2New=nI)}Array.prototype.splice.apply(g,[X,b-X+1,...gI])}for(const o of g){const X=o.boundary;X.x2New===void 0&&(X.x2New=Math.max(a,X.x2))}}class B{constructor({textContent:i,textContentStream:I,container:g,viewport:o,textDivs:X,textContentItemsStr:b,enhanceTextSelection:N}){var F;N&&(0,M.deprecated)("The `enhanceTextSelection` functionality will be removed in the future."),this._textContent=i,this._textContentStream=I,this._container=g,this._document=g.ownerDocument,this._viewport=o,this._textDivs=X||[],this._textContentItemsStr=b||[],this._enhanceTextSelection=!!N,this._fontInspectorEnabled=!!((F=globalThis.FontInspector)!=null&&F.enabled),this._reader=null,this._layoutTextLastFontSize=null,this._layoutTextLastFontFamily=null,this._layoutTextCtx=null,this._textDivProperties=new WeakMap,this._renderingDone=!1,this._canceled=!1,this._capability=(0,h.createPromiseCapability)(),this._renderTimer=null,this._bounds=[],this._devicePixelRatio=globalThis.devicePixelRatio||1,this._capability.promise.finally(()=>{this._enhanceTextSelection||(this._textDivProperties=null),this._layoutTextCtx&&(this._layoutTextCtx.canvas.width=0,this._layoutTextCtx.canvas.height=0,this._layoutTextCtx=null)}).catch(()=>{})}get promise(){return this._capability.promise}cancel(){this._canceled=!0,this._reader&&(this._reader.cancel(new h.AbortException("TextLayer task cancelled.")).catch(()=>{}),this._reader=null),this._renderTimer!==null&&(clearTimeout(this._renderTimer),this._renderTimer=null),this._capability.reject(new Error("TextLayer task cancelled."))}_processItems(i,I){for(let g=0,o=i.length;g<o;g++){if(i[g].str===void 0){if(i[g].type==="beginMarkedContentProps"||i[g].type==="beginMarkedContent"){const X=this._container;this._container=document.createElement("span"),this._container.classList.add("markedContent"),i[g].id!==null&&this._container.setAttribute("id",`${i[g].id}`),X.append(this._container)}else i[g].type==="endMarkedContent"&&(this._container=this._container.parentNode);continue}this._textContentItemsStr.push(i[g].str),j(this,i[g],I,this._layoutTextCtx)}}_layoutText(i){const I=this._textDivProperties.get(i);let g="";if(I.canvasWidth!==0&&I.hasText){const{fontFamily:o}=i.style,{fontSize:X}=I;(X!==this._layoutTextLastFontSize||o!==this._layoutTextLastFontFamily)&&(this._layoutTextCtx.font=`${X*this._devicePixelRatio}px ${o}`,this._layoutTextLastFontSize=X,this._layoutTextLastFontFamily=o);const{width:b}=this._layoutTextCtx.measureText(i.textContent);if(b>0){const N=this._devicePixelRatio*I.canvasWidth/b;this._enhanceTextSelection&&(I.scale=N),g=`scaleX(${N})`}}if(I.angle!==0&&(g=`rotate(${I.angle}deg) ${g}`),g.length>0&&(this._enhanceTextSelection&&(I.originalTransform=g),i.style.transform=g),I.hasText&&this._container.append(i),I.hasEOL){const o=document.createElement("br");o.setAttribute("role","presentation"),this._container.append(o)}}_render(i=0){const I=(0,h.createPromiseCapability)();let g=Object.create(null);const o=this._document.createElement("canvas");if(o.height=o.width=z,this._layoutTextCtx=o.getContext("2d",{alpha:!1}),this._textContent){const X=this._textContent.items,b=this._textContent.styles;this._processItems(X,b),I.resolve()}else if(this._textContentStream){const X=()=>{this._reader.read().then(({value:b,done:N})=>{if(N){I.resolve();return}Object.assign(g,b.styles),this._processItems(b.items,g),X()},I.reject)};this._reader=this._textContentStream.getReader(),X()}else throw new Error('Neither "textContent" nor "textContentStream" parameters specified.');I.promise.then(()=>{g=null,i?this._renderTimer=setTimeout(()=>{D(this),this._renderTimer=null},i):D(this)},this._capability.reject)}expandTextDivs(i=!1){if(!this._enhanceTextSelection||!this._renderingDone)return;this._bounds!==null&&(d(this),this._bounds=null);const I=[],g=[];for(let o=0,X=this._textDivs.length;o<X;o++){const b=this._textDivs[o],N=this._textDivProperties.get(b);N.hasText&&(i?(I.length=0,g.length=0,N.originalTransform&&I.push(N.originalTransform),N.paddingTop>0?(g.push(`${N.paddingTop}px`),I.push(`translateY(${-N.paddingTop}px)`)):g.push(0),N.paddingRight>0?g.push(`${N.paddingRight/N.scale}px`):g.push(0),N.paddingBottom>0?g.push(`${N.paddingBottom}px`):g.push(0),N.paddingLeft>0?(g.push(`${N.paddingLeft/N.scale}px`),I.push(`translateX(${-N.paddingLeft/N.scale}px)`)):g.push(0),b.style.padding=g.join(" "),I.length&&(b.style.transform=I.join(" "))):(b.style.padding=null,b.style.transform=N.originalTransform))}}}c.TextLayerRenderTask=B;function Y(a){const i=new B({textContent:a.textContent,textContentStream:a.textContentStream,container:a.container,viewport:a.viewport,textDivs:a.textDivs,textContentItemsStr:a.textContentItemsStr,enhanceTextSelection:a.enhanceTextSelection});return i._render(a.timeout),i}},(wI,c,$)=>{Object.defineProperty(c,"__esModule",{value:!0}),c.SVGGraphics=void 0;var h=$(8),M=$(1),_=$(3);let z=class{constructor(){(0,M.unreachable)("Not implemented: SVGGraphics")}};c.SVGGraphics=z;{let C=function(I){let g=[];const o=[];for(const X of I){if(X.fn==="save"){g.push({fnId:92,fn:"group",items:[]}),o.push(g),g=g.at(-1).items;continue}X.fn==="restore"?g=o.pop():g.push(X)}return g},l=function(I){if(Number.isInteger(I))return I.toString();const g=I.toFixed(10);let o=g.length-1;if(g[o]!=="0")return g;do o--;while(g[o]==="0");return g.substring(0,g[o]==="."?o:o+1)},B=function(I){if(I[4]===0&&I[5]===0){if(I[1]===0&&I[2]===0)return I[0]===1&&I[3]===1?"":`scale(${l(I[0])} ${l(I[3])})`;if(I[0]===I[3]&&I[1]===-I[2]){const g=Math.acos(I[0])*180/Math.PI;return`rotate(${l(g)})`}}else if(I[0]===1&&I[1]===0&&I[2]===0&&I[3]===1)return`translate(${l(I[4])} ${l(I[5])})`;return`matrix(${l(I[0])} ${l(I[1])} ${l(I[2])} ${l(I[3])} ${l(I[4])} ${l(I[5])})`};const T={fontStyle:"normal",fontWeight:"normal",fillColor:"#000000"},r="http://www.w3.org/XML/1998/namespace",Z="http://www.w3.org/1999/xlink",p=["butt","round","square"],j=["miter","round","bevel"],D=function(I,g="",o=!1){if(URL.createObjectURL&&typeof Blob<"u"&&!o)return URL.createObjectURL(new Blob([I],{type:g}));const X="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=";let b=`data:${g};base64,`;for(let N=0,F=I.length;N<F;N+=3){const hI=I[N]&255,YI=I[N+1]&255,nI=I[N+2]&255,gI=hI>>2,U=(hI&3)<<4|YI>>4,II=N+1<F?(YI&15)<<2|nI>>6:64,q=N+2<F?nI&63:64;b+=X[gI]+X[U]+X[II]+X[q]}return b},m=function(){const I=new Uint8Array([137,80,78,71,13,10,26,10]),g=12,o=new Int32Array(256);for(let nI=0;nI<256;nI++){let gI=nI;for(let U=0;U<8;U++)gI&1?gI=3988292384^gI>>1&2147483647:gI=gI>>1&2147483647;o[nI]=gI}function X(nI,gI,U){let II=-1;for(let q=gI;q<U;q++){const mI=(II^nI[q])&255,NI=o[mI];II=II>>>8^NI}return II^-1}function b(nI,gI,U,II){let q=II;const mI=gI.length;U[q]=mI>>24&255,U[q+1]=mI>>16&255,U[q+2]=mI>>8&255,U[q+3]=mI&255,q+=4,U[q]=nI.charCodeAt(0)&255,U[q+1]=nI.charCodeAt(1)&255,U[q+2]=nI.charCodeAt(2)&255,U[q+3]=nI.charCodeAt(3)&255,q+=4,U.set(gI,q),q+=gI.length;const NI=X(U,II+4,q);U[q]=NI>>24&255,U[q+1]=NI>>16&255,U[q+2]=NI>>8&255,U[q+3]=NI&255}function N(nI,gI,U){let II=1,q=0;for(let mI=gI;mI<U;++mI)II=(II+(nI[mI]&255))%65521,q=(q+II)%65521;return q<<16|II}function F(nI){if(!_.isNodeJS)return hI(nI);try{let gI;parseInt(process.versions.node)>=8?gI=nI:gI=Buffer.from(nI);const U=require$$5$1.deflateSync(gI,{level:9});return U instanceof Uint8Array?U:new Uint8Array(U)}catch(gI){(0,M.warn)("Not compressing PNG because zlib.deflateSync is unavailable: "+gI)}return hI(nI)}function hI(nI){let gI=nI.length;const U=65535,II=Math.ceil(gI/U),q=new Uint8Array(2+gI+II*5+4);let mI=0;q[mI++]=120,q[mI++]=156;let NI=0;for(;gI>U;)q[mI++]=0,q[mI++]=255,q[mI++]=255,q[mI++]=0,q[mI++]=0,q.set(nI.subarray(NI,NI+U),mI),mI+=U,NI+=U,gI-=U;q[mI++]=1,q[mI++]=gI&255,q[mI++]=gI>>8&255,q[mI++]=~gI&65535&255,q[mI++]=(~gI&65535)>>8&255,q.set(nI.subarray(NI),mI),mI+=nI.length-NI;const BI=N(nI,0,nI.length);return q[mI++]=BI>>24&255,q[mI++]=BI>>16&255,q[mI++]=BI>>8&255,q[mI++]=BI&255,q}function YI(nI,gI,U,II){const q=nI.width,mI=nI.height;let NI,BI,J;const e=nI.data;switch(gI){case M.ImageKind.GRAYSCALE_1BPP:BI=0,NI=1,J=q+7>>3;break;case M.ImageKind.RGB_24BPP:BI=2,NI=8,J=q*3;break;case M.ImageKind.RGBA_32BPP:BI=6,NI=8,J=q*4;break;default:throw new Error("invalid format")}const w=new Uint8Array((1+J)*mI);let x=0,E=0;for(let W=0;W<mI;++W)w[x++]=0,w.set(e.subarray(E,E+J),x),E+=J,x+=J;if(gI===M.ImageKind.GRAYSCALE_1BPP&&II){x=0;for(let W=0;W<mI;W++){x++;for(let L=0;L<J;L++)w[x++]^=255}}const P=new Uint8Array([q>>24&255,q>>16&255,q>>8&255,q&255,mI>>24&255,mI>>16&255,mI>>8&255,mI&255,NI,BI,0,0,0]),iI=F(w),aI=I.length+g*3+P.length+iI.length,eI=new Uint8Array(aI);let A=0;return eI.set(I,A),A+=I.length,b("IHDR",P,eI,A),A+=g+P.length,b("IDATA",iI,eI,A),A+=g+iI.length,b("IEND",new Uint8Array(0),eI,A),D(eI,"image/png",U)}return function(gI,U,II){const q=gI.kind===void 0?M.ImageKind.GRAYSCALE_1BPP:gI.kind;return YI(gI,q,U,II)}}();class d{constructor(){this.fontSizeScale=1,this.fontWeight=T.fontWeight,this.fontSize=0,this.textMatrix=M.IDENTITY_MATRIX,this.fontMatrix=M.FONT_IDENTITY_MATRIX,this.leading=0,this.textRenderingMode=M.TextRenderingMode.FILL,this.textMatrixScale=1,this.x=0,this.y=0,this.lineX=0,this.lineY=0,this.charSpacing=0,this.wordSpacing=0,this.textHScale=1,this.textRise=0,this.fillColor=T.fillColor,this.strokeColor="#000000",this.fillAlpha=1,this.strokeAlpha=1,this.lineWidth=1,this.lineJoin="",this.lineCap="",this.miterLimit=0,this.dashArray=[],this.dashPhase=0,this.dependencies=[],this.activeClipUrl=null,this.clipGroup=null,this.maskId=""}clone(){return Object.create(this)}setCurrentPoint(g,o){this.x=g,this.y=o}}let Y=0,a=0,i=0;c.SVGGraphics=z=class{constructor(I,g,o=!1){(0,h.deprecated)("The SVG back-end is no longer maintained and *may* be removed in the future."),this.svgFactory=new h.DOMSVGFactory,this.current=new d,this.transformMatrix=M.IDENTITY_MATRIX,this.transformStack=[],this.extraStack=[],this.commonObjs=I,this.objs=g,this.pendingClip=null,this.pendingEOFill=!1,this.embedFonts=!1,this.embeddedFonts=Object.create(null),this.cssStyle=null,this.forceDataSchema=!!o,this._operatorIdMapping=[];for(const X in M.OPS)this._operatorIdMapping[M.OPS[X]]=X}save(){this.transformStack.push(this.transformMatrix);const I=this.current;this.extraStack.push(I),this.current=I.clone()}restore(){this.transformMatrix=this.transformStack.pop(),this.current=this.extraStack.pop(),this.pendingClip=null,this.tgrp=null}group(I){this.save(),this.executeOpTree(I),this.restore()}loadDependencies(I){const g=I.fnArray,o=I.argsArray;for(let X=0,b=g.length;X<b;X++)if(g[X]===M.OPS.dependency)for(const N of o[X]){const F=N.startsWith("g_")?this.commonObjs:this.objs,hI=new Promise(YI=>{F.get(N,YI)});this.current.dependencies.push(hI)}return Promise.all(this.current.dependencies)}transform(I,g,o,X,b,N){const F=[I,g,o,X,b,N];this.transformMatrix=M.Util.transform(this.transformMatrix,F),this.tgrp=null}getSVG(I,g){this.viewport=g;const o=this._initialize(g);return this.loadDependencies(I).then(()=>(this.transformMatrix=M.IDENTITY_MATRIX,this.executeOpTree(this.convertOpList(I)),o))}convertOpList(I){const g=this._operatorIdMapping,o=I.argsArray,X=I.fnArray,b=[];for(let N=0,F=X.length;N<F;N++){const hI=X[N];b.push({fnId:hI,fn:g[hI],args:o[N]})}return C(b)}executeOpTree(I){for(const g of I){const o=g.fn,X=g.fnId,b=g.args;switch(X|0){case M.OPS.beginText:this.beginText();break;case M.OPS.dependency:break;case M.OPS.setLeading:this.setLeading(b);break;case M.OPS.setLeadingMoveText:this.setLeadingMoveText(b[0],b[1]);break;case M.OPS.setFont:this.setFont(b);break;case M.OPS.showText:this.showText(b[0]);break;case M.OPS.showSpacedText:this.showText(b[0]);break;case M.OPS.endText:this.endText();break;case M.OPS.moveText:this.moveText(b[0],b[1]);break;case M.OPS.setCharSpacing:this.setCharSpacing(b[0]);break;case M.OPS.setWordSpacing:this.setWordSpacing(b[0]);break;case M.OPS.setHScale:this.setHScale(b[0]);break;case M.OPS.setTextMatrix:this.setTextMatrix(b[0],b[1],b[2],b[3],b[4],b[5]);break;case M.OPS.setTextRise:this.setTextRise(b[0]);break;case M.OPS.setTextRenderingMode:this.setTextRenderingMode(b[0]);break;case M.OPS.setLineWidth:this.setLineWidth(b[0]);break;case M.OPS.setLineJoin:this.setLineJoin(b[0]);break;case M.OPS.setLineCap:this.setLineCap(b[0]);break;case M.OPS.setMiterLimit:this.setMiterLimit(b[0]);break;case M.OPS.setFillRGBColor:this.setFillRGBColor(b[0],b[1],b[2]);break;case M.OPS.setStrokeRGBColor:this.setStrokeRGBColor(b[0],b[1],b[2]);break;case M.OPS.setStrokeColorN:this.setStrokeColorN(b);break;case M.OPS.setFillColorN:this.setFillColorN(b);break;case M.OPS.shadingFill:this.shadingFill(b[0]);break;case M.OPS.setDash:this.setDash(b[0],b[1]);break;case M.OPS.setRenderingIntent:this.setRenderingIntent(b[0]);break;case M.OPS.setFlatness:this.setFlatness(b[0]);break;case M.OPS.setGState:this.setGState(b[0]);break;case M.OPS.fill:this.fill();break;case M.OPS.eoFill:this.eoFill();break;case M.OPS.stroke:this.stroke();break;case M.OPS.fillStroke:this.fillStroke();break;case M.OPS.eoFillStroke:this.eoFillStroke();break;case M.OPS.clip:this.clip("nonzero");break;case M.OPS.eoClip:this.clip("evenodd");break;case M.OPS.paintSolidColorImageMask:this.paintSolidColorImageMask();break;case M.OPS.paintImageXObject:this.paintImageXObject(b[0]);break;case M.OPS.paintInlineImageXObject:this.paintInlineImageXObject(b[0]);break;case M.OPS.paintImageMaskXObject:this.paintImageMaskXObject(b[0]);break;case M.OPS.paintFormXObjectBegin:this.paintFormXObjectBegin(b[0],b[1]);break;case M.OPS.paintFormXObjectEnd:this.paintFormXObjectEnd();break;case M.OPS.closePath:this.closePath();break;case M.OPS.closeStroke:this.closeStroke();break;case M.OPS.closeFillStroke:this.closeFillStroke();break;case M.OPS.closeEOFillStroke:this.closeEOFillStroke();break;case M.OPS.nextLine:this.nextLine();break;case M.OPS.transform:this.transform(b[0],b[1],b[2],b[3],b[4],b[5]);break;case M.OPS.constructPath:this.constructPath(b[0],b[1]);break;case M.OPS.endPath:this.endPath();break;case 92:this.group(g.items);break;default:(0,M.warn)(`Unimplemented operator ${o}`);break}}}setWordSpacing(I){this.current.wordSpacing=I}setCharSpacing(I){this.current.charSpacing=I}nextLine(){this.moveText(0,this.current.leading)}setTextMatrix(I,g,o,X,b,N){const F=this.current;F.textMatrix=F.lineMatrix=[I,g,o,X,b,N],F.textMatrixScale=Math.hypot(I,g),F.x=F.lineX=0,F.y=F.lineY=0,F.xcoords=[],F.ycoords=[],F.tspan=this.svgFactory.createElement("svg:tspan"),F.tspan.setAttributeNS(null,"font-family",F.fontFamily),F.tspan.setAttributeNS(null,"font-size",`${l(F.fontSize)}px`),F.tspan.setAttributeNS(null,"y",l(-F.y)),F.txtElement=this.svgFactory.createElement("svg:text"),F.txtElement.append(F.tspan)}beginText(){const I=this.current;I.x=I.lineX=0,I.y=I.lineY=0,I.textMatrix=M.IDENTITY_MATRIX,I.lineMatrix=M.IDENTITY_MATRIX,I.textMatrixScale=1,I.tspan=this.svgFactory.createElement("svg:tspan"),I.txtElement=this.svgFactory.createElement("svg:text"),I.txtgrp=this.svgFactory.createElement("svg:g"),I.xcoords=[],I.ycoords=[]}moveText(I,g){const o=this.current;o.x=o.lineX+=I,o.y=o.lineY+=g,o.xcoords=[],o.ycoords=[],o.tspan=this.svgFactory.createElement("svg:tspan"),o.tspan.setAttributeNS(null,"font-family",o.fontFamily),o.tspan.setAttributeNS(null,"font-size",`${l(o.fontSize)}px`),o.tspan.setAttributeNS(null,"y",l(-o.y))}showText(I){const g=this.current,o=g.font,X=g.fontSize;if(X===0)return;const b=g.fontSizeScale,N=g.charSpacing,F=g.wordSpacing,hI=g.fontDirection,YI=g.textHScale*hI,nI=o.vertical,gI=nI?1:-1,U=o.defaultVMetrics,II=X*g.fontMatrix[0];let q=0;for(const BI of I){if(BI===null){q+=hI*F;continue}else if(typeof BI=="number"){q+=gI*BI*X/1e3;continue}const J=(BI.isSpace?F:0)+N,e=BI.fontChar;let w,x,E=BI.width;if(nI){let iI;const aI=BI.vmetric||U;iI=BI.vmetric?aI[1]:E*.5,iI=-iI*II;const eI=aI[2]*II;E=aI?-aI[0]:E,w=iI/b,x=(q+eI)/b}else w=q/b,x=0;(BI.isInFont||o.missingFile)&&(g.xcoords.push(g.x+w),nI&&g.ycoords.push(-g.y+x),g.tspan.textContent+=e);let P;nI?P=E*II-J*hI:P=E*II+J*hI,q+=P}g.tspan.setAttributeNS(null,"x",g.xcoords.map(l).join(" ")),nI?g.tspan.setAttributeNS(null,"y",g.ycoords.map(l).join(" ")):g.tspan.setAttributeNS(null,"y",l(-g.y)),nI?g.y-=q:g.x+=q*YI,g.tspan.setAttributeNS(null,"font-family",g.fontFamily),g.tspan.setAttributeNS(null,"font-size",`${l(g.fontSize)}px`),g.fontStyle!==T.fontStyle&&g.tspan.setAttributeNS(null,"font-style",g.fontStyle),g.fontWeight!==T.fontWeight&&g.tspan.setAttributeNS(null,"font-weight",g.fontWeight);const mI=g.textRenderingMode&M.TextRenderingMode.FILL_STROKE_MASK;if(mI===M.TextRenderingMode.FILL||mI===M.TextRenderingMode.FILL_STROKE?(g.fillColor!==T.fillColor&&g.tspan.setAttributeNS(null,"fill",g.fillColor),g.fillAlpha<1&&g.tspan.setAttributeNS(null,"fill-opacity",g.fillAlpha)):g.textRenderingMode===M.TextRenderingMode.ADD_TO_PATH?g.tspan.setAttributeNS(null,"fill","transparent"):g.tspan.setAttributeNS(null,"fill","none"),mI===M.TextRenderingMode.STROKE||mI===M.TextRenderingMode.FILL_STROKE){const BI=1/(g.textMatrixScale||1);this._setStrokeAttributes(g.tspan,BI)}let NI=g.textMatrix;g.textRise!==0&&(NI=NI.slice(),NI[5]+=g.textRise),g.txtElement.setAttributeNS(null,"transform",`${B(NI)} scale(${l(YI)}, -1)`),g.txtElement.setAttributeNS(r,"xml:space","preserve"),g.txtElement.append(g.tspan),g.txtgrp.append(g.txtElement),this._ensureTransformGroup().append(g.txtElement)}setLeadingMoveText(I,g){this.setLeading(-g),this.moveText(I,g)}addFontStyle(I){if(!I.data)throw new Error('addFontStyle: No font data available, ensure that the "fontExtraProperties" API parameter is set.');this.cssStyle||(this.cssStyle=this.svgFactory.createElement("svg:style"),this.cssStyle.setAttributeNS(null,"type","text/css"),this.defs.append(this.cssStyle));const g=D(I.data,I.mimetype,this.forceDataSchema);this.cssStyle.textContent+=`@font-face { font-family: "${I.loadedName}"; src: url(${g}); }
`}setFont(I){const g=this.current,o=this.commonObjs.get(I[0]);let X=I[1];g.font=o,this.embedFonts&&!o.missingFile&&!this.embeddedFonts[o.loadedName]&&(this.addFontStyle(o),this.embeddedFonts[o.loadedName]=o),g.fontMatrix=o.fontMatrix||M.FONT_IDENTITY_MATRIX;let b="normal";o.black?b="900":o.bold&&(b="bold");const N=o.italic?"italic":"normal";X<0?(X=-X,g.fontDirection=-1):g.fontDirection=1,g.fontSize=X,g.fontFamily=o.loadedName,g.fontWeight=b,g.fontStyle=N,g.tspan=this.svgFactory.createElement("svg:tspan"),g.tspan.setAttributeNS(null,"y",l(-g.y)),g.xcoords=[],g.ycoords=[]}endText(){var g;const I=this.current;I.textRenderingMode&M.TextRenderingMode.ADD_TO_PATH_FLAG&&((g=I.txtElement)!=null&&g.hasChildNodes())&&(I.element=I.txtElement,this.clip("nonzero"),this.endPath())}setLineWidth(I){I>0&&(this.current.lineWidth=I)}setLineCap(I){this.current.lineCap=p[I]}setLineJoin(I){this.current.lineJoin=j[I]}setMiterLimit(I){this.current.miterLimit=I}setStrokeAlpha(I){this.current.strokeAlpha=I}setStrokeRGBColor(I,g,o){this.current.strokeColor=M.Util.makeHexColor(I,g,o)}setFillAlpha(I){this.current.fillAlpha=I}setFillRGBColor(I,g,o){this.current.fillColor=M.Util.makeHexColor(I,g,o),this.current.tspan=this.svgFactory.createElement("svg:tspan"),this.current.xcoords=[],this.current.ycoords=[]}setStrokeColorN(I){this.current.strokeColor=this._makeColorN_Pattern(I)}setFillColorN(I){this.current.fillColor=this._makeColorN_Pattern(I)}shadingFill(I){const g=this.viewport.width,o=this.viewport.height,X=M.Util.inverseTransform(this.transformMatrix),b=M.Util.applyTransform([0,0],X),N=M.Util.applyTransform([0,o],X),F=M.Util.applyTransform([g,0],X),hI=M.Util.applyTransform([g,o],X),YI=Math.min(b[0],N[0],F[0],hI[0]),nI=Math.min(b[1],N[1],F[1],hI[1]),gI=Math.max(b[0],N[0],F[0],hI[0]),U=Math.max(b[1],N[1],F[1],hI[1]),II=this.svgFactory.createElement("svg:rect");II.setAttributeNS(null,"x",YI),II.setAttributeNS(null,"y",nI),II.setAttributeNS(null,"width",gI-YI),II.setAttributeNS(null,"height",U-nI),II.setAttributeNS(null,"fill",this._makeShadingPattern(I)),this.current.fillAlpha<1&&II.setAttributeNS(null,"fill-opacity",this.current.fillAlpha),this._ensureTransformGroup().append(II)}_makeColorN_Pattern(I){return I[0]==="TilingPattern"?this._makeTilingPattern(I):this._makeShadingPattern(I)}_makeTilingPattern(I){const g=I[1],o=I[2],X=I[3]||M.IDENTITY_MATRIX,[b,N,F,hI]=I[4],YI=I[5],nI=I[6],gI=I[7],U=`shading${i++}`,[II,q,mI,NI]=M.Util.normalizeRect([...M.Util.applyTransform([b,N],X),...M.Util.applyTransform([F,hI],X)]),[BI,J]=M.Util.singularValueDecompose2dScale(X),e=YI*BI,w=nI*J,x=this.svgFactory.createElement("svg:pattern");x.setAttributeNS(null,"id",U),x.setAttributeNS(null,"patternUnits","userSpaceOnUse"),x.setAttributeNS(null,"width",e),x.setAttributeNS(null,"height",w),x.setAttributeNS(null,"x",`${II}`),x.setAttributeNS(null,"y",`${q}`);const E=this.svg,P=this.transformMatrix,iI=this.current.fillColor,aI=this.current.strokeColor,eI=this.svgFactory.create(mI-II,NI-q);if(this.svg=eI,this.transformMatrix=X,gI===2){const A=M.Util.makeHexColor(...g);this.current.fillColor=A,this.current.strokeColor=A}return this.executeOpTree(this.convertOpList(o)),this.svg=E,this.transformMatrix=P,this.current.fillColor=iI,this.current.strokeColor=aI,x.append(eI.childNodes[0]),this.defs.append(x),`url(#${U})`}_makeShadingPattern(I){switch(typeof I=="string"&&(I=this.objs.get(I)),I[0]){case"RadialAxial":const g=`shading${i++}`,o=I[3];let X;switch(I[1]){case"axial":const b=I[4],N=I[5];X=this.svgFactory.createElement("svg:linearGradient"),X.setAttributeNS(null,"id",g),X.setAttributeNS(null,"gradientUnits","userSpaceOnUse"),X.setAttributeNS(null,"x1",b[0]),X.setAttributeNS(null,"y1",b[1]),X.setAttributeNS(null,"x2",N[0]),X.setAttributeNS(null,"y2",N[1]);break;case"radial":const F=I[4],hI=I[5],YI=I[6],nI=I[7];X=this.svgFactory.createElement("svg:radialGradient"),X.setAttributeNS(null,"id",g),X.setAttributeNS(null,"gradientUnits","userSpaceOnUse"),X.setAttributeNS(null,"cx",hI[0]),X.setAttributeNS(null,"cy",hI[1]),X.setAttributeNS(null,"r",nI),X.setAttributeNS(null,"fx",F[0]),X.setAttributeNS(null,"fy",F[1]),X.setAttributeNS(null,"fr",YI);break;default:throw new Error(`Unknown RadialAxial type: ${I[1]}`)}for(const b of o){const N=this.svgFactory.createElement("svg:stop");N.setAttributeNS(null,"offset",b[0]),N.setAttributeNS(null,"stop-color",b[1]),X.append(N)}return this.defs.append(X),`url(#${g})`;case"Mesh":return(0,M.warn)("Unimplemented pattern Mesh"),null;case"Dummy":return"hotpink";default:throw new Error(`Unknown IR type: ${I[0]}`)}}setDash(I,g){this.current.dashArray=I,this.current.dashPhase=g}constructPath(I,g){const o=this.current;let X=o.x,b=o.y,N=[],F=0;for(const hI of I)switch(hI|0){case M.OPS.rectangle:X=g[F++],b=g[F++];const YI=g[F++],nI=g[F++],gI=X+YI,U=b+nI;N.push("M",l(X),l(b),"L",l(gI),l(b),"L",l(gI),l(U),"L",l(X),l(U),"Z");break;case M.OPS.moveTo:X=g[F++],b=g[F++],N.push("M",l(X),l(b));break;case M.OPS.lineTo:X=g[F++],b=g[F++],N.push("L",l(X),l(b));break;case M.OPS.curveTo:X=g[F+4],b=g[F+5],N.push("C",l(g[F]),l(g[F+1]),l(g[F+2]),l(g[F+3]),l(X),l(b)),F+=6;break;case M.OPS.curveTo2:N.push("C",l(X),l(b),l(g[F]),l(g[F+1]),l(g[F+2]),l(g[F+3])),X=g[F+2],b=g[F+3],F+=4;break;case M.OPS.curveTo3:X=g[F+2],b=g[F+3],N.push("C",l(g[F]),l(g[F+1]),l(X),l(b),l(X),l(b)),F+=4;break;case M.OPS.closePath:N.push("Z");break}N=N.join(" "),o.path&&I.length>0&&I[0]!==M.OPS.rectangle&&I[0]!==M.OPS.moveTo?N=o.path.getAttributeNS(null,"d")+N:(o.path=this.svgFactory.createElement("svg:path"),this._ensureTransformGroup().append(o.path)),o.path.setAttributeNS(null,"d",N),o.path.setAttributeNS(null,"fill","none"),o.element=o.path,o.setCurrentPoint(X,b)}endPath(){const I=this.current;if(I.path=null,!this.pendingClip)return;if(!I.element){this.pendingClip=null;return}const g=`clippath${Y++}`,o=this.svgFactory.createElement("svg:clipPath");o.setAttributeNS(null,"id",g),o.setAttributeNS(null,"transform",B(this.transformMatrix));const X=I.element.cloneNode(!0);if(this.pendingClip==="evenodd"?X.setAttributeNS(null,"clip-rule","evenodd"):X.setAttributeNS(null,"clip-rule","nonzero"),this.pendingClip=null,o.append(X),this.defs.append(o),I.activeClipUrl){I.clipGroup=null;for(const b of this.extraStack)b.clipGroup=null;o.setAttributeNS(null,"clip-path",I.activeClipUrl)}I.activeClipUrl=`url(#${g})`,this.tgrp=null}clip(I){this.pendingClip=I}closePath(){const I=this.current;if(I.path){const g=`${I.path.getAttributeNS(null,"d")}Z`;I.path.setAttributeNS(null,"d",g)}}setLeading(I){this.current.leading=-I}setTextRise(I){this.current.textRise=I}setTextRenderingMode(I){this.current.textRenderingMode=I}setHScale(I){this.current.textHScale=I/100}setRenderingIntent(I){}setFlatness(I){}setGState(I){for(const[g,o]of I)switch(g){case"LW":this.setLineWidth(o);break;case"LC":this.setLineCap(o);break;case"LJ":this.setLineJoin(o);break;case"ML":this.setMiterLimit(o);break;case"D":this.setDash(o[0],o[1]);break;case"RI":this.setRenderingIntent(o);break;case"FL":this.setFlatness(o);break;case"Font":this.setFont(o);break;case"CA":this.setStrokeAlpha(o);break;case"ca":this.setFillAlpha(o);break;default:(0,M.warn)(`Unimplemented graphic state operator ${g}`);break}}fill(){const I=this.current;I.element&&(I.element.setAttributeNS(null,"fill",I.fillColor),I.element.setAttributeNS(null,"fill-opacity",I.fillAlpha),this.endPath())}stroke(){const I=this.current;I.element&&(this._setStrokeAttributes(I.element),I.element.setAttributeNS(null,"fill","none"),this.endPath())}_setStrokeAttributes(I,g=1){const o=this.current;let X=o.dashArray;g!==1&&X.length>0&&(X=X.map(function(b){return g*b})),I.setAttributeNS(null,"stroke",o.strokeColor),I.setAttributeNS(null,"stroke-opacity",o.strokeAlpha),I.setAttributeNS(null,"stroke-miterlimit",l(o.miterLimit)),I.setAttributeNS(null,"stroke-linecap",o.lineCap),I.setAttributeNS(null,"stroke-linejoin",o.lineJoin),I.setAttributeNS(null,"stroke-width",l(g*o.lineWidth)+"px"),I.setAttributeNS(null,"stroke-dasharray",X.map(l).join(" ")),I.setAttributeNS(null,"stroke-dashoffset",l(g*o.dashPhase)+"px")}eoFill(){this.current.element&&this.current.element.setAttributeNS(null,"fill-rule","evenodd"),this.fill()}fillStroke(){this.stroke(),this.fill()}eoFillStroke(){this.current.element&&this.current.element.setAttributeNS(null,"fill-rule","evenodd"),this.fillStroke()}closeStroke(){this.closePath(),this.stroke()}closeFillStroke(){this.closePath(),this.fillStroke()}closeEOFillStroke(){this.closePath(),this.eoFillStroke()}paintSolidColorImageMask(){const I=this.svgFactory.createElement("svg:rect");I.setAttributeNS(null,"x","0"),I.setAttributeNS(null,"y","0"),I.setAttributeNS(null,"width","1px"),I.setAttributeNS(null,"height","1px"),I.setAttributeNS(null,"fill",this.current.fillColor),this._ensureTransformGroup().append(I)}paintImageXObject(I){const g=I.startsWith("g_")?this.commonObjs.get(I):this.objs.get(I);if(!g){(0,M.warn)(`Dependent image with object ID ${I} is not ready yet`);return}this.paintInlineImageXObject(g)}paintInlineImageXObject(I,g){const o=I.width,X=I.height,b=m(I,this.forceDataSchema,!!g),N=this.svgFactory.createElement("svg:rect");N.setAttributeNS(null,"x","0"),N.setAttributeNS(null,"y","0"),N.setAttributeNS(null,"width",l(o)),N.setAttributeNS(null,"height",l(X)),this.current.element=N,this.clip("nonzero");const F=this.svgFactory.createElement("svg:image");F.setAttributeNS(Z,"xlink:href",b),F.setAttributeNS(null,"x","0"),F.setAttributeNS(null,"y",l(-X)),F.setAttributeNS(null,"width",l(o)+"px"),F.setAttributeNS(null,"height",l(X)+"px"),F.setAttributeNS(null,"transform",`scale(${l(1/o)} ${l(-1/X)})`),g?g.append(F):this._ensureTransformGroup().append(F)}paintImageMaskXObject(I){const g=this.current,o=I.width,X=I.height,b=g.fillColor;g.maskId=`mask${a++}`;const N=this.svgFactory.createElement("svg:mask");N.setAttributeNS(null,"id",g.maskId);const F=this.svgFactory.createElement("svg:rect");F.setAttributeNS(null,"x","0"),F.setAttributeNS(null,"y","0"),F.setAttributeNS(null,"width",l(o)),F.setAttributeNS(null,"height",l(X)),F.setAttributeNS(null,"fill",b),F.setAttributeNS(null,"mask",`url(#${g.maskId})`),this.defs.append(N),this._ensureTransformGroup().append(F),this.paintInlineImageXObject(I,N)}paintFormXObjectBegin(I,g){if(Array.isArray(I)&&I.length===6&&this.transform(I[0],I[1],I[2],I[3],I[4],I[5]),g){const o=g[2]-g[0],X=g[3]-g[1],b=this.svgFactory.createElement("svg:rect");b.setAttributeNS(null,"x",g[0]),b.setAttributeNS(null,"y",g[1]),b.setAttributeNS(null,"width",l(o)),b.setAttributeNS(null,"height",l(X)),this.current.element=b,this.clip("nonzero"),this.endPath()}}paintFormXObjectEnd(){}_initialize(I){const g=this.svgFactory.create(I.width,I.height),o=this.svgFactory.createElement("svg:defs");g.append(o),this.defs=o;const X=this.svgFactory.createElement("svg:g");return X.setAttributeNS(null,"transform",B(I.transform)),g.append(X),this.svg=X,g}_ensureClipGroup(){if(!this.current.clipGroup){const I=this.svgFactory.createElement("svg:g");I.setAttributeNS(null,"clip-path",this.current.activeClipUrl),this.svg.append(I),this.current.clipGroup=I}return this.current.clipGroup}_ensureTransformGroup(){return this.tgrp||(this.tgrp=this.svgFactory.createElement("svg:g"),this.tgrp.setAttributeNS(null,"transform",B(this.transformMatrix)),this.current.activeClipUrl?this._ensureClipGroup().append(this.tgrp):this.svg.append(this.tgrp)),this.tgrp}}}},(wI,c,$)=>{Object.defineProperty(c,"__esModule",{value:!0}),c.PDFNodeStream=void 0;var h=$(1),M=$(33);const _=require$$5$1,z=require$$5$1,T=require$$5$1,r=require$$5$1,Z=/^file:\/\/\/[a-zA-Z]:\//;function p(a){const i=r.parse(a);return i.protocol==="file:"||i.host?i:/^[a-z]:[/\\]/i.test(a)?r.parse(`file:///${a}`):(i.host||(i.protocol="file:"),i)}class j{constructor(i){this.source=i,this.url=p(i.url),this.isHttp=this.url.protocol==="http:"||this.url.protocol==="https:",this.isFsUrl=this.url.protocol==="file:",this.httpHeaders=this.isHttp&&i.httpHeaders||{},this._fullRequestReader=null,this._rangeRequestReaders=[]}get _progressiveDataLength(){var i;return((i=this._fullRequestReader)==null?void 0:i._loaded)??0}getFullReader(){return(0,h.assert)(!this._fullRequestReader,"PDFNodeStream.getFullReader can only be called once."),this._fullRequestReader=this.isFsUrl?new B(this):new C(this),this._fullRequestReader}getRangeReader(i,I){if(I<=this._progressiveDataLength)return null;const g=this.isFsUrl?new Y(this,i,I):new l(this,i,I);return this._rangeRequestReaders.push(g),g}cancelAllRequests(i){this._fullRequestReader&&this._fullRequestReader.cancel(i);for(const I of this._rangeRequestReaders.slice(0))I.cancel(i)}}c.PDFNodeStream=j;class D{constructor(i){this._url=i.url,this._done=!1,this._storedError=null,this.onProgress=null;const I=i.source;this._contentLength=I.length,this._loaded=0,this._filename=null,this._disableRange=I.disableRange||!1,this._rangeChunkSize=I.rangeChunkSize,!this._rangeChunkSize&&!this._disableRange&&(this._disableRange=!0),this._isStreamingSupported=!I.disableStream,this._isRangeSupported=!I.disableRange,this._readableStream=null,this._readCapability=(0,h.createPromiseCapability)(),this._headersCapability=(0,h.createPromiseCapability)()}get headersReady(){return this._headersCapability.promise}get filename(){return this._filename}get contentLength(){return this._contentLength}get isRangeSupported(){return this._isRangeSupported}get isStreamingSupported(){return this._isStreamingSupported}async read(){if(await this._readCapability.promise,this._done)return{value:void 0,done:!0};if(this._storedError)throw this._storedError;const i=this._readableStream.read();return i===null?(this._readCapability=(0,h.createPromiseCapability)(),this.read()):(this._loaded+=i.length,this.onProgress&&this.onProgress({loaded:this._loaded,total:this._contentLength}),{value:new Uint8Array(i).buffer,done:!1})}cancel(i){if(!this._readableStream){this._error(i);return}this._readableStream.destroy(i)}_error(i){this._storedError=i,this._readCapability.resolve()}_setReadableStream(i){this._readableStream=i,i.on("readable",()=>{this._readCapability.resolve()}),i.on("end",()=>{i.destroy(),this._done=!0,this._readCapability.resolve()}),i.on("error",I=>{this._error(I)}),!this._isStreamingSupported&&this._isRangeSupported&&this._error(new h.AbortException("streaming is disabled")),this._storedError&&this._readableStream.destroy(this._storedError)}}class m{constructor(i){this._url=i.url,this._done=!1,this._storedError=null,this.onProgress=null,this._loaded=0,this._readableStream=null,this._readCapability=(0,h.createPromiseCapability)();const I=i.source;this._isStreamingSupported=!I.disableStream}get isStreamingSupported(){return this._isStreamingSupported}async read(){if(await this._readCapability.promise,this._done)return{value:void 0,done:!0};if(this._storedError)throw this._storedError;const i=this._readableStream.read();return i===null?(this._readCapability=(0,h.createPromiseCapability)(),this.read()):(this._loaded+=i.length,this.onProgress&&this.onProgress({loaded:this._loaded}),{value:new Uint8Array(i).buffer,done:!1})}cancel(i){if(!this._readableStream){this._error(i);return}this._readableStream.destroy(i)}_error(i){this._storedError=i,this._readCapability.resolve()}_setReadableStream(i){this._readableStream=i,i.on("readable",()=>{this._readCapability.resolve()}),i.on("end",()=>{i.destroy(),this._done=!0,this._readCapability.resolve()}),i.on("error",I=>{this._error(I)}),this._storedError&&this._readableStream.destroy(this._storedError)}}function d(a,i){return{protocol:a.protocol,auth:a.auth,host:a.hostname,port:a.port,path:a.path,method:"GET",headers:i}}class C extends D{constructor(i){super(i);const I=g=>{if(g.statusCode===404){const N=new h.MissingPDFException(`Missing PDF "${this._url}".`);this._storedError=N,this._headersCapability.reject(N);return}this._headersCapability.resolve(),this._setReadableStream(g);const o=N=>this._readableStream.headers[N.toLowerCase()],{allowRangeRequests:X,suggestedLength:b}=(0,M.validateRangeRequestCapabilities)({getResponseHeader:o,isHttp:i.isHttp,rangeChunkSize:this._rangeChunkSize,disableRange:this._disableRange});this._isRangeSupported=X,this._contentLength=b||this._contentLength,this._filename=(0,M.extractFilenameFromHeader)(o)};this._request=null,this._url.protocol==="http:"?this._request=z.request(d(this._url,i.httpHeaders),I):this._request=T.request(d(this._url,i.httpHeaders),I),this._request.on("error",g=>{this._storedError=g,this._headersCapability.reject(g)}),this._request.end()}}class l extends m{constructor(i,I,g){super(i),this._httpHeaders={};for(const X in i.httpHeaders){const b=i.httpHeaders[X];typeof b>"u"||(this._httpHeaders[X]=b)}this._httpHeaders.Range=`bytes=${I}-${g-1}`;const o=X=>{if(X.statusCode===404){const b=new h.MissingPDFException(`Missing PDF "${this._url}".`);this._storedError=b;return}this._setReadableStream(X)};this._request=null,this._url.protocol==="http:"?this._request=z.request(d(this._url,this._httpHeaders),o):this._request=T.request(d(this._url,this._httpHeaders),o),this._request.on("error",X=>{this._storedError=X}),this._request.end()}}class B extends D{constructor(i){super(i);let I=decodeURIComponent(this._url.path);Z.test(this._url.href)&&(I=I.replace(/^\//,"")),_.lstat(I,(g,o)=>{if(g){g.code==="ENOENT"&&(g=new h.MissingPDFException(`Missing PDF "${I}".`)),this._storedError=g,this._headersCapability.reject(g);return}this._contentLength=o.size,this._setReadableStream(_.createReadStream(I)),this._headersCapability.resolve()})}}class Y extends m{constructor(i,I,g){super(i);let o=decodeURIComponent(this._url.path);Z.test(this._url.href)&&(o=o.replace(/^\//,"")),this._setReadableStream(_.createReadStream(o,{start:I,end:g-1}))}}},(wI,c,$)=>{Object.defineProperty(c,"__esModule",{value:!0}),c.createResponseStatusError=r,c.extractFilenameFromHeader=T,c.validateRangeRequestCapabilities=z,c.validateResponseStatus=Z;var h=$(1),M=$(34),_=$(8);function z({getResponseHeader:p,isHttp:j,rangeChunkSize:D,disableRange:m}){const d={allowRangeRequests:!1,suggestedLength:void 0},C=parseInt(p("Content-Length"),10);return!Number.isInteger(C)||(d.suggestedLength=C,C<=2*D)||m||!j||p("Accept-Ranges")!=="bytes"||(p("Content-Encoding")||"identity")!=="identity"||(d.allowRangeRequests=!0),d}function T(p){const j=p("Content-Disposition");if(j){let D=(0,M.getFilenameFromContentDispositionHeader)(j);if(D.includes("%"))try{D=decodeURIComponent(D)}catch{}if((0,_.isPdfFile)(D))return D}return null}function r(p,j){return p===404||p===0&&j.startsWith("file:")?new h.MissingPDFException('Missing PDF "'+j+'".'):new h.UnexpectedResponseException(`Unexpected server response (${p}) while retrieving PDF "${j}".`,p)}function Z(p){return p===200||p===206}},(wI,c,$)=>{Object.defineProperty(c,"__esModule",{value:!0}),c.getFilenameFromContentDispositionHeader=M;var h=$(1);function M(_){let z=!0,T=r("filename\\*","i").exec(_);if(T){T=T[1];let C=D(T);return C=unescape(C),C=m(C),C=d(C),p(C)}if(T=j(_),T){const C=d(T);return p(C)}if(T=r("filename","i").exec(_),T){T=T[1];let C=D(T);return C=d(C),p(C)}function r(C,l){return new RegExp("(?:^|;)\\s*"+C+'\\s*=\\s*([^";\\s][^;\\s]*|"(?:[^"\\\\]|\\\\"?)+"?)',l)}function Z(C,l){if(C){if(!/^[\x00-\xFF]+$/.test(l))return l;try{const B=new TextDecoder(C,{fatal:!0}),Y=(0,h.stringToBytes)(l);l=B.decode(Y),z=!1}catch{}}return l}function p(C){return z&&/[\x80-\xff]/.test(C)&&(C=Z("utf-8",C),z&&(C=Z("iso-8859-1",C))),C}function j(C){const l=[];let B;const Y=r("filename\\*((?!0\\d)\\d+)(\\*?)","ig");for(;(B=Y.exec(C))!==null;){let[,i,I,g]=B;if(i=parseInt(i,10),i in l){if(i===0)break;continue}l[i]=[I,g]}const a=[];for(let i=0;i<l.length&&i in l;++i){let[I,g]=l[i];g=D(g),I&&(g=unescape(g),i===0&&(g=m(g))),a.push(g)}return a.join("")}function D(C){if(C.startsWith('"')){const l=C.slice(1).split('\\"');for(let B=0;B<l.length;++B){const Y=l[B].indexOf('"');Y!==-1&&(l[B]=l[B].slice(0,Y),l.length=B+1),l[B]=l[B].replace(/\\(.)/g,"$1")}C=l.join('"')}return C}function m(C){const l=C.indexOf("'");if(l===-1)return C;const B=C.slice(0,l),a=C.slice(l+1).replace(/^[^']*'/,"");return Z(B,a)}function d(C){return!C.startsWith("=?")||/[\x00-\x19\x80-\xff]/.test(C)?C:C.replace(/=\?([\w-]*)\?([QqBb])\?((?:[^?]|\?(?!=))*)\?=/g,function(l,B,Y,a){if(Y==="q"||Y==="Q")return a=a.replace(/_/g," "),a=a.replace(/=([0-9a-fA-F]{2})/g,function(i,I){return String.fromCharCode(parseInt(I,16))}),Z(B,a);try{a=atob(a)}catch{}return Z(B,a)})}return""}},(wI,c,$)=>{Object.defineProperty(c,"__esModule",{value:!0}),c.PDFNetworkStream=void 0;var h=$(1),M=$(33);const _=200,z=206;function T(D){const m=D.response;return typeof m!="string"?m:(0,h.stringToBytes)(m).buffer}class r{constructor(m,d={}){this.url=m,this.isHttp=/^https?:/i.test(m),this.httpHeaders=this.isHttp&&d.httpHeaders||Object.create(null),this.withCredentials=d.withCredentials||!1,this.getXhr=d.getXhr||function(){return new XMLHttpRequest},this.currXhrId=0,this.pendingRequests=Object.create(null)}requestRange(m,d,C){const l={begin:m,end:d};for(const B in C)l[B]=C[B];return this.request(l)}requestFull(m){return this.request(m)}request(m){const d=this.getXhr(),C=this.currXhrId++,l=this.pendingRequests[C]={xhr:d};d.open("GET",this.url),d.withCredentials=this.withCredentials;for(const B in this.httpHeaders){const Y=this.httpHeaders[B];typeof Y>"u"||d.setRequestHeader(B,Y)}return this.isHttp&&"begin"in m&&"end"in m?(d.setRequestHeader("Range",`bytes=${m.begin}-${m.end-1}`),l.expectedStatus=z):l.expectedStatus=_,d.responseType="arraybuffer",m.onError&&(d.onerror=function(B){m.onError(d.status)}),d.onreadystatechange=this.onStateChange.bind(this,C),d.onprogress=this.onProgress.bind(this,C),l.onHeadersReceived=m.onHeadersReceived,l.onDone=m.onDone,l.onError=m.onError,l.onProgress=m.onProgress,d.send(null),C}onProgress(m,d){var l;const C=this.pendingRequests[m];C&&((l=C.onProgress)==null||l.call(C,d))}onStateChange(m,d){var i,I,g;const C=this.pendingRequests[m];if(!C)return;const l=C.xhr;if(l.readyState>=2&&C.onHeadersReceived&&(C.onHeadersReceived(),delete C.onHeadersReceived),l.readyState!==4||!(m in this.pendingRequests))return;if(delete this.pendingRequests[m],l.status===0&&this.isHttp){(i=C.onError)==null||i.call(C,l.status);return}const B=l.status||_;if(!(B===_&&C.expectedStatus===z)&&B!==C.expectedStatus){(I=C.onError)==null||I.call(C,l.status);return}const a=T(l);if(B===z){const o=l.getResponseHeader("Content-Range"),X=/bytes (\d+)-(\d+)\/(\d+)/.exec(o);C.onDone({begin:parseInt(X[1],10),chunk:a})}else a?C.onDone({begin:0,chunk:a}):(g=C.onError)==null||g.call(C,l.status)}getRequestXhr(m){return this.pendingRequests[m].xhr}isPendingRequest(m){return m in this.pendingRequests}abortRequest(m){const d=this.pendingRequests[m].xhr;delete this.pendingRequests[m],d.abort()}}class Z{constructor(m){this._source=m,this._manager=new r(m.url,{httpHeaders:m.httpHeaders,withCredentials:m.withCredentials}),this._rangeChunkSize=m.rangeChunkSize,this._fullRequestReader=null,this._rangeRequestReaders=[]}_onRangeRequestReaderClosed(m){const d=this._rangeRequestReaders.indexOf(m);d>=0&&this._rangeRequestReaders.splice(d,1)}getFullReader(){return(0,h.assert)(!this._fullRequestReader,"PDFNetworkStream.getFullReader can only be called once."),this._fullRequestReader=new p(this._manager,this._source),this._fullRequestReader}getRangeReader(m,d){const C=new j(this._manager,m,d);return C.onClosed=this._onRangeRequestReaderClosed.bind(this),this._rangeRequestReaders.push(C),C}cancelAllRequests(m){var d;(d=this._fullRequestReader)==null||d.cancel(m);for(const C of this._rangeRequestReaders.slice(0))C.cancel(m)}}c.PDFNetworkStream=Z;class p{constructor(m,d){this._manager=m;const C={onHeadersReceived:this._onHeadersReceived.bind(this),onDone:this._onDone.bind(this),onError:this._onError.bind(this),onProgress:this._onProgress.bind(this)};this._url=d.url,this._fullRequestId=m.requestFull(C),this._headersReceivedCapability=(0,h.createPromiseCapability)(),this._disableRange=d.disableRange||!1,this._contentLength=d.length,this._rangeChunkSize=d.rangeChunkSize,!this._rangeChunkSize&&!this._disableRange&&(this._disableRange=!0),this._isStreamingSupported=!1,this._isRangeSupported=!1,this._cachedChunks=[],this._requests=[],this._done=!1,this._storedError=void 0,this._filename=null,this.onProgress=null}_onHeadersReceived(){const m=this._fullRequestId,d=this._manager.getRequestXhr(m),C=Y=>d.getResponseHeader(Y),{allowRangeRequests:l,suggestedLength:B}=(0,M.validateRangeRequestCapabilities)({getResponseHeader:C,isHttp:this._manager.isHttp,rangeChunkSize:this._rangeChunkSize,disableRange:this._disableRange});l&&(this._isRangeSupported=!0),this._contentLength=B||this._contentLength,this._filename=(0,M.extractFilenameFromHeader)(C),this._isRangeSupported&&this._manager.abortRequest(m),this._headersReceivedCapability.resolve()}_onDone(m){if(m&&(this._requests.length>0?this._requests.shift().resolve({value:m.chunk,done:!1}):this._cachedChunks.push(m.chunk)),this._done=!0,!(this._cachedChunks.length>0)){for(const d of this._requests)d.resolve({value:void 0,done:!0});this._requests.length=0}}_onError(m){this._storedError=(0,M.createResponseStatusError)(m,this._url),this._headersReceivedCapability.reject(this._storedError);for(const d of this._requests)d.reject(this._storedError);this._requests.length=0,this._cachedChunks.length=0}_onProgress(m){var d;(d=this.onProgress)==null||d.call(this,{loaded:m.loaded,total:m.lengthComputable?m.total:this._contentLength})}get filename(){return this._filename}get isRangeSupported(){return this._isRangeSupported}get isStreamingSupported(){return this._isStreamingSupported}get contentLength(){return this._contentLength}get headersReady(){return this._headersReceivedCapability.promise}async read(){if(this._storedError)throw this._storedError;if(this._cachedChunks.length>0)return{value:this._cachedChunks.shift(),done:!1};if(this._done)return{value:void 0,done:!0};const m=(0,h.createPromiseCapability)();return this._requests.push(m),m.promise}cancel(m){this._done=!0,this._headersReceivedCapability.reject(m);for(const d of this._requests)d.resolve({value:void 0,done:!0});this._requests.length=0,this._manager.isPendingRequest(this._fullRequestId)&&this._manager.abortRequest(this._fullRequestId),this._fullRequestReader=null}}class j{constructor(m,d,C){this._manager=m;const l={onDone:this._onDone.bind(this),onError:this._onError.bind(this),onProgress:this._onProgress.bind(this)};this._url=m.url,this._requestId=m.requestRange(d,C,l),this._requests=[],this._queuedChunk=null,this._done=!1,this._storedError=void 0,this.onProgress=null,this.onClosed=null}_close(){var m;(m=this.onClosed)==null||m.call(this,this)}_onDone(m){const d=m.chunk;this._requests.length>0?this._requests.shift().resolve({value:d,done:!1}):this._queuedChunk=d,this._done=!0;for(const C of this._requests)C.resolve({value:void 0,done:!0});this._requests.length=0,this._close()}_onError(m){this._storedError=(0,M.createResponseStatusError)(m,this._url);for(const d of this._requests)d.reject(this._storedError);this._requests.length=0,this._queuedChunk=null}_onProgress(m){var d;this.isStreamingSupported||(d=this.onProgress)==null||d.call(this,{loaded:m.loaded})}get isStreamingSupported(){return!1}async read(){if(this._storedError)throw this._storedError;if(this._queuedChunk!==null){const d=this._queuedChunk;return this._queuedChunk=null,{value:d,done:!1}}if(this._done)return{value:void 0,done:!0};const m=(0,h.createPromiseCapability)();return this._requests.push(m),m.promise}cancel(m){this._done=!0;for(const d of this._requests)d.resolve({value:void 0,done:!0});this._requests.length=0,this._manager.isPendingRequest(this._requestId)&&this._manager.abortRequest(this._requestId),this._close()}}},(wI,c,$)=>{Object.defineProperty(c,"__esModule",{value:!0}),c.PDFFetchStream=void 0;var h=$(1),M=$(33);function _(p,j,D){return{method:"GET",headers:p,signal:D.signal,mode:"cors",credentials:j?"include":"same-origin",redirect:"follow"}}function z(p){const j=new Headers;for(const D in p){const m=p[D];typeof m>"u"||j.append(D,m)}return j}class T{constructor(j){this.source=j,this.isHttp=/^https?:/i.test(j.url),this.httpHeaders=this.isHttp&&j.httpHeaders||{},this._fullRequestReader=null,this._rangeRequestReaders=[]}get _progressiveDataLength(){var j;return((j=this._fullRequestReader)==null?void 0:j._loaded)??0}getFullReader(){return(0,h.assert)(!this._fullRequestReader,"PDFFetchStream.getFullReader can only be called once."),this._fullRequestReader=new r(this),this._fullRequestReader}getRangeReader(j,D){if(D<=this._progressiveDataLength)return null;const m=new Z(this,j,D);return this._rangeRequestReaders.push(m),m}cancelAllRequests(j){this._fullRequestReader&&this._fullRequestReader.cancel(j);for(const D of this._rangeRequestReaders.slice(0))D.cancel(j)}}c.PDFFetchStream=T;class r{constructor(j){this._stream=j,this._reader=null,this._loaded=0,this._filename=null;const D=j.source;this._withCredentials=D.withCredentials||!1,this._contentLength=D.length,this._headersCapability=(0,h.createPromiseCapability)(),this._disableRange=D.disableRange||!1,this._rangeChunkSize=D.rangeChunkSize,!this._rangeChunkSize&&!this._disableRange&&(this._disableRange=!0),this._abortController=new AbortController,this._isStreamingSupported=!D.disableStream,this._isRangeSupported=!D.disableRange,this._headers=z(this._stream.httpHeaders);const m=D.url;fetch(m,_(this._headers,this._withCredentials,this._abortController)).then(d=>{if(!(0,M.validateResponseStatus)(d.status))throw(0,M.createResponseStatusError)(d.status,m);this._reader=d.body.getReader(),this._headersCapability.resolve();const C=Y=>d.headers.get(Y),{allowRangeRequests:l,suggestedLength:B}=(0,M.validateRangeRequestCapabilities)({getResponseHeader:C,isHttp:this._stream.isHttp,rangeChunkSize:this._rangeChunkSize,disableRange:this._disableRange});this._isRangeSupported=l,this._contentLength=B||this._contentLength,this._filename=(0,M.extractFilenameFromHeader)(C),!this._isStreamingSupported&&this._isRangeSupported&&this.cancel(new h.AbortException("Streaming is disabled."))}).catch(this._headersCapability.reject),this.onProgress=null}get headersReady(){return this._headersCapability.promise}get filename(){return this._filename}get contentLength(){return this._contentLength}get isRangeSupported(){return this._isRangeSupported}get isStreamingSupported(){return this._isStreamingSupported}async read(){await this._headersCapability.promise;const{value:j,done:D}=await this._reader.read();return D?{value:j,done:D}:(this._loaded+=j.byteLength,this.onProgress&&this.onProgress({loaded:this._loaded,total:this._contentLength}),{value:new Uint8Array(j).buffer,done:!1})}cancel(j){this._reader&&this._reader.cancel(j),this._abortController.abort()}}class Z{constructor(j,D,m){this._stream=j,this._reader=null,this._loaded=0;const d=j.source;this._withCredentials=d.withCredentials||!1,this._readCapability=(0,h.createPromiseCapability)(),this._isStreamingSupported=!d.disableStream,this._abortController=new AbortController,this._headers=z(this._stream.httpHeaders),this._headers.append("Range",`bytes=${D}-${m-1}`);const C=d.url;fetch(C,_(this._headers,this._withCredentials,this._abortController)).then(l=>{if(!(0,M.validateResponseStatus)(l.status))throw(0,M.createResponseStatusError)(l.status,C);this._readCapability.resolve(),this._reader=l.body.getReader()}).catch(this._readCapability.reject),this.onProgress=null}get isStreamingSupported(){return this._isStreamingSupported}async read(){await this._readCapability.promise;const{value:j,done:D}=await this._reader.read();return D?{value:j,done:D}:(this._loaded+=j.byteLength,this.onProgress&&this.onProgress({loaded:this._loaded}),{value:new Uint8Array(j).buffer,done:!1})}cancel(j){this._reader&&this._reader.cancel(j),this._abortController.abort()}}}],__webpack_module_cache__={};function __w_pdfjs_require__(wI){var c=__webpack_module_cache__[wI];if(c!==void 0)return c.exports;var $=__webpack_module_cache__[wI]={exports:{}};return __webpack_modules__[wI]($,$.exports,__w_pdfjs_require__),$.exports}var __webpack_exports__={};return(()=>{var wI=__webpack_exports__;Object.defineProperty(wI,"__esModule",{value:!0}),Object.defineProperty(wI,"AnnotationEditorLayer",{enumerable:!0,get:function(){return M.AnnotationEditorLayer}}),Object.defineProperty(wI,"AnnotationEditorParamsType",{enumerable:!0,get:function(){return c.AnnotationEditorParamsType}}),Object.defineProperty(wI,"AnnotationEditorType",{enumerable:!0,get:function(){return c.AnnotationEditorType}}),Object.defineProperty(wI,"AnnotationEditorUIManager",{enumerable:!0,get:function(){return _.AnnotationEditorUIManager}}),Object.defineProperty(wI,"AnnotationLayer",{enumerable:!0,get:function(){return z.AnnotationLayer}}),Object.defineProperty(wI,"AnnotationMode",{enumerable:!0,get:function(){return c.AnnotationMode}}),Object.defineProperty(wI,"CMapCompressionType",{enumerable:!0,get:function(){return c.CMapCompressionType}}),Object.defineProperty(wI,"GlobalWorkerOptions",{enumerable:!0,get:function(){return T.GlobalWorkerOptions}}),Object.defineProperty(wI,"InvalidPDFException",{enumerable:!0,get:function(){return c.InvalidPDFException}}),Object.defineProperty(wI,"LoopbackPort",{enumerable:!0,get:function(){return $.LoopbackPort}}),Object.defineProperty(wI,"MissingPDFException",{enumerable:!0,get:function(){return c.MissingPDFException}}),Object.defineProperty(wI,"OPS",{enumerable:!0,get:function(){return c.OPS}}),Object.defineProperty(wI,"PDFDataRangeTransport",{enumerable:!0,get:function(){return $.PDFDataRangeTransport}}),Object.defineProperty(wI,"PDFDateString",{enumerable:!0,get:function(){return h.PDFDateString}}),Object.defineProperty(wI,"PDFWorker",{enumerable:!0,get:function(){return $.PDFWorker}}),Object.defineProperty(wI,"PasswordResponses",{enumerable:!0,get:function(){return c.PasswordResponses}}),Object.defineProperty(wI,"PermissionFlag",{enumerable:!0,get:function(){return c.PermissionFlag}}),Object.defineProperty(wI,"PixelsPerInch",{enumerable:!0,get:function(){return h.PixelsPerInch}}),Object.defineProperty(wI,"RenderingCancelledException",{enumerable:!0,get:function(){return h.RenderingCancelledException}}),Object.defineProperty(wI,"SVGGraphics",{enumerable:!0,get:function(){return p.SVGGraphics}}),Object.defineProperty(wI,"UNSUPPORTED_FEATURES",{enumerable:!0,get:function(){return c.UNSUPPORTED_FEATURES}}),Object.defineProperty(wI,"UnexpectedResponseException",{enumerable:!0,get:function(){return c.UnexpectedResponseException}}),Object.defineProperty(wI,"Util",{enumerable:!0,get:function(){return c.Util}}),Object.defineProperty(wI,"VerbosityLevel",{enumerable:!0,get:function(){return c.VerbosityLevel}}),Object.defineProperty(wI,"XfaLayer",{enumerable:!0,get:function(){return j.XfaLayer}}),Object.defineProperty(wI,"build",{enumerable:!0,get:function(){return $.build}}),Object.defineProperty(wI,"createPromiseCapability",{enumerable:!0,get:function(){return c.createPromiseCapability}}),Object.defineProperty(wI,"createValidAbsoluteUrl",{enumerable:!0,get:function(){return c.createValidAbsoluteUrl}}),Object.defineProperty(wI,"getDocument",{enumerable:!0,get:function(){return $.getDocument}}),Object.defineProperty(wI,"getFilenameFromUrl",{enumerable:!0,get:function(){return h.getFilenameFromUrl}}),Object.defineProperty(wI,"getPdfFilenameFromUrl",{enumerable:!0,get:function(){return h.getPdfFilenameFromUrl}}),Object.defineProperty(wI,"getXfaPageViewport",{enumerable:!0,get:function(){return h.getXfaPageViewport}}),Object.defineProperty(wI,"isPdfFile",{enumerable:!0,get:function(){return h.isPdfFile}}),Object.defineProperty(wI,"loadScript",{enumerable:!0,get:function(){return h.loadScript}}),Object.defineProperty(wI,"renderTextLayer",{enumerable:!0,get:function(){return Z.renderTextLayer}}),Object.defineProperty(wI,"shadow",{enumerable:!0,get:function(){return c.shadow}}),Object.defineProperty(wI,"version",{enumerable:!0,get:function(){return $.version}});var c=__w_pdfjs_require__(1),$=__w_pdfjs_require__(4),h=__w_pdfjs_require__(8),M=__w_pdfjs_require__(22),_=__w_pdfjs_require__(7),z=__w_pdfjs_require__(27),T=__w_pdfjs_require__(15),r=__w_pdfjs_require__(3),Z=__w_pdfjs_require__(30),p=__w_pdfjs_require__(31),j=__w_pdfjs_require__(29);if(r.isNodeJS){const{PDFNodeStream:D}=__w_pdfjs_require__(32);(0,$.setPDFNetworkStreamFactory)(m=>new D(m))}else{const{PDFNetworkStream:D}=__w_pdfjs_require__(35),{PDFFetchStream:m}=__w_pdfjs_require__(36);(0,$.setPDFNetworkStreamFactory)(d=>(0,h.isValidFetchUrl)(d.url)?new m(d):new D(d))}})(),__webpack_exports__})())})(pdf$1);var pdfExports=pdf$1.exports;const pdf_viewer$1="";var nC=Object.defineProperty,RC=(wI,c,$)=>c in wI?nC(wI,c,{enumerable:!0,configurable:!0,writable:!0,value:$}):wI[c]=$,QI=(wI,c,$)=>(RC(wI,typeof c!="symbol"?c+"":c,$),$),mg=(wI,c,$)=>{if(!c.has(wI))throw TypeError("Cannot "+$)},R=(wI,c,$)=>(mg(wI,c,"read from private field"),$?$.call(wI):c.get(wI)),GI=(wI,c,$)=>{if(c.has(wI))throw TypeError("Cannot add the same private member more than once");c instanceof WeakSet?c.add(wI):c.set(wI,$)},XI=(wI,c,$,h)=>(mg(wI,c,"write to private field"),h?h.call(wI,$):c.set(wI,$),$),wg=(wI,c,$,h)=>({set _(M){XI(wI,c,M,$)},get _(){return R(wI,c,h)}}),bI=(wI,c,$)=>(mg(wI,c,"access private method"),$);function getAugmentedNamespace(wI){if(wI.__esModule)return wI;var c=wI.default;if(typeof c=="function"){var $=function h(){if(this instanceof h){var M=[null];M.push.apply(M,arguments);var _=Function.bind.apply(c,M);return new _}return c.apply(this,arguments)};$.prototype=c.prototype}else $={};return Object.defineProperty($,"__esModule",{value:!0}),Object.keys(wI).forEach(function(h){var M=Object.getOwnPropertyDescriptor(wI,h);Object.defineProperty($,h,M.get?M:{enumerable:!0,get:function(){return wI[h]}})}),$}var pdf_viewer={exports:{}};function commonjsRequire(wI){throw new Error('Could not dynamically require "'+wI+'". Please configure the dynamicRequireTargets or/and ignoreDynamicRequires option of @rollup/plugin-commonjs appropriately for this require call to work.')}var pdf={exports:{}};const __viteBrowserExternal={},__viteBrowserExternal$1=Object.freeze(Object.defineProperty({__proto__:null,default:__viteBrowserExternal},Symbol.toStringTag,{value:"Module"})),require$$5=getAugmentedNamespace(__viteBrowserExternal$1);var hasRequiredPdf;function requirePdf(){return hasRequiredPdf||(hasRequiredPdf=1,function(module,exports){(function(wI,c){module.exports=c()})(globalThis,()=>(()=>{var __webpack_modules__=[,(wI,c,$)=>{Object.defineProperty(c,"__esModule",{value:!0}),c.VerbosityLevel=c.Util=c.UnknownErrorException=c.UnexpectedResponseException=c.UNSUPPORTED_FEATURES=c.TextRenderingMode=c.StreamType=c.RenderingIntentFlag=c.PermissionFlag=c.PasswordResponses=c.PasswordException=c.PageActionEventType=c.OPS=c.MissingPDFException=c.LINE_FACTOR=c.LINE_DESCENT_FACTOR=c.InvalidPDFException=c.ImageKind=c.IDENTITY_MATRIX=c.FormatError=c.FontType=c.FeatureTest=c.FONT_IDENTITY_MATRIX=c.DocumentActionEventType=c.CMapCompressionType=c.BaseException=c.AnnotationType=c.AnnotationStateModelType=c.AnnotationReviewState=c.AnnotationReplyType=c.AnnotationMode=c.AnnotationMarkedState=c.AnnotationFlag=c.AnnotationFieldFlag=c.AnnotationEditorType=c.AnnotationEditorPrefix=c.AnnotationEditorParamsType=c.AnnotationBorderStyleType=c.AnnotationActionEventType=c.AbortException=void 0,c.arrayByteLength=uI,c.arraysToBytes=MI,c.assert=e,c.bytesToString=Q,c.createPromiseCapability=HI,c.createValidAbsoluteUrl=x,c.escapeString=TI,c.getModificationDate=yI,c.getVerbosityLevel=mI,c.info=NI,c.isArrayBuffer=SI,c.isArrayEqual=JI,c.isAscii=vI,c.objectFromMap=tI,c.objectSize=WI,c.setVerbosityLevel=q,c.shadow=E,c.string32=ZI,c.stringToBytes=lI,c.stringToPDFString=FI,c.stringToUTF16BEString=fI,c.stringToUTF8String=PI,c.unreachable=J,c.utf8StringToString=EI,c.warn=BI,$(2);const h=[1,0,0,1,0,0];c.IDENTITY_MATRIX=h;const M=[.001,0,0,.001,0,0];c.FONT_IDENTITY_MATRIX=M;const _=1.35;c.LINE_FACTOR=_;const z=.35;c.LINE_DESCENT_FACTOR=z;const T={ANY:1,DISPLAY:2,PRINT:4,ANNOTATIONS_FORMS:16,ANNOTATIONS_STORAGE:32,ANNOTATIONS_DISABLE:64,OPLIST:256};c.RenderingIntentFlag=T;const r={DISABLE:0,ENABLE:1,ENABLE_FORMS:2,ENABLE_STORAGE:3};c.AnnotationMode=r;const Z="pdfjs_internal_editor_";c.AnnotationEditorPrefix=Z;const p={DISABLE:-1,NONE:0,FREETEXT:3,INK:15};c.AnnotationEditorType=p;const j={FREETEXT_SIZE:1,FREETEXT_COLOR:2,FREETEXT_OPACITY:3,INK_COLOR:11,INK_THICKNESS:12,INK_OPACITY:13};c.AnnotationEditorParamsType=j;const D={PRINT:4,MODIFY_CONTENTS:8,COPY:16,MODIFY_ANNOTATIONS:32,FILL_INTERACTIVE_FORMS:256,COPY_FOR_ACCESSIBILITY:512,ASSEMBLE:1024,PRINT_HIGH_QUALITY:2048};c.PermissionFlag=D;const m={FILL:0,STROKE:1,FILL_STROKE:2,INVISIBLE:3,FILL_ADD_TO_PATH:4,STROKE_ADD_TO_PATH:5,FILL_STROKE_ADD_TO_PATH:6,ADD_TO_PATH:7,FILL_STROKE_MASK:3,ADD_TO_PATH_FLAG:4};c.TextRenderingMode=m;const d={GRAYSCALE_1BPP:1,RGB_24BPP:2,RGBA_32BPP:3};c.ImageKind=d;const C={TEXT:1,LINK:2,FREETEXT:3,LINE:4,SQUARE:5,CIRCLE:6,POLYGON:7,POLYLINE:8,HIGHLIGHT:9,UNDERLINE:10,SQUIGGLY:11,STRIKEOUT:12,STAMP:13,CARET:14,INK:15,POPUP:16,FILEATTACHMENT:17,SOUND:18,MOVIE:19,WIDGET:20,SCREEN:21,PRINTERMARK:22,TRAPNET:23,WATERMARK:24,THREED:25,REDACT:26};c.AnnotationType=C;const l={MARKED:"Marked",REVIEW:"Review"};c.AnnotationStateModelType=l;const B={MARKED:"Marked",UNMARKED:"Unmarked"};c.AnnotationMarkedState=B;const Y={ACCEPTED:"Accepted",REJECTED:"Rejected",CANCELLED:"Cancelled",COMPLETED:"Completed",NONE:"None"};c.AnnotationReviewState=Y;const a={GROUP:"Group",REPLY:"R"};c.AnnotationReplyType=a;const i={INVISIBLE:1,HIDDEN:2,PRINT:4,NOZOOM:8,NOROTATE:16,NOVIEW:32,READONLY:64,LOCKED:128,TOGGLENOVIEW:256,LOCKEDCONTENTS:512};c.AnnotationFlag=i;const I={READONLY:1,REQUIRED:2,NOEXPORT:4,MULTILINE:4096,PASSWORD:8192,NOTOGGLETOOFF:16384,RADIO:32768,PUSHBUTTON:65536,COMBO:131072,EDIT:262144,SORT:524288,FILESELECT:1048576,MULTISELECT:2097152,DONOTSPELLCHECK:4194304,DONOTSCROLL:8388608,COMB:16777216,RICHTEXT:33554432,RADIOSINUNISON:33554432,COMMITONSELCHANGE:67108864};c.AnnotationFieldFlag=I;const g={SOLID:1,DASHED:2,BEVELED:3,INSET:4,UNDERLINE:5};c.AnnotationBorderStyleType=g;const o={E:"Mouse Enter",X:"Mouse Exit",D:"Mouse Down",U:"Mouse Up",Fo:"Focus",Bl:"Blur",PO:"PageOpen",PC:"PageClose",PV:"PageVisible",PI:"PageInvisible",K:"Keystroke",F:"Format",V:"Validate",C:"Calculate"};c.AnnotationActionEventType=o;const X={WC:"WillClose",WS:"WillSave",DS:"DidSave",WP:"WillPrint",DP:"DidPrint"};c.DocumentActionEventType=X;const b={O:"PageOpen",C:"PageClose"};c.PageActionEventType=b;const N={UNKNOWN:"UNKNOWN",FLATE:"FLATE",LZW:"LZW",DCT:"DCT",JPX:"JPX",JBIG:"JBIG",A85:"A85",AHX:"AHX",CCF:"CCF",RLX:"RLX"};c.StreamType=N;const F={UNKNOWN:"UNKNOWN",TYPE1:"TYPE1",TYPE1STANDARD:"TYPE1STANDARD",TYPE1C:"TYPE1C",CIDFONTTYPE0:"CIDFONTTYPE0",CIDFONTTYPE0C:"CIDFONTTYPE0C",TRUETYPE:"TRUETYPE",CIDFONTTYPE2:"CIDFONTTYPE2",TYPE3:"TYPE3",OPENTYPE:"OPENTYPE",TYPE0:"TYPE0",MMTYPE1:"MMTYPE1"};c.FontType=F;const hI={ERRORS:0,WARNINGS:1,INFOS:5};c.VerbosityLevel=hI;const YI={NONE:0,BINARY:1,STREAM:2};c.CMapCompressionType=YI;const nI={dependency:1,setLineWidth:2,setLineCap:3,setLineJoin:4,setMiterLimit:5,setDash:6,setRenderingIntent:7,setFlatness:8,setGState:9,save:10,restore:11,transform:12,moveTo:13,lineTo:14,curveTo:15,curveTo2:16,curveTo3:17,closePath:18,rectangle:19,stroke:20,closeStroke:21,fill:22,eoFill:23,fillStroke:24,eoFillStroke:25,closeFillStroke:26,closeEOFillStroke:27,endPath:28,clip:29,eoClip:30,beginText:31,endText:32,setCharSpacing:33,setWordSpacing:34,setHScale:35,setLeading:36,setFont:37,setTextRenderingMode:38,setTextRise:39,moveText:40,setLeadingMoveText:41,setTextMatrix:42,nextLine:43,showText:44,showSpacedText:45,nextLineShowText:46,nextLineSetSpacingShowText:47,setCharWidth:48,setCharWidthAndBounds:49,setStrokeColorSpace:50,setFillColorSpace:51,setStrokeColor:52,setStrokeColorN:53,setFillColor:54,setFillColorN:55,setStrokeGray:56,setFillGray:57,setStrokeRGBColor:58,setFillRGBColor:59,setStrokeCMYKColor:60,setFillCMYKColor:61,shadingFill:62,beginInlineImage:63,beginImageData:64,endInlineImage:65,paintXObject:66,markPoint:67,markPointProps:68,beginMarkedContent:69,beginMarkedContentProps:70,endMarkedContent:71,beginCompat:72,endCompat:73,paintFormXObjectBegin:74,paintFormXObjectEnd:75,beginGroup:76,endGroup:77,beginAnnotations:78,endAnnotations:79,beginAnnotation:80,endAnnotation:81,paintJpegXObject:82,paintImageMaskXObject:83,paintImageMaskXObjectGroup:84,paintImageXObject:85,paintInlineImageXObject:86,paintInlineImageXObjectGroup:87,paintImageXObjectRepeat:88,paintImageMaskXObjectRepeat:89,paintSolidColorImageMask:90,constructPath:91};c.OPS=nI;const gI={unknown:"unknown",forms:"forms",javaScript:"javaScript",signatures:"signatures",smask:"smask",shadingPattern:"shadingPattern",font:"font",errorTilingPattern:"errorTilingPattern",errorExtGState:"errorExtGState",errorXObject:"errorXObject",errorFontLoadType3:"errorFontLoadType3",errorFontState:"errorFontState",errorFontMissing:"errorFontMissing",errorFontTranslate:"errorFontTranslate",errorColorSpace:"errorColorSpace",errorOperatorList:"errorOperatorList",errorFontToUnicode:"errorFontToUnicode",errorFontLoadNative:"errorFontLoadNative",errorFontBuildPath:"errorFontBuildPath",errorFontGetPath:"errorFontGetPath",errorMarkedContent:"errorMarkedContent",errorContentSubStream:"errorContentSubStream"};c.UNSUPPORTED_FEATURES=gI;const U={NEED_PASSWORD:1,INCORRECT_PASSWORD:2};c.PasswordResponses=U;let II=hI.WARNINGS;function q(cI){Number.isInteger(cI)&&(II=cI)}function mI(){return II}function NI(cI){II>=hI.INFOS&&console.log(`Info: ${cI}`)}function BI(cI){II>=hI.WARNINGS&&console.log(`Warning: ${cI}`)}function J(cI){throw new Error(cI)}function e(cI,CI){cI||J(CI)}function w(cI){if(!cI)return!1;switch(cI.protocol){case"http:":case"https:":case"ftp:":case"mailto:":case"tel:":return!0;default:return!1}}function x(cI,CI=null,AI=null){if(!cI)return null;try{if(AI&&typeof cI=="string"){if(AI.addDefaultProtocol&&cI.startsWith("www.")){const LI=cI.match(/\./g);LI&&LI.length>=2&&(cI=`http://${cI}`)}if(AI.tryConvertEncoding)try{cI=PI(cI)}catch{}}const KI=CI?new URL(cI,CI):new URL(cI);if(w(KI))return KI}catch{}return null}function E(cI,CI,AI){return Object.defineProperty(cI,CI,{value:AI,enumerable:!0,configurable:!0,writable:!1}),AI}const P=function(){function cI(CI,AI){this.constructor===cI&&J("Cannot initialize BaseException."),this.message=CI,this.name=AI}return cI.prototype=new Error,cI.constructor=cI,cI}();c.BaseException=P;class iI extends P{constructor(CI,AI){super(CI,"PasswordException"),this.code=AI}}c.PasswordException=iI;class aI extends P{constructor(CI,AI){super(CI,"UnknownErrorException"),this.details=AI}}c.UnknownErrorException=aI;class eI extends P{constructor(CI){super(CI,"InvalidPDFException")}}c.InvalidPDFException=eI;class A extends P{constructor(CI){super(CI,"MissingPDFException")}}c.MissingPDFException=A;class W extends P{constructor(CI,AI){super(CI,"UnexpectedResponseException"),this.status=AI}}c.UnexpectedResponseException=W;class L extends P{constructor(CI){super(CI,"FormatError")}}c.FormatError=L;class S extends P{constructor(CI){super(CI,"AbortException")}}c.AbortException=S;function Q(cI){(typeof cI!="object"||cI===null||cI.length===void 0)&&J("Invalid argument for bytesToString");const CI=cI.length,AI=8192;if(CI<AI)return String.fromCharCode.apply(null,cI);const KI=[];for(let LI=0;LI<CI;LI+=AI){const rI=Math.min(LI+AI,CI),kI=cI.subarray(LI,rI);KI.push(String.fromCharCode.apply(null,kI))}return KI.join("")}function lI(cI){typeof cI!="string"&&J("Invalid argument for stringToBytes");const CI=cI.length,AI=new Uint8Array(CI);for(let KI=0;KI<CI;++KI)AI[KI]=cI.charCodeAt(KI)&255;return AI}function uI(cI){if(cI.length!==void 0)return cI.length;if(cI.byteLength!==void 0)return cI.byteLength;J("Invalid argument for arrayByteLength")}function MI(cI){const CI=cI.length;if(CI===1&&cI[0]instanceof Uint8Array)return cI[0];let AI=0;for(let rI=0;rI<CI;rI++)AI+=uI(cI[rI]);let KI=0;const LI=new Uint8Array(AI);for(let rI=0;rI<CI;rI++){let kI=cI[rI];kI instanceof Uint8Array||(typeof kI=="string"?kI=lI(kI):kI=new Uint8Array(kI));const xI=kI.byteLength;LI.set(kI,KI),KI+=xI}return LI}function ZI(cI){return String.fromCharCode(cI>>24&255,cI>>16&255,cI>>8&255,cI&255)}function WI(cI){return Object.keys(cI).length}function tI(cI){const CI=Object.create(null);for(const[AI,KI]of cI)CI[AI]=KI;return CI}function O(){const cI=new Uint8Array(4);return cI[0]=1,new Uint32Array(cI.buffer,0,1)[0]===1}function f(){try{return new Function(""),!0}catch{return!1}}class v{static get isLittleEndian(){return E(this,"isLittleEndian",O())}static get isEvalSupported(){return E(this,"isEvalSupported",f())}static get isOffscreenCanvasSupported(){return E(this,"isOffscreenCanvasSupported",typeof OffscreenCanvas<"u")}}c.FeatureTest=v;const RI=[...Array(256).keys()].map(cI=>cI.toString(16).padStart(2,"0"));class pI{static makeHexColor(CI,AI,KI){return`#${RI[CI]}${RI[AI]}${RI[KI]}`}static scaleMinMax(CI,AI){let KI;CI[0]?(CI[0]<0&&(KI=AI[0],AI[0]=AI[1],AI[1]=KI),AI[0]*=CI[0],AI[1]*=CI[0],CI[3]<0&&(KI=AI[2],AI[2]=AI[3],AI[3]=KI),AI[2]*=CI[3],AI[3]*=CI[3]):(KI=AI[0],AI[0]=AI[2],AI[2]=KI,KI=AI[1],AI[1]=AI[3],AI[3]=KI,CI[1]<0&&(KI=AI[2],AI[2]=AI[3],AI[3]=KI),AI[2]*=CI[1],AI[3]*=CI[1],CI[2]<0&&(KI=AI[0],AI[0]=AI[1],AI[1]=KI),AI[0]*=CI[2],AI[1]*=CI[2]),AI[0]+=CI[4],AI[1]+=CI[4],AI[2]+=CI[5],AI[3]+=CI[5]}static transform(CI,AI){return[CI[0]*AI[0]+CI[2]*AI[1],CI[1]*AI[0]+CI[3]*AI[1],CI[0]*AI[2]+CI[2]*AI[3],CI[1]*AI[2]+CI[3]*AI[3],CI[0]*AI[4]+CI[2]*AI[5]+CI[4],CI[1]*AI[4]+CI[3]*AI[5]+CI[5]]}static applyTransform(CI,AI){const KI=CI[0]*AI[0]+CI[1]*AI[2]+AI[4],LI=CI[0]*AI[1]+CI[1]*AI[3]+AI[5];return[KI,LI]}static applyInverseTransform(CI,AI){const KI=AI[0]*AI[3]-AI[1]*AI[2],LI=(CI[0]*AI[3]-CI[1]*AI[2]+AI[2]*AI[5]-AI[4]*AI[3])/KI,rI=(-CI[0]*AI[1]+CI[1]*AI[0]+AI[4]*AI[1]-AI[5]*AI[0])/KI;return[LI,rI]}static getAxialAlignedBoundingBox(CI,AI){const KI=pI.applyTransform(CI,AI),LI=pI.applyTransform(CI.slice(2,4),AI),rI=pI.applyTransform([CI[0],CI[3]],AI),kI=pI.applyTransform([CI[2],CI[1]],AI);return[Math.min(KI[0],LI[0],rI[0],kI[0]),Math.min(KI[1],LI[1],rI[1],kI[1]),Math.max(KI[0],LI[0],rI[0],kI[0]),Math.max(KI[1],LI[1],rI[1],kI[1])]}static inverseTransform(CI){const AI=CI[0]*CI[3]-CI[1]*CI[2];return[CI[3]/AI,-CI[1]/AI,-CI[2]/AI,CI[0]/AI,(CI[2]*CI[5]-CI[4]*CI[3])/AI,(CI[4]*CI[1]-CI[5]*CI[0])/AI]}static apply3dTransform(CI,AI){return[CI[0]*AI[0]+CI[1]*AI[1]+CI[2]*AI[2],CI[3]*AI[0]+CI[4]*AI[1]+CI[5]*AI[2],CI[6]*AI[0]+CI[7]*AI[1]+CI[8]*AI[2]]}static singularValueDecompose2dScale(CI){const AI=[CI[0],CI[2],CI[1],CI[3]],KI=CI[0]*AI[0]+CI[1]*AI[2],LI=CI[0]*AI[1]+CI[1]*AI[3],rI=CI[2]*AI[0]+CI[3]*AI[2],kI=CI[2]*AI[1]+CI[3]*AI[3],xI=(KI+kI)/2,_I=Math.sqrt((KI+kI)**2-4*(KI*kI-rI*LI))/2,$I=xI+_I||1,OI=xI-_I||1;return[Math.sqrt($I),Math.sqrt(OI)]}static normalizeRect(CI){const AI=CI.slice(0);return CI[0]>CI[2]&&(AI[0]=CI[2],AI[2]=CI[0]),CI[1]>CI[3]&&(AI[1]=CI[3],AI[3]=CI[1]),AI}static intersect(CI,AI){const KI=Math.max(Math.min(CI[0],CI[2]),Math.min(AI[0],AI[2])),LI=Math.min(Math.max(CI[0],CI[2]),Math.max(AI[0],AI[2]));if(KI>LI)return null;const rI=Math.max(Math.min(CI[1],CI[3]),Math.min(AI[1],AI[3])),kI=Math.min(Math.max(CI[1],CI[3]),Math.max(AI[1],AI[3]));return rI>kI?null:[KI,rI,LI,kI]}static bezierBoundingBox(CI,AI,KI,LI,rI,kI,xI,_I){const $I=[],OI=[[],[]];let gg,Ig,Ag,qI,lg,ig,og,Zg;for(let Gg=0;Gg<2;++Gg){if(Gg===0?(Ig=6*CI-12*KI+6*rI,gg=-3*CI+9*KI-9*rI+3*xI,Ag=3*KI-3*CI):(Ig=6*AI-12*LI+6*kI,gg=-3*AI+9*LI-9*kI+3*_I,Ag=3*LI-3*AI),Math.abs(gg)<1e-12){if(Math.abs(Ig)<1e-12)continue;qI=-Ag/Ig,0<qI&&qI<1&&$I.push(qI);continue}og=Ig*Ig-4*Ag*gg,Zg=Math.sqrt(og),!(og<0)&&(lg=(-Ig+Zg)/(2*gg),0<lg&&lg<1&&$I.push(lg),ig=(-Ig-Zg)/(2*gg),0<ig&&ig<1&&$I.push(ig))}let sg=$I.length,Cg;const dg=sg;for(;sg--;)qI=$I[sg],Cg=1-qI,OI[0][sg]=Cg*Cg*Cg*CI+3*Cg*Cg*qI*KI+3*Cg*qI*qI*rI+qI*qI*qI*xI,OI[1][sg]=Cg*Cg*Cg*AI+3*Cg*Cg*qI*LI+3*Cg*qI*qI*kI+qI*qI*qI*_I;return OI[0][dg]=CI,OI[1][dg]=AI,OI[0][dg+1]=xI,OI[1][dg+1]=_I,OI[0].length=OI[1].length=dg+2,[Math.min(...OI[0]),Math.min(...OI[1]),Math.max(...OI[0]),Math.max(...OI[1])]}}c.Util=pI;const DI=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,728,711,710,729,733,731,730,732,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8226,8224,8225,8230,8212,8211,402,8260,8249,8250,8722,8240,8222,8220,8221,8216,8217,8218,8482,64257,64258,321,338,352,376,381,305,322,339,353,382,0,8364];function FI(cI){if(cI[0]>="ï"){let AI;if(cI[0]==="þ"&&cI[1]==="ÿ"?AI="utf-16be":cI[0]==="ÿ"&&cI[1]==="þ"?AI="utf-16le":cI[0]==="ï"&&cI[1]==="»"&&cI[2]==="¿"&&(AI="utf-8"),AI)try{const KI=new TextDecoder(AI,{fatal:!0}),LI=lI(cI);return KI.decode(LI)}catch(KI){BI(`stringToPDFString: "${KI}".`)}}const CI=[];for(let AI=0,KI=cI.length;AI<KI;AI++){const LI=DI[cI.charCodeAt(AI)];CI.push(LI?String.fromCharCode(LI):cI.charAt(AI))}return CI.join("")}function TI(cI){return cI.replace(/([()\\\n\r])/g,CI=>CI===`
`?"\\n":CI==="\r"?"\\r":`\\${CI}`)}function vI(cI){return/^[\x00-\x7F]*$/.test(cI)}function fI(cI){const CI=["þÿ"];for(let AI=0,KI=cI.length;AI<KI;AI++){const LI=cI.charCodeAt(AI);CI.push(String.fromCharCode(LI>>8&255),String.fromCharCode(LI&255))}return CI.join("")}function PI(cI){return decodeURIComponent(escape(cI))}function EI(cI){return unescape(encodeURIComponent(cI))}function SI(cI){return typeof cI=="object"&&cI!==null&&cI.byteLength!==void 0}function JI(cI,CI){if(cI.length!==CI.length)return!1;for(let AI=0,KI=cI.length;AI<KI;AI++)if(cI[AI]!==CI[AI])return!1;return!0}function yI(cI=new Date){return[cI.getUTCFullYear().toString(),(cI.getUTCMonth()+1).toString().padStart(2,"0"),cI.getUTCDate().toString().padStart(2,"0"),cI.getUTCHours().toString().padStart(2,"0"),cI.getUTCMinutes().toString().padStart(2,"0"),cI.getUTCSeconds().toString().padStart(2,"0")].join("")}function HI(){const cI=Object.create(null);let CI=!1;return Object.defineProperty(cI,"settled",{get(){return CI}}),cI.promise=new Promise(function(AI,KI){cI.resolve=function(LI){CI=!0,AI(LI)},cI.reject=function(LI){CI=!0,KI(LI)}}),cI}},(wI,c,$)=>{$(3)},(wI,c)=>{Object.defineProperty(c,"__esModule",{value:!0}),c.isNodeJS=void 0;const $=typeof process=="object"&&process+""=="[object process]"&&!process.versions.nw&&!(process.versions.electron&&process.type&&process.type!=="browser");c.isNodeJS=$},(__unused_webpack_module,exports,__w_pdfjs_require__)=>{var oI,sI,K,t,dI,k,y,H,s,Wg,u,V;Object.defineProperty(exports,"__esModule",{value:!0}),exports.build=exports.RenderTask=exports.PDFWorkerUtil=exports.PDFWorker=exports.PDFPageProxy=exports.PDFDocumentProxy=exports.PDFDocumentLoadingTask=exports.PDFDataRangeTransport=exports.LoopbackPort=exports.DefaultStandardFontDataFactory=exports.DefaultCanvasFactory=exports.DefaultCMapReaderFactory=void 0,exports.getDocument=getDocument,exports.setPDFNetworkStreamFactory=setPDFNetworkStreamFactory,exports.version=void 0;var _util=__w_pdfjs_require__(1),_annotation_storage=__w_pdfjs_require__(5),_display_utils=__w_pdfjs_require__(8),_font_loader=__w_pdfjs_require__(11),_canvas=__w_pdfjs_require__(12),_worker_options=__w_pdfjs_require__(15),_is_node=__w_pdfjs_require__(3),_message_handler=__w_pdfjs_require__(16),_metadata=__w_pdfjs_require__(17),_optional_content_config=__w_pdfjs_require__(18),_transport_stream=__w_pdfjs_require__(19),_xfa_text=__w_pdfjs_require__(20);const DEFAULT_RANGE_CHUNK_SIZE=65536,RENDERING_CANCELLED_TIMEOUT=100;let DefaultCanvasFactory=_display_utils.DOMCanvasFactory;exports.DefaultCanvasFactory=DefaultCanvasFactory;let DefaultCMapReaderFactory=_display_utils.DOMCMapReaderFactory;exports.DefaultCMapReaderFactory=DefaultCMapReaderFactory;let DefaultStandardFontDataFactory=_display_utils.DOMStandardFontDataFactory;if(exports.DefaultStandardFontDataFactory=DefaultStandardFontDataFactory,_is_node.isNodeJS){const{NodeCanvasFactory:wI,NodeCMapReaderFactory:c,NodeStandardFontDataFactory:$}=__w_pdfjs_require__(21);exports.DefaultCanvasFactory=DefaultCanvasFactory=wI,exports.DefaultCMapReaderFactory=DefaultCMapReaderFactory=c,exports.DefaultStandardFontDataFactory=DefaultStandardFontDataFactory=$}let createPDFNetworkStream;function setPDFNetworkStreamFactory(wI){createPDFNetworkStream=wI}function getDocument(wI){const c=new PDFDocumentLoadingTask;let $;if(typeof wI=="string"||wI instanceof URL)$={url:wI};else if((0,_util.isArrayBuffer)(wI))$={data:wI};else if(wI instanceof PDFDataRangeTransport)$={range:wI};else{if(typeof wI!="object")throw new Error("Invalid parameter in getDocument, need either string, URL, TypedArray, or parameter object.");if(!wI.url&&!wI.data&&!wI.range)throw new Error("Invalid parameter object: need either .data, .range or .url");$=wI}const h=Object.create(null);let M=null,_=null;for(const T in $){const r=$[T];switch(T){case"url":if(typeof window<"u")try{h[T]=new URL(r,window.location).href;continue}catch(Z){(0,_util.warn)(`Cannot create valid URL: "${Z}".`)}else if(typeof r=="string"||r instanceof URL){h[T]=r.toString();continue}throw new Error("Invalid PDF url data: either string or URL-object is expected in the url property.");case"range":M=r;continue;case"worker":_=r;continue;case"data":if(_is_node.isNodeJS&&typeof Buffer<"u"&&r instanceof Buffer)h[T]=new Uint8Array(r);else{if(r instanceof Uint8Array)break;if(typeof r=="string")h[T]=(0,_util.stringToBytes)(r);else if(typeof r=="object"&&r!==null&&!isNaN(r.length))h[T]=new Uint8Array(r);else if((0,_util.isArrayBuffer)(r))h[T]=new Uint8Array(r);else throw new Error("Invalid PDF binary data: either TypedArray, string, or array-like object is expected in the data property.")}continue}h[T]=r}if(h.CMapReaderFactory=h.CMapReaderFactory||DefaultCMapReaderFactory,h.StandardFontDataFactory=h.StandardFontDataFactory||DefaultStandardFontDataFactory,h.ignoreErrors=h.stopAtErrors!==!0,h.fontExtraProperties=h.fontExtraProperties===!0,h.pdfBug=h.pdfBug===!0,h.enableXfa=h.enableXfa===!0,(!Number.isInteger(h.rangeChunkSize)||h.rangeChunkSize<1)&&(h.rangeChunkSize=DEFAULT_RANGE_CHUNK_SIZE),(typeof h.docBaseUrl!="string"||(0,_display_utils.isDataScheme)(h.docBaseUrl))&&(h.docBaseUrl=null),(!Number.isInteger(h.maxImageSize)||h.maxImageSize<-1)&&(h.maxImageSize=-1),typeof h.cMapUrl!="string"&&(h.cMapUrl=null),typeof h.standardFontDataUrl!="string"&&(h.standardFontDataUrl=null),typeof h.useWorkerFetch!="boolean"&&(h.useWorkerFetch=h.CMapReaderFactory===_display_utils.DOMCMapReaderFactory&&h.StandardFontDataFactory===_display_utils.DOMStandardFontDataFactory),typeof h.isEvalSupported!="boolean"&&(h.isEvalSupported=!0),typeof h.disableFontFace!="boolean"&&(h.disableFontFace=_is_node.isNodeJS),typeof h.useSystemFonts!="boolean"&&(h.useSystemFonts=!_is_node.isNodeJS&&!h.disableFontFace),(typeof h.ownerDocument!="object"||h.ownerDocument===null)&&(h.ownerDocument=globalThis.document),typeof h.disableRange!="boolean"&&(h.disableRange=!1),typeof h.disableStream!="boolean"&&(h.disableStream=!1),typeof h.disableAutoFetch!="boolean"&&(h.disableAutoFetch=!1),(0,_util.setVerbosityLevel)(h.verbosity),!_){const T={verbosity:h.verbosity,port:_worker_options.GlobalWorkerOptions.workerPort};_=T.port?PDFWorker.fromPort(T):new PDFWorker(T),c._worker=_}const z=c.docId;return _.promise.then(function(){if(c.destroyed)throw new Error("Loading aborted");const T=_fetchDocument(_,h,M,z),r=new Promise(function(Z){let p;M?p=new _transport_stream.PDFDataTransportStream({length:h.length,initialData:h.initialData,progressiveDone:h.progressiveDone,contentDispositionFilename:h.contentDispositionFilename,disableRange:h.disableRange,disableStream:h.disableStream},M):h.data||(p=createPDFNetworkStream({url:h.url,length:h.length,httpHeaders:h.httpHeaders,withCredentials:h.withCredentials,rangeChunkSize:h.rangeChunkSize,disableRange:h.disableRange,disableStream:h.disableStream})),Z(p)});return Promise.all([T,r]).then(function([Z,p]){if(c.destroyed)throw new Error("Loading aborted");const j=new _message_handler.MessageHandler(z,Z,_.port),D=new WorkerTransport(j,c,p,h);c._transport=D,j.send("Ready",null)})}).catch(c._capability.reject),c}async function _fetchDocument(wI,c,$,h){if(wI.destroyed)throw new Error("Worker was destroyed");$&&(c.length=$.length,c.initialData=$.initialData,c.progressiveDone=$.progressiveDone,c.contentDispositionFilename=$.contentDispositionFilename);const M=await wI.messageHandler.sendWithPromise("GetDocRequest",{docId:h,apiVersion:"2.16.105",source:{data:c.data,url:c.url,password:c.password,disableAutoFetch:c.disableAutoFetch,rangeChunkSize:c.rangeChunkSize,length:c.length},maxImageSize:c.maxImageSize,disableFontFace:c.disableFontFace,docBaseUrl:c.docBaseUrl,ignoreErrors:c.ignoreErrors,isEvalSupported:c.isEvalSupported,fontExtraProperties:c.fontExtraProperties,enableXfa:c.enableXfa,useSystemFonts:c.useSystemFonts,cMapUrl:c.useWorkerFetch?c.cMapUrl:null,standardFontDataUrl:c.useWorkerFetch?c.standardFontDataUrl:null});if(c.data&&(c.data=null),wI.destroyed)throw new Error("Worker was destroyed");return M}const n=class{constructor(){this._capability=(0,_util.createPromiseCapability)(),this._transport=null,this._worker=null,this.docId=`d${wg(n,oI)._++}`,this.destroyed=!1,this.onPassword=null,this.onProgress=null,this.onUnsupportedFeature=null}get promise(){return this._capability.promise}async destroy(){var wI;this.destroyed=!0,await((wI=this._transport)==null?void 0:wI.destroy()),this._transport=null,this._worker&&(this._worker.destroy(),this._worker=null)}};let PDFDocumentLoadingTask=n;oI=new WeakMap,GI(PDFDocumentLoadingTask,oI,0),exports.PDFDocumentLoadingTask=PDFDocumentLoadingTask;class PDFDataRangeTransport{constructor(c,$,h=!1,M=null){this.length=c,this.initialData=$,this.progressiveDone=h,this.contentDispositionFilename=M,this._rangeListeners=[],this._progressListeners=[],this._progressiveReadListeners=[],this._progressiveDoneListeners=[],this._readyCapability=(0,_util.createPromiseCapability)()}addRangeListener(c){this._rangeListeners.push(c)}addProgressListener(c){this._progressListeners.push(c)}addProgressiveReadListener(c){this._progressiveReadListeners.push(c)}addProgressiveDoneListener(c){this._progressiveDoneListeners.push(c)}onDataRange(c,$){for(const h of this._rangeListeners)h(c,$)}onDataProgress(c,$){this._readyCapability.promise.then(()=>{for(const h of this._progressListeners)h(c,$)})}onDataProgressiveRead(c){this._readyCapability.promise.then(()=>{for(const $ of this._progressiveReadListeners)$(c)})}onDataProgressiveDone(){this._readyCapability.promise.then(()=>{for(const c of this._progressiveDoneListeners)c()})}transportReady(){this._readyCapability.resolve()}requestDataRange(c,$){(0,_util.unreachable)("Abstract method PDFDataRangeTransport.requestDataRange")}abort(){}}exports.PDFDataRangeTransport=PDFDataRangeTransport;class PDFDocumentProxy{constructor(c,$){this._pdfInfo=c,this._transport=$,Object.defineProperty(this,"fingerprint",{get(){return(0,_display_utils.deprecated)("`PDFDocumentProxy.fingerprint`, please use `PDFDocumentProxy.fingerprints` instead."),this.fingerprints[0]}}),Object.defineProperty(this,"getStats",{value:async()=>((0,_display_utils.deprecated)("`PDFDocumentProxy.getStats`, please use the `PDFDocumentProxy.stats`-getter instead."),this.stats||{streamTypes:{},fontTypes:{}})})}get annotationStorage(){return this._transport.annotationStorage}get numPages(){return this._pdfInfo.numPages}get fingerprints(){return this._pdfInfo.fingerprints}get stats(){return this._transport.stats}get isPureXfa(){return!!this._transport._htmlForXfa}get allXfaHtml(){return this._transport._htmlForXfa}getPage(c){return this._transport.getPage(c)}getPageIndex(c){return this._transport.getPageIndex(c)}getDestinations(){return this._transport.getDestinations()}getDestination(c){return this._transport.getDestination(c)}getPageLabels(){return this._transport.getPageLabels()}getPageLayout(){return this._transport.getPageLayout()}getPageMode(){return this._transport.getPageMode()}getViewerPreferences(){return this._transport.getViewerPreferences()}getOpenAction(){return this._transport.getOpenAction()}getAttachments(){return this._transport.getAttachments()}getJavaScript(){return this._transport.getJavaScript()}getJSActions(){return this._transport.getDocJSActions()}getOutline(){return this._transport.getOutline()}getOptionalContentConfig(){return this._transport.getOptionalContentConfig()}getPermissions(){return this._transport.getPermissions()}getMetadata(){return this._transport.getMetadata()}getMarkInfo(){return this._transport.getMarkInfo()}getData(){return this._transport.getData()}getDownloadInfo(){return this._transport.downloadInfoCapability.promise}cleanup(c=!1){return this._transport.startCleanup(c||this.isPureXfa)}destroy(){return this.loadingTask.destroy()}get loadingParams(){return this._transport.loadingParams}get loadingTask(){return this._transport.loadingTask}saveDocument(){return this._transport.annotationStorage.size<=0&&(0,_display_utils.deprecated)("saveDocument called while `annotationStorage` is empty, please use the getData-method instead."),this._transport.saveDocument()}getFieldObjects(){return this._transport.getFieldObjects()}hasJSActions(){return this._transport.hasJSActions()}getCalculationOrderIds(){return this._transport.getCalculationOrderIds()}}exports.PDFDocumentProxy=PDFDocumentProxy;class PDFPageProxy{constructor(c,$,h,M,_=!1){this._pageIndex=c,this._pageInfo=$,this._ownerDocument=M,this._transport=h,this._stats=_?new _display_utils.StatTimer:null,this._pdfBug=_,this.commonObjs=h.commonObjs,this.objs=new PDFObjects,this._bitmaps=new Set,this.cleanupAfterRender=!1,this.pendingCleanup=!1,this._intentStates=new Map,this._annotationPromises=new Map,this.destroyed=!1}get pageNumber(){return this._pageIndex+1}get rotate(){return this._pageInfo.rotate}get ref(){return this._pageInfo.ref}get userUnit(){return this._pageInfo.userUnit}get view(){return this._pageInfo.view}getViewport({scale:c,rotation:$=this.rotate,offsetX:h=0,offsetY:M=0,dontFlip:_=!1}={}){return new _display_utils.PageViewport({viewBox:this.view,scale:c,rotation:$,offsetX:h,offsetY:M,dontFlip:_})}getAnnotations({intent:c="display"}={}){const $=this._transport.getRenderingIntent(c);let h=this._annotationPromises.get($.cacheKey);return h||(h=this._transport.getAnnotations(this._pageIndex,$.renderingIntent),this._annotationPromises.set($.cacheKey,h),h=h.then(M=>{for(const _ of M)_.titleObj!==void 0&&Object.defineProperty(_,"title",{get(){return(0,_display_utils.deprecated)("`title`-property on annotation, please use `titleObj` instead."),_.titleObj.str}}),_.contentsObj!==void 0&&Object.defineProperty(_,"contents",{get(){return(0,_display_utils.deprecated)("`contents`-property on annotation, please use `contentsObj` instead."),_.contentsObj.str}});return M})),h}getJSActions(){return this._jsActionsPromise||(this._jsActionsPromise=this._transport.getPageJSActions(this._pageIndex))}async getXfa(){var c;return((c=this._transport._htmlForXfa)==null?void 0:c.children[this._pageIndex])||null}render({canvasContext:c,viewport:$,intent:h="display",annotationMode:M=_util.AnnotationMode.ENABLE,transform:_=null,imageLayer:z=null,canvasFactory:T=null,background:r=null,optionalContentConfigPromise:Z=null,annotationCanvasMap:p=null,pageColors:j=null,printAnnotationStorage:D=null}){var m,d;((m=arguments[0])==null?void 0:m.renderInteractiveForms)!==void 0&&((0,_display_utils.deprecated)("render no longer accepts the `renderInteractiveForms`-option, please use the `annotationMode`-option instead."),arguments[0].renderInteractiveForms===!0&&M===_util.AnnotationMode.ENABLE&&(M=_util.AnnotationMode.ENABLE_FORMS)),((d=arguments[0])==null?void 0:d.includeAnnotationStorage)!==void 0&&((0,_display_utils.deprecated)("render no longer accepts the `includeAnnotationStorage`-option, please use the `annotationMode`-option instead."),arguments[0].includeAnnotationStorage===!0&&M===_util.AnnotationMode.ENABLE&&(M=_util.AnnotationMode.ENABLE_STORAGE)),this._stats&&this._stats.time("Overall");const C=this._transport.getRenderingIntent(h,M,D);this.pendingCleanup=!1,Z||(Z=this._transport.getOptionalContentConfig());let l=this._intentStates.get(C.cacheKey);l||(l=Object.create(null),this._intentStates.set(C.cacheKey,l)),l.streamReaderCancelTimeout&&(clearTimeout(l.streamReaderCancelTimeout),l.streamReaderCancelTimeout=null);const B=T||new DefaultCanvasFactory({ownerDocument:this._ownerDocument}),Y=!!(C.renderingIntent&_util.RenderingIntentFlag.PRINT);l.displayReadyCapability||(l.displayReadyCapability=(0,_util.createPromiseCapability)(),l.operatorList={fnArray:[],argsArray:[],lastChunk:!1,separateAnnots:null},this._stats&&this._stats.time("Page Request"),this._pumpOperatorList(C));const a=g=>{l.renderTasks.delete(i),(this.cleanupAfterRender||Y)&&(this.pendingCleanup=!0),this._tryCleanup(),g?(i.capability.reject(g),this._abortOperatorList({intentState:l,reason:g instanceof Error?g:new Error(g)})):i.capability.resolve(),this._stats&&(this._stats.timeEnd("Rendering"),this._stats.timeEnd("Overall"))},i=new InternalRenderTask({callback:a,params:{canvasContext:c,viewport:$,transform:_,imageLayer:z,background:r},objs:this.objs,commonObjs:this.commonObjs,annotationCanvasMap:p,operatorList:l.operatorList,pageIndex:this._pageIndex,canvasFactory:B,useRequestAnimationFrame:!Y,pdfBug:this._pdfBug,pageColors:j});(l.renderTasks||(l.renderTasks=new Set)).add(i);const I=i.task;return Promise.all([l.displayReadyCapability.promise,Z]).then(([g,o])=>{if(this.pendingCleanup){a();return}this._stats&&this._stats.time("Rendering"),i.initializeGraphics({transparency:g,optionalContentConfig:o}),i.operatorListChanged()}).catch(a),I}getOperatorList({intent:c="display",annotationMode:$=_util.AnnotationMode.ENABLE,printAnnotationStorage:h=null}={}){function M(){z.operatorList.lastChunk&&(z.opListReadCapability.resolve(z.operatorList),z.renderTasks.delete(T))}const _=this._transport.getRenderingIntent(c,$,h,!0);let z=this._intentStates.get(_.cacheKey);z||(z=Object.create(null),this._intentStates.set(_.cacheKey,z));let T;return z.opListReadCapability||(T=Object.create(null),T.operatorListChanged=M,z.opListReadCapability=(0,_util.createPromiseCapability)(),(z.renderTasks||(z.renderTasks=new Set)).add(T),z.operatorList={fnArray:[],argsArray:[],lastChunk:!1,separateAnnots:null},this._stats&&this._stats.time("Page Request"),this._pumpOperatorList(_)),z.opListReadCapability.promise}streamTextContent({disableCombineTextItems:c=!1,includeMarkedContent:$=!1}={}){return this._transport.messageHandler.sendWithStream("GetTextContent",{pageIndex:this._pageIndex,combineTextItems:c!==!0,includeMarkedContent:$===!0},{highWaterMark:100,size(h){return h.items.length}})}getTextContent(c={}){if(this._transport._htmlForXfa)return this.getXfa().then(h=>_xfa_text.XfaText.textContent(h));const $=this.streamTextContent(c);return new Promise(function(h,M){function _(){z.read().then(function({value:r,done:Z}){if(Z){h(T);return}Object.assign(T.styles,r.styles),T.items.push(...r.items),_()},M)}const z=$.getReader(),T={items:[],styles:Object.create(null)};_()})}getStructTree(){return this._structTreePromise||(this._structTreePromise=this._transport.getStructTree(this._pageIndex))}_destroy(){this.destroyed=!0;const c=[];for(const $ of this._intentStates.values())if(this._abortOperatorList({intentState:$,reason:new Error("Page was destroyed."),force:!0}),!$.opListReadCapability)for(const h of $.renderTasks)c.push(h.completed),h.cancel();this.objs.clear();for(const $ of this._bitmaps)$.close();return this._bitmaps.clear(),this._annotationPromises.clear(),this._jsActionsPromise=null,this._structTreePromise=null,this.pendingCleanup=!1,Promise.all(c)}cleanup(c=!1){return this.pendingCleanup=!0,this._tryCleanup(c)}_tryCleanup(c=!1){if(!this.pendingCleanup)return!1;for(const{renderTasks:$,operatorList:h}of this._intentStates.values())if($.size>0||!h.lastChunk)return!1;this._intentStates.clear(),this.objs.clear(),this._annotationPromises.clear(),this._jsActionsPromise=null,this._structTreePromise=null,c&&this._stats&&(this._stats=new _display_utils.StatTimer);for(const $ of this._bitmaps)$.close();return this._bitmaps.clear(),this.pendingCleanup=!1,!0}_startRenderPage(c,$){const h=this._intentStates.get($);h&&(this._stats&&this._stats.timeEnd("Page Request"),h.displayReadyCapability&&h.displayReadyCapability.resolve(c))}_renderPageChunk(c,$){for(let h=0,M=c.length;h<M;h++)$.operatorList.fnArray.push(c.fnArray[h]),$.operatorList.argsArray.push(c.argsArray[h]);$.operatorList.lastChunk=c.lastChunk,$.operatorList.separateAnnots=c.separateAnnots;for(const h of $.renderTasks)h.operatorListChanged();c.lastChunk&&this._tryCleanup()}_pumpOperatorList({renderingIntent:c,cacheKey:$,annotationStorageMap:h}){const M=this._transport.messageHandler.sendWithStream("GetOperatorList",{pageIndex:this._pageIndex,intent:c,cacheKey:$,annotationStorage:h}).getReader(),_=this._intentStates.get($);_.streamReader=M;const z=()=>{M.read().then(({value:T,done:r})=>{if(r){_.streamReader=null;return}this._transport.destroyed||(this._renderPageChunk(T,_),z())},T=>{if(_.streamReader=null,!this._transport.destroyed){if(_.operatorList){_.operatorList.lastChunk=!0;for(const r of _.renderTasks)r.operatorListChanged();this._tryCleanup()}if(_.displayReadyCapability)_.displayReadyCapability.reject(T);else if(_.opListReadCapability)_.opListReadCapability.reject(T);else throw T}})};z()}_abortOperatorList({intentState:c,reason:$,force:h=!1}){if(c.streamReader){if(!h){if(c.renderTasks.size>0)return;if($ instanceof _display_utils.RenderingCancelledException){c.streamReaderCancelTimeout=setTimeout(()=>{this._abortOperatorList({intentState:c,reason:$,force:!0}),c.streamReaderCancelTimeout=null},RENDERING_CANCELLED_TIMEOUT);return}}if(c.streamReader.cancel(new _util.AbortException($.message)).catch(()=>{}),c.streamReader=null,!this._transport.destroyed){for(const[M,_]of this._intentStates)if(_===c){this._intentStates.delete(M);break}this.cleanup()}}}get stats(){return this._stats}}exports.PDFPageProxy=PDFPageProxy;class LoopbackPort{constructor(){this._listeners=[],this._deferred=Promise.resolve()}postMessage(c,$){const h={data:structuredClone(c,$)};this._deferred.then(()=>{for(const M of this._listeners)M.call(this,h)})}addEventListener(c,$){this._listeners.push($)}removeEventListener(c,$){const h=this._listeners.indexOf($);this._listeners.splice(h,1)}terminate(){this._listeners.length=0}}exports.LoopbackPort=LoopbackPort;const PDFWorkerUtil={isWorkerDisabled:!1,fallbackWorkerSrc:null,fakeWorkerId:0};exports.PDFWorkerUtil=PDFWorkerUtil;{if(_is_node.isNodeJS&&typeof commonjsRequire=="function")PDFWorkerUtil.isWorkerDisabled=!0,PDFWorkerUtil.fallbackWorkerSrc="./pdf.worker.js";else if(typeof document=="object"){const wI=(sI=document==null?void 0:document.currentScript)==null?void 0:sI.src;wI&&(PDFWorkerUtil.fallbackWorkerSrc=wI.replace(/(\.(?:min\.)?js)(\?.*)?$/i,".worker$1$2"))}PDFWorkerUtil.isSameOrigin=function(wI,c){let $;try{if($=new URL(wI),!$.origin||$.origin==="null")return!1}catch{return!1}const h=new URL(c,$);return $.origin===h.origin},PDFWorkerUtil.createCDNWrapper=function(wI){const c=`importScripts("${wI}");`;return URL.createObjectURL(new Blob([c]))}}const _PDFWorker=class{constructor({name:wI=null,port:c=null,verbosity:$=(0,_util.getVerbosityLevel)()}={}){if(c&&R(_PDFWorker,K).has(c))throw new Error("Cannot use more than one PDFWorker per port.");if(this.name=wI,this.destroyed=!1,this.verbosity=$,this._readyCapability=(0,_util.createPromiseCapability)(),this._port=null,this._webWorker=null,this._messageHandler=null,c){R(_PDFWorker,K).set(c,this),this._initializeFromPort(c);return}this._initialize()}get promise(){return this._readyCapability.promise}get port(){return this._port}get messageHandler(){return this._messageHandler}_initializeFromPort(wI){this._port=wI,this._messageHandler=new _message_handler.MessageHandler("main","worker",wI),this._messageHandler.on("ready",function(){}),this._readyCapability.resolve()}_initialize(){if(!PDFWorkerUtil.isWorkerDisabled&&!_PDFWorker._mainThreadWorkerMessageHandler){let{workerSrc:wI}=_PDFWorker;try{PDFWorkerUtil.isSameOrigin(window.location.href,wI)||(wI=PDFWorkerUtil.createCDNWrapper(new URL(wI,window.location).href));const c=new Worker(wI),$=new _message_handler.MessageHandler("main","worker",c),h=()=>{c.removeEventListener("error",M),$.destroy(),c.terminate(),this.destroyed?this._readyCapability.reject(new Error("Worker was destroyed")):this._setupFakeWorker()},M=()=>{this._webWorker||h()};c.addEventListener("error",M),$.on("test",z=>{if(c.removeEventListener("error",M),this.destroyed){h();return}z?(this._messageHandler=$,this._port=c,this._webWorker=c,this._readyCapability.resolve(),$.send("configure",{verbosity:this.verbosity})):(this._setupFakeWorker(),$.destroy(),c.terminate())}),$.on("ready",z=>{if(c.removeEventListener("error",M),this.destroyed){h();return}try{_()}catch{this._setupFakeWorker()}});const _=()=>{const z=new Uint8Array;$.send("test",z,[z.buffer])};_();return}catch{(0,_util.info)("The worker has been disabled.")}}this._setupFakeWorker()}_setupFakeWorker(){PDFWorkerUtil.isWorkerDisabled||((0,_util.warn)("Setting up fake worker."),PDFWorkerUtil.isWorkerDisabled=!0),_PDFWorker._setupFakeWorkerGlobal.then(wI=>{if(this.destroyed){this._readyCapability.reject(new Error("Worker was destroyed"));return}const c=new LoopbackPort;this._port=c;const $=`fake${PDFWorkerUtil.fakeWorkerId++}`,h=new _message_handler.MessageHandler($+"_worker",$,c);wI.setup(h,c);const M=new _message_handler.MessageHandler($,$+"_worker",c);this._messageHandler=M,this._readyCapability.resolve(),M.send("configure",{verbosity:this.verbosity})}).catch(wI=>{this._readyCapability.reject(new Error(`Setting up fake worker failed: "${wI.message}".`))})}destroy(){this.destroyed=!0,this._webWorker&&(this._webWorker.terminate(),this._webWorker=null),R(_PDFWorker,K).delete(this._port),this._port=null,this._messageHandler&&(this._messageHandler.destroy(),this._messageHandler=null)}static fromPort(wI){if(!(wI!=null&&wI.port))throw new Error("PDFWorker.fromPort - invalid method signature.");return R(this,K).has(wI.port)?R(this,K).get(wI.port):new _PDFWorker(wI)}static get workerSrc(){if(_worker_options.GlobalWorkerOptions.workerSrc)return _worker_options.GlobalWorkerOptions.workerSrc;if(PDFWorkerUtil.fallbackWorkerSrc!==null)return _is_node.isNodeJS||(0,_display_utils.deprecated)('No "GlobalWorkerOptions.workerSrc" specified.'),PDFWorkerUtil.fallbackWorkerSrc;throw new Error('No "GlobalWorkerOptions.workerSrc" specified.')}static get _mainThreadWorkerMessageHandler(){var wI;try{return((wI=globalThis.pdfjsWorker)==null?void 0:wI.WorkerMessageHandler)||null}catch{return null}}static get _setupFakeWorkerGlobal(){const loader=async()=>{const mainWorkerMessageHandler=this._mainThreadWorkerMessageHandler;if(mainWorkerMessageHandler)return mainWorkerMessageHandler;if(_is_node.isNodeJS&&typeof commonjsRequire=="function"){const worker=eval("require")(this.workerSrc);return worker.WorkerMessageHandler}return await(0,_display_utils.loadScript)(this.workerSrc),window.pdfjsWorker.WorkerMessageHandler};return(0,_util.shadow)(this,"_setupFakeWorkerGlobal",loader())}};let PDFWorker=_PDFWorker;K=new WeakMap,GI(PDFWorker,K,new WeakMap),exports.PDFWorker=PDFWorker,PDFWorker.getWorkerSrc=function(){return(0,_display_utils.deprecated)("`PDFWorker.getWorkerSrc()`, please use `PDFWorker.workerSrc` instead."),this.workerSrc};class WorkerTransport{constructor(c,$,h,M){GI(this,t,null),GI(this,dI,new Map),GI(this,k,new Map),GI(this,y,null),this.messageHandler=c,this.loadingTask=$,this.commonObjs=new PDFObjects,this.fontLoader=new _font_loader.FontLoader({docId:$.docId,onUnsupportedFeature:this._onUnsupportedFeature.bind(this),ownerDocument:M.ownerDocument,styleElement:M.styleElement}),this._params=M,M.useWorkerFetch||(this.CMapReaderFactory=new M.CMapReaderFactory({baseUrl:M.cMapUrl,isCompressed:M.cMapPacked}),this.StandardFontDataFactory=new M.StandardFontDataFactory({baseUrl:M.standardFontDataUrl})),this.destroyed=!1,this.destroyCapability=null,this._passwordCapability=null,this._networkStream=h,this._fullReader=null,this._lastProgress=null,this.downloadInfoCapability=(0,_util.createPromiseCapability)(),this.setupMessageHandler()}get annotationStorage(){return(0,_util.shadow)(this,"annotationStorage",new _annotation_storage.AnnotationStorage)}get stats(){return R(this,t)}getRenderingIntent(c,$=_util.AnnotationMode.ENABLE,h=null,M=!1){let _=_util.RenderingIntentFlag.DISPLAY,z=null;switch(c){case"any":_=_util.RenderingIntentFlag.ANY;break;case"display":break;case"print":_=_util.RenderingIntentFlag.PRINT;break;default:(0,_util.warn)(`getRenderingIntent - invalid intent: ${c}`)}switch($){case _util.AnnotationMode.DISABLE:_+=_util.RenderingIntentFlag.ANNOTATIONS_DISABLE;break;case _util.AnnotationMode.ENABLE:break;case _util.AnnotationMode.ENABLE_FORMS:_+=_util.RenderingIntentFlag.ANNOTATIONS_FORMS;break;case _util.AnnotationMode.ENABLE_STORAGE:_+=_util.RenderingIntentFlag.ANNOTATIONS_STORAGE,z=(_&_util.RenderingIntentFlag.PRINT&&h instanceof _annotation_storage.PrintAnnotationStorage?h:this.annotationStorage).serializable;break;default:(0,_util.warn)(`getRenderingIntent - invalid annotationMode: ${$}`)}return M&&(_+=_util.RenderingIntentFlag.OPLIST),{renderingIntent:_,cacheKey:`${_}_${_annotation_storage.AnnotationStorage.getHash(z)}`,annotationStorageMap:z}}destroy(){if(this.destroyCapability)return this.destroyCapability.promise;this.destroyed=!0,this.destroyCapability=(0,_util.createPromiseCapability)(),this._passwordCapability&&this._passwordCapability.reject(new Error("Worker was destroyed during onPassword callback"));const c=[];for(const h of R(this,dI).values())c.push(h._destroy());R(this,dI).clear(),R(this,k).clear(),this.hasOwnProperty("annotationStorage")&&this.annotationStorage.resetModified();const $=this.messageHandler.sendWithPromise("Terminate",null);return c.push($),Promise.all(c).then(()=>{this.commonObjs.clear(),this.fontLoader.clear(),XI(this,y,null),this._getFieldObjectsPromise=null,this._hasJSActionsPromise=null,this._networkStream&&this._networkStream.cancelAllRequests(new _util.AbortException("Worker was terminated.")),this.messageHandler&&(this.messageHandler.destroy(),this.messageHandler=null),this.destroyCapability.resolve()},this.destroyCapability.reject),this.destroyCapability.promise}setupMessageHandler(){const{messageHandler:c,loadingTask:$}=this;c.on("GetReader",(h,M)=>{(0,_util.assert)(this._networkStream,"GetReader - no `IPDFStream` instance available."),this._fullReader=this._networkStream.getFullReader(),this._fullReader.onProgress=_=>{this._lastProgress={loaded:_.loaded,total:_.total}},M.onPull=()=>{this._fullReader.read().then(function({value:_,done:z}){if(z){M.close();return}(0,_util.assert)((0,_util.isArrayBuffer)(_),"GetReader - expected an ArrayBuffer."),M.enqueue(new Uint8Array(_),1,[_])}).catch(_=>{M.error(_)})},M.onCancel=_=>{this._fullReader.cancel(_),M.ready.catch(z=>{if(!this.destroyed)throw z})}}),c.on("ReaderHeadersReady",h=>{const M=(0,_util.createPromiseCapability)(),_=this._fullReader;return _.headersReady.then(()=>{var z;(!_.isStreamingSupported||!_.isRangeSupported)&&(this._lastProgress&&((z=$.onProgress)==null||z.call($,this._lastProgress)),_.onProgress=T=>{var r;(r=$.onProgress)==null||r.call($,{loaded:T.loaded,total:T.total})}),M.resolve({isStreamingSupported:_.isStreamingSupported,isRangeSupported:_.isRangeSupported,contentLength:_.contentLength})},M.reject),M.promise}),c.on("GetRangeReader",(h,M)=>{(0,_util.assert)(this._networkStream,"GetRangeReader - no `IPDFStream` instance available.");const _=this._networkStream.getRangeReader(h.begin,h.end);if(!_){M.close();return}M.onPull=()=>{_.read().then(function({value:z,done:T}){if(T){M.close();return}(0,_util.assert)((0,_util.isArrayBuffer)(z),"GetRangeReader - expected an ArrayBuffer."),M.enqueue(new Uint8Array(z),1,[z])}).catch(z=>{M.error(z)})},M.onCancel=z=>{_.cancel(z),M.ready.catch(T=>{if(!this.destroyed)throw T})}}),c.on("GetDoc",({pdfInfo:h})=>{this._numPages=h.numPages,this._htmlForXfa=h.htmlForXfa,delete h.htmlForXfa,$._capability.resolve(new PDFDocumentProxy(h,this))}),c.on("DocException",function(h){let M;switch(h.name){case"PasswordException":M=new _util.PasswordException(h.message,h.code);break;case"InvalidPDFException":M=new _util.InvalidPDFException(h.message);break;case"MissingPDFException":M=new _util.MissingPDFException(h.message);break;case"UnexpectedResponseException":M=new _util.UnexpectedResponseException(h.message,h.status);break;case"UnknownErrorException":M=new _util.UnknownErrorException(h.message,h.details);break;default:(0,_util.unreachable)("DocException - expected a valid Error.")}$._capability.reject(M)}),c.on("PasswordRequest",h=>{if(this._passwordCapability=(0,_util.createPromiseCapability)(),$.onPassword){const M=_=>{_ instanceof Error?this._passwordCapability.reject(_):this._passwordCapability.resolve({password:_})};try{$.onPassword(M,h.code)}catch(_){this._passwordCapability.reject(_)}}else this._passwordCapability.reject(new _util.PasswordException(h.message,h.code));return this._passwordCapability.promise}),c.on("DataLoaded",h=>{var M;(M=$.onProgress)==null||M.call($,{loaded:h.length,total:h.length}),this.downloadInfoCapability.resolve(h)}),c.on("StartRenderPage",h=>{this.destroyed||R(this,dI).get(h.pageIndex)._startRenderPage(h.transparency,h.cacheKey)}),c.on("commonobj",([h,M,_])=>{var z;if(!this.destroyed&&!this.commonObjs.has(h))switch(M){case"Font":const T=this._params;if("error"in _){const p=_.error;(0,_util.warn)(`Error during font loading: ${p}`),this.commonObjs.resolve(h,p);break}let r=null;T.pdfBug&&(z=globalThis.FontInspector)!=null&&z.enabled&&(r={registerFont(p,j){globalThis.FontInspector.fontAdded(p,j)}});const Z=new _font_loader.FontFaceObject(_,{isEvalSupported:T.isEvalSupported,disableFontFace:T.disableFontFace,ignoreErrors:T.ignoreErrors,onUnsupportedFeature:this._onUnsupportedFeature.bind(this),fontRegistry:r});this.fontLoader.bind(Z).catch(p=>c.sendWithPromise("FontFallback",{id:h})).finally(()=>{!T.fontExtraProperties&&Z.data&&(Z.data=null),this.commonObjs.resolve(h,Z)});break;case"FontPath":case"Image":this.commonObjs.resolve(h,_);break;default:throw new Error(`Got unknown common object type ${M}`)}}),c.on("obj",([h,M,_,z])=>{var T;if(this.destroyed)return;const r=R(this,dI).get(M);if(!r.objs.has(h))switch(_){case"Image":r.objs.resolve(h,z);const Z=8e6;if(z){let p;if(z.bitmap){const{bitmap:j,width:D,height:m}=z;p=D*m*4,r._bitmaps.add(j)}else p=((T=z.data)==null?void 0:T.length)||0;p>Z&&(r.cleanupAfterRender=!0)}break;case"Pattern":r.objs.resolve(h,z);break;default:throw new Error(`Got unknown object type ${_}`)}}),c.on("DocProgress",h=>{var M;this.destroyed||(M=$.onProgress)==null||M.call($,{loaded:h.loaded,total:h.total})}),c.on("DocStats",h=>{this.destroyed||XI(this,t,Object.freeze({streamTypes:Object.freeze(h.streamTypes),fontTypes:Object.freeze(h.fontTypes)}))}),c.on("UnsupportedFeature",this._onUnsupportedFeature.bind(this)),c.on("FetchBuiltInCMap",h=>this.destroyed?Promise.reject(new Error("Worker was destroyed.")):this.CMapReaderFactory?this.CMapReaderFactory.fetch(h):Promise.reject(new Error("CMapReaderFactory not initialized, see the `useWorkerFetch` parameter."))),c.on("FetchStandardFontData",h=>this.destroyed?Promise.reject(new Error("Worker was destroyed.")):this.StandardFontDataFactory?this.StandardFontDataFactory.fetch(h):Promise.reject(new Error("StandardFontDataFactory not initialized, see the `useWorkerFetch` parameter.")))}_onUnsupportedFeature({featureId:c}){var $,h;this.destroyed||(h=($=this.loadingTask).onUnsupportedFeature)==null||h.call($,c)}getData(){return this.messageHandler.sendWithPromise("GetData",null)}getPage(c){if(!Number.isInteger(c)||c<=0||c>this._numPages)return Promise.reject(new Error("Invalid page request."));const $=c-1,h=R(this,k).get($);if(h)return h;const M=this.messageHandler.sendWithPromise("GetPage",{pageIndex:$}).then(_=>{if(this.destroyed)throw new Error("Transport destroyed");const z=new PDFPageProxy($,_,this,this._params.ownerDocument,this._params.pdfBug);return R(this,dI).set($,z),z});return R(this,k).set($,M),M}getPageIndex(c){return typeof c!="object"||c===null||!Number.isInteger(c.num)||c.num<0||!Number.isInteger(c.gen)||c.gen<0?Promise.reject(new Error("Invalid pageIndex request.")):this.messageHandler.sendWithPromise("GetPageIndex",{num:c.num,gen:c.gen})}getAnnotations(c,$){return this.messageHandler.sendWithPromise("GetAnnotations",{pageIndex:c,intent:$})}saveDocument(){var c;return this.messageHandler.sendWithPromise("SaveDocument",{isPureXfa:!!this._htmlForXfa,numPages:this._numPages,annotationStorage:this.annotationStorage.serializable,filename:((c=this._fullReader)==null?void 0:c.filename)??null}).finally(()=>{this.annotationStorage.resetModified()})}getFieldObjects(){return this._getFieldObjectsPromise||(this._getFieldObjectsPromise=this.messageHandler.sendWithPromise("GetFieldObjects",null))}hasJSActions(){return this._hasJSActionsPromise||(this._hasJSActionsPromise=this.messageHandler.sendWithPromise("HasJSActions",null))}getCalculationOrderIds(){return this.messageHandler.sendWithPromise("GetCalculationOrderIds",null)}getDestinations(){return this.messageHandler.sendWithPromise("GetDestinations",null)}getDestination(c){return typeof c!="string"?Promise.reject(new Error("Invalid destination request.")):this.messageHandler.sendWithPromise("GetDestination",{id:c})}getPageLabels(){return this.messageHandler.sendWithPromise("GetPageLabels",null)}getPageLayout(){return this.messageHandler.sendWithPromise("GetPageLayout",null)}getPageMode(){return this.messageHandler.sendWithPromise("GetPageMode",null)}getViewerPreferences(){return this.messageHandler.sendWithPromise("GetViewerPreferences",null)}getOpenAction(){return this.messageHandler.sendWithPromise("GetOpenAction",null)}getAttachments(){return this.messageHandler.sendWithPromise("GetAttachments",null)}getJavaScript(){return this.messageHandler.sendWithPromise("GetJavaScript",null)}getDocJSActions(){return this.messageHandler.sendWithPromise("GetDocJSActions",null)}getPageJSActions(c){return this.messageHandler.sendWithPromise("GetPageJSActions",{pageIndex:c})}getStructTree(c){return this.messageHandler.sendWithPromise("GetStructTree",{pageIndex:c})}getOutline(){return this.messageHandler.sendWithPromise("GetOutline",null)}getOptionalContentConfig(){return this.messageHandler.sendWithPromise("GetOptionalContentConfig",null).then(c=>new _optional_content_config.OptionalContentConfig(c))}getPermissions(){return this.messageHandler.sendWithPromise("GetPermissions",null)}getMetadata(){return R(this,y)||XI(this,y,this.messageHandler.sendWithPromise("GetMetadata",null).then(c=>{var $,h;return{info:c[0],metadata:c[1]?new _metadata.Metadata(c[1]):null,contentDispositionFilename:(($=this._fullReader)==null?void 0:$.filename)??null,contentLength:((h=this._fullReader)==null?void 0:h.contentLength)??null}}))}getMarkInfo(){return this.messageHandler.sendWithPromise("GetMarkInfo",null)}async startCleanup(c=!1){if(await this.messageHandler.sendWithPromise("Cleanup",null),!this.destroyed){for(const $ of R(this,dI).values())if(!$.cleanup())throw new Error(`startCleanup: Page ${$.pageNumber} is currently rendering.`);this.commonObjs.clear(),c||this.fontLoader.clear(),XI(this,y,null),this._getFieldObjectsPromise=null,this._hasJSActionsPromise=null}}get loadingParams(){const c=this._params;return(0,_util.shadow)(this,"loadingParams",{disableAutoFetch:c.disableAutoFetch,enableXfa:c.enableXfa})}}t=new WeakMap,dI=new WeakMap,k=new WeakMap,y=new WeakMap;class PDFObjects{constructor(){GI(this,s),GI(this,H,Object.create(null))}get(c,$=null){if($){const M=bI(this,s,Wg).call(this,c);return M.capability.promise.then(()=>$(M.data)),null}const h=R(this,H)[c];if(!(h!=null&&h.capability.settled))throw new Error(`Requesting object that isn't resolved yet ${c}.`);return h.data}has(c){const $=R(this,H)[c];return($==null?void 0:$.capability.settled)||!1}resolve(c,$=null){const h=bI(this,s,Wg).call(this,c);h.data=$,h.capability.resolve()}clear(){XI(this,H,Object.create(null))}}H=new WeakMap,s=new WeakSet,Wg=function(wI){return R(this,H)[wI]||(R(this,H)[wI]={capability:(0,_util.createPromiseCapability)(),data:null})};class RenderTask{constructor(c){GI(this,u,null),XI(this,u,c),this.onContinue=null}get promise(){return R(this,u).capability.promise}cancel(){R(this,u).cancel()}get separateAnnots(){const{separateAnnots:c}=R(this,u).operatorList;if(!c)return!1;const{annotationCanvasMap:$}=R(this,u);return c.form||c.canvas&&($==null?void 0:$.size)>0}}u=new WeakMap,exports.RenderTask=RenderTask;const G=class{constructor({callback:wI,params:c,objs:$,commonObjs:h,annotationCanvasMap:M,operatorList:_,pageIndex:z,canvasFactory:T,useRequestAnimationFrame:r=!1,pdfBug:Z=!1,pageColors:p=null}){this.callback=wI,this.params=c,this.objs=$,this.commonObjs=h,this.annotationCanvasMap=M,this.operatorListIdx=null,this.operatorList=_,this._pageIndex=z,this.canvasFactory=T,this._pdfBug=Z,this.pageColors=p,this.running=!1,this.graphicsReadyCallback=null,this.graphicsReady=!1,this._useRequestAnimationFrame=r===!0&&typeof window<"u",this.cancelled=!1,this.capability=(0,_util.createPromiseCapability)(),this.task=new RenderTask(this),this._cancelBound=this.cancel.bind(this),this._continueBound=this._continue.bind(this),this._scheduleNextBound=this._scheduleNext.bind(this),this._nextBound=this._next.bind(this),this._canvas=c.canvasContext.canvas}get completed(){return this.capability.promise.catch(function(){})}initializeGraphics({transparency:wI=!1,optionalContentConfig:c}){var $;if(this.cancelled)return;if(this._canvas){if(R(G,V).has(this._canvas))throw new Error("Cannot use the same canvas during multiple render() operations. Use different canvas or ensure previous operations were cancelled or completed.");R(G,V).add(this._canvas)}this._pdfBug&&($=globalThis.StepperManager)!=null&&$.enabled&&(this.stepper=globalThis.StepperManager.create(this._pageIndex),this.stepper.init(this.operatorList),this.stepper.nextBreakPoint=this.stepper.getNextBreakPoint());const{canvasContext:h,viewport:M,transform:_,imageLayer:z,background:T}=this.params;this.gfx=new _canvas.CanvasGraphics(h,this.commonObjs,this.objs,this.canvasFactory,z,c,this.annotationCanvasMap,this.pageColors),this.gfx.beginDrawing({transform:_,viewport:M,transparency:wI,background:T}),this.operatorListIdx=0,this.graphicsReady=!0,this.graphicsReadyCallback&&this.graphicsReadyCallback()}cancel(wI=null){this.running=!1,this.cancelled=!0,this.gfx&&this.gfx.endDrawing(),this._canvas&&R(G,V).delete(this._canvas),this.callback(wI||new _display_utils.RenderingCancelledException(`Rendering cancelled, page ${this._pageIndex+1}`,"canvas"))}operatorListChanged(){if(!this.graphicsReady){this.graphicsReadyCallback||(this.graphicsReadyCallback=this._continueBound);return}this.stepper&&this.stepper.updateOperatorList(this.operatorList),!this.running&&this._continue()}_continue(){this.running=!0,!this.cancelled&&(this.task.onContinue?this.task.onContinue(this._scheduleNextBound):this._scheduleNext())}_scheduleNext(){this._useRequestAnimationFrame?window.requestAnimationFrame(()=>{this._nextBound().catch(this._cancelBound)}):Promise.resolve().then(this._nextBound).catch(this._cancelBound)}async _next(){this.cancelled||(this.operatorListIdx=this.gfx.executeOperatorList(this.operatorList,this.operatorListIdx,this._continueBound,this.stepper),this.operatorListIdx===this.operatorList.argsArray.length&&(this.running=!1,this.operatorList.lastChunk&&(this.gfx.endDrawing(),this._canvas&&R(G,V).delete(this._canvas),this.callback())))}};let InternalRenderTask=G;V=new WeakMap,GI(InternalRenderTask,V,new WeakSet);const version="2.16.105";exports.version=version;const build="172ccdbe5";exports.build=build},(wI,c,$)=>{var h,M,_;Object.defineProperty(c,"__esModule",{value:!0}),c.PrintAnnotationStorage=c.AnnotationStorage=void 0;var z=$(1),T=$(6),r=$(10);class Z{constructor(){GI(this,h),this._storage=new Map,this._modified=!1,this.onSetModified=null,this.onResetModified=null,this.onAnnotationEditor=null}getValue(D,m){const d=this._storage.get(D);return d===void 0?m:Object.assign(m,d)}getRawValue(D){return this._storage.get(D)}remove(D){if(this._storage.delete(D),this._storage.size===0&&this.resetModified(),typeof this.onAnnotationEditor=="function"){for(const m of this._storage.values())if(m instanceof T.AnnotationEditor)return;this.onAnnotationEditor(null)}}setValue(D,m){const d=this._storage.get(D);let C=!1;if(d!==void 0)for(const[l,B]of Object.entries(m))d[l]!==B&&(C=!0,d[l]=B);else C=!0,this._storage.set(D,m);C&&bI(this,h,M).call(this),m instanceof T.AnnotationEditor&&typeof this.onAnnotationEditor=="function"&&this.onAnnotationEditor(m.constructor._type)}has(D){return this._storage.has(D)}getAll(){return this._storage.size>0?(0,z.objectFromMap)(this._storage):null}get size(){return this._storage.size}resetModified(){this._modified&&(this._modified=!1,typeof this.onResetModified=="function"&&this.onResetModified())}get print(){return new p(this)}get serializable(){if(this._storage.size===0)return null;const D=new Map;for(const[m,d]of this._storage){const C=d instanceof T.AnnotationEditor?d.serialize():d;C&&D.set(m,C)}return D}static getHash(D){if(!D)return"";const m=new r.MurmurHash3_64;for(const[d,C]of D)m.update(`${d}:${JSON.stringify(C)}`);return m.hexdigest()}}h=new WeakSet,M=function(){this._modified||(this._modified=!0,typeof this.onSetModified=="function"&&this.onSetModified())},c.AnnotationStorage=Z;class p extends Z{constructor(D){super(),GI(this,_,null),XI(this,_,structuredClone(D.serializable))}get print(){(0,z.unreachable)("Should not call PrintAnnotationStorage.print")}get serializable(){return R(this,_)}}_=new WeakMap,c.PrintAnnotationStorage=p},(wI,c,$)=>{var h,M,_,z,T,r;Object.defineProperty(c,"__esModule",{value:!0}),c.AnnotationEditor=void 0;var Z=$(7),p=$(1);const j=class{constructor(m){GI(this,h,this.focusin.bind(this)),GI(this,M,this.focusout.bind(this)),GI(this,_,!1),GI(this,z,!1),GI(this,T,!1),GI(this,r,j._zIndex++),this.constructor===j&&(0,p.unreachable)("Cannot initialize AnnotationEditor."),this.parent=m.parent,this.id=m.id,this.width=this.height=null,this.pageIndex=m.parent.pageIndex,this.name=m.name,this.div=null;const[d,C]=this.parent.viewportBaseDimensions;this.x=m.x/d,this.y=m.y/C,this.rotation=this.parent.viewport.rotation,this.isAttachedToDOM=!1}static get _defaultLineColor(){return(0,p.shadow)(this,"_defaultLineColor",this._colorManager.getHexCode("CanvasText"))}setInBackground(){this.div.style.zIndex=0}setInForeground(){this.div.style.zIndex=R(this,r)}focusin(m){R(this,_)?XI(this,_,!1):this.parent.setSelected(this)}focusout(m){if(!this.isAttachedToDOM)return;const d=m.relatedTarget;d!=null&&d.closest(`#${this.id}`)||(m.preventDefault(),this.parent.isMultipleSelection||this.commitOrRemove())}commitOrRemove(){this.isEmpty()?this.remove():this.commit()}commit(){this.parent.addToAnnotationStorage(this)}dragstart(m){const d=this.parent.div.getBoundingClientRect();this.startX=m.clientX-d.x,this.startY=m.clientY-d.y,m.dataTransfer.setData("text/plain",this.id),m.dataTransfer.effectAllowed="move"}setAt(m,d,C,l){const[B,Y]=this.parent.viewportBaseDimensions;[C,l]=this.screenToPageTranslation(C,l),this.x=(m+C)/B,this.y=(d+l)/Y,this.div.style.left=`${100*this.x}%`,this.div.style.top=`${100*this.y}%`}translate(m,d){const[C,l]=this.parent.viewportBaseDimensions;[m,d]=this.screenToPageTranslation(m,d),this.x+=m/C,this.y+=d/l,this.div.style.left=`${100*this.x}%`,this.div.style.top=`${100*this.y}%`}screenToPageTranslation(m,d){const{rotation:C}=this.parent.viewport;switch(C){case 90:return[d,-m];case 180:return[-m,-d];case 270:return[-d,m];default:return[m,d]}}setDims(m,d){const[C,l]=this.parent.viewportBaseDimensions;this.div.style.width=`${100*m/C}%`,this.div.style.height=`${100*d/l}%`}getInitialTranslation(){return[0,0]}render(){this.div=document.createElement("div"),this.div.setAttribute("data-editor-rotation",(360-this.rotation)%360),this.div.className=this.name,this.div.setAttribute("id",this.id),this.div.setAttribute("tabIndex",0),this.setInForeground(),this.div.addEventListener("focusin",R(this,h)),this.div.addEventListener("focusout",R(this,M));const[m,d]=this.getInitialTranslation();return this.translate(m,d),(0,Z.bindEvents)(this,this.div,["dragstart","pointerdown"]),this.div}pointerdown(m){const d=Z.KeyboardManager.platform.isMac;if(m.button!==0||m.ctrlKey&&d){m.preventDefault();return}m.ctrlKey&&!d||m.shiftKey||m.metaKey&&d?this.parent.toggleSelected(this):this.parent.setSelected(this),XI(this,_,!0)}getRect(m,d){const[C,l]=this.parent.viewportBaseDimensions,[B,Y]=this.parent.pageDimensions,a=B*m/C,i=Y*d/l,I=this.x*B,g=this.y*Y,o=this.width*B,X=this.height*Y;switch(this.rotation){case 0:return[I+a,Y-g-i-X,I+a+o,Y-g-i];case 90:return[I+i,Y-g+a,I+i+X,Y-g+a+o];case 180:return[I-a-o,Y-g+i,I-a,Y-g+i+X];case 270:return[I-i-X,Y-g-a-o,I-i,Y-g-a];default:throw new Error("Invalid rotation")}}getRectInCurrentCoords(m,d){const[C,l,B,Y]=m,a=B-C,i=Y-l;switch(this.rotation){case 0:return[C,d-Y,a,i];case 90:return[C,d-l,i,a];case 180:return[B,d-l,a,i];case 270:return[B,d-Y,i,a];default:throw new Error("Invalid rotation")}}onceAdded(){}isEmpty(){return!1}enableEditMode(){XI(this,T,!0)}disableEditMode(){XI(this,T,!1)}isInEditMode(){return R(this,T)}shouldGetKeyboardEvents(){return!1}needsToBeRebuilt(){return this.div&&!this.isAttachedToDOM}rebuild(){var m;(m=this.div)==null||m.addEventListener("focusin",R(this,h))}serialize(){(0,p.unreachable)("An editor must be serializable")}static deserialize(m,d){const C=new this.prototype.constructor({parent:d,id:d.getNextId()});C.rotation=m.rotation;const[l,B]=d.pageDimensions,[Y,a,i,I]=C.getRectInCurrentCoords(m.rect,B);return C.x=Y/l,C.y=a/B,C.width=i/l,C.height=I/B,C}remove(){this.div.removeEventListener("focusin",R(this,h)),this.div.removeEventListener("focusout",R(this,M)),this.isEmpty()||this.commit(),this.parent.remove(this)}select(){var m;(m=this.div)==null||m.classList.add("selectedEditor")}unselect(){var m;(m=this.div)==null||m.classList.remove("selectedEditor")}updateParams(m,d){}disableEditing(){}enableEditing(){}get propertiesToUpdate(){return{}}get contentDiv(){return this.div}get isEditing(){return R(this,z)}set isEditing(m){XI(this,z,m),m?(this.parent.setSelected(this),this.parent.setActiveEditor(this)):this.parent.setActiveEditor(null)}};let D=j;h=new WeakMap,M=new WeakMap,_=new WeakMap,z=new WeakMap,T=new WeakMap,r=new WeakMap,QI(D,"_colorManager",new Z.ColorManager),QI(D,"_zIndex",1),c.AnnotationEditor=D},(wI,c,$)=>{var h,M,_,z,T,r,Z,p,j,D,m,d,C,l,B,Y,a,i,I,g,o,X,b,N,F,hI,YI,nI,gI,U,II,q,mI,NI,BI,J,e,w,x,E,P,iI,aI;Object.defineProperty(c,"__esModule",{value:!0}),c.KeyboardManager=c.CommandManager=c.ColorManager=c.AnnotationEditorUIManager=void 0,c.bindEvents=W,c.opacityToHex=L;var eI=$(1),A=$(8);function W(f,v,RI){for(const pI of RI)v.addEventListener(pI,f[pI].bind(f))}function L(f){return Math.round(Math.min(255,Math.max(1,255*f))).toString(16).padStart(2,"0")}class S{constructor(){GI(this,h,0)}getId(){return`${eI.AnnotationEditorPrefix}${wg(this,h)._++}`}}h=new WeakMap;class Q{constructor(v=128){GI(this,M,[]),GI(this,_,!1),GI(this,z,void 0),GI(this,T,-1),XI(this,z,v)}add({cmd:v,undo:RI,mustExec:pI,type:DI=NaN,overwriteIfSameType:FI=!1,keepUndo:TI=!1}){if(pI&&v(),R(this,_))return;const vI={cmd:v,undo:RI,type:DI};if(R(this,T)===-1){R(this,M).length>0&&(R(this,M).length=0),XI(this,T,0),R(this,M).push(vI);return}if(FI&&R(this,M)[R(this,T)].type===DI){TI&&(vI.undo=R(this,M)[R(this,T)].undo),R(this,M)[R(this,T)]=vI;return}const fI=R(this,T)+1;fI===R(this,z)?R(this,M).splice(0,1):(XI(this,T,fI),fI<R(this,M).length&&R(this,M).splice(fI)),R(this,M).push(vI)}undo(){R(this,T)!==-1&&(XI(this,_,!0),R(this,M)[R(this,T)].undo(),XI(this,_,!1),XI(this,T,R(this,T)-1))}redo(){R(this,T)<R(this,M).length-1&&(XI(this,T,R(this,T)+1),XI(this,_,!0),R(this,M)[R(this,T)].cmd(),XI(this,_,!1))}hasSomethingToUndo(){return R(this,T)!==-1}hasSomethingToRedo(){return R(this,T)<R(this,M).length-1}destroy(){XI(this,M,null)}}M=new WeakMap,_=new WeakMap,z=new WeakMap,T=new WeakMap,c.CommandManager=Q;const lI=class{constructor(f){GI(this,r),this.buffer=[],this.callbacks=new Map,this.allKeys=new Set;const v=lI.platform.isMac;for(const[RI,pI]of f)for(const DI of RI){const FI=DI.startsWith("mac+");v&&FI?(this.callbacks.set(DI.slice(4),pI),this.allKeys.add(DI.split("+").at(-1))):!v&&!FI&&(this.callbacks.set(DI,pI),this.allKeys.add(DI.split("+").at(-1)))}}static get platform(){const f=typeof navigator<"u"?navigator.platform:"";return(0,eI.shadow)(this,"platform",{isWin:f.includes("Win"),isMac:f.includes("Mac")})}exec(f,v){if(!this.allKeys.has(v.key))return;const RI=this.callbacks.get(bI(this,r,Z).call(this,v));RI&&(RI.bind(f)(),v.stopPropagation(),v.preventDefault())}};let uI=lI;r=new WeakSet,Z=function(f){f.altKey&&this.buffer.push("alt"),f.ctrlKey&&this.buffer.push("ctrl"),f.metaKey&&this.buffer.push("meta"),f.shiftKey&&this.buffer.push("shift"),this.buffer.push(f.key);const v=this.buffer.join("+");return this.buffer.length=0,v},c.KeyboardManager=uI;class MI{constructor(){GI(this,p,null)}copy(v){v&&(Array.isArray(v)?XI(this,p,v.map(RI=>RI.serialize())):XI(this,p,[v.serialize()]),XI(this,p,R(this,p).filter(RI=>!!RI)),R(this,p).length===0&&XI(this,p,null))}paste(){return R(this,p)}isEmpty(){return R(this,p)===null}destroy(){XI(this,p,null)}}p=new WeakMap;const ZI=class{get _colors(){const f=new Map([["CanvasText",null],["Canvas",null]]);return(0,A.getColorValues)(f),(0,eI.shadow)(this,"_colors",f)}convert(f){const v=(0,A.getRGB)(f);if(!window.matchMedia("(forced-colors: active)").matches)return v;for(const[RI,pI]of this._colors)if(pI.every((DI,FI)=>DI===v[FI]))return ZI._colorsMapping.get(RI);return v}getHexCode(f){const v=this._colors.get(f);return v?eI.Util.makeHexColor(...v):f}};let WI=ZI;QI(WI,"_colorsMapping",new Map([["CanvasText",[0,0,0]],["Canvas",[255,255,255]]])),c.ColorManager=WI;const tI=class{constructor(f,v){GI(this,hI),GI(this,nI),GI(this,U),GI(this,q),GI(this,NI),GI(this,J),GI(this,w),GI(this,E),GI(this,iI),GI(this,j,null),GI(this,D,new Map),GI(this,m,new Map),GI(this,d,new MI),GI(this,C,new Q),GI(this,l,0),GI(this,B,null),GI(this,Y,null),GI(this,a,new S),GI(this,i,!1),GI(this,I,eI.AnnotationEditorType.NONE),GI(this,g,new Set),GI(this,o,this.keydown.bind(this)),GI(this,X,this.onEditingAction.bind(this)),GI(this,b,this.onPageChanging.bind(this)),GI(this,N,{isEditing:!1,isEmpty:!0,hasEmptyClipboard:!0,hasSomethingToUndo:!1,hasSomethingToRedo:!1,hasSelectedEditor:!1}),GI(this,F,null),XI(this,F,f),XI(this,Y,v),R(this,Y)._on("editingaction",R(this,X)),R(this,Y)._on("pagechanging",R(this,b))}destroy(){bI(this,nI,gI).call(this),R(this,Y)._off("editingaction",R(this,X)),R(this,Y)._off("pagechanging",R(this,b));for(const f of R(this,m).values())f.destroy();R(this,m).clear(),R(this,D).clear(),XI(this,j,null),R(this,g).clear(),R(this,d).destroy(),R(this,C).destroy()}onPageChanging({pageNumber:f}){XI(this,l,f-1)}focusMainContainer(){R(this,F).focus()}keydown(f){var v;(v=this.getActive())!=null&&v.shouldGetKeyboardEvents()||tI._keyboardManager.exec(this,f)}onEditingAction(f){["undo","redo","cut","copy","paste","delete","selectAll"].includes(f.name)&&this[f.name]()}setEditingState(f){f?(bI(this,hI,YI).call(this),bI(this,U,II).call(this,{isEditing:R(this,I)!==eI.AnnotationEditorType.NONE,isEmpty:bI(this,E,P).call(this),hasSomethingToUndo:R(this,C).hasSomethingToUndo(),hasSomethingToRedo:R(this,C).hasSomethingToRedo(),hasSelectedEditor:!1,hasEmptyClipboard:R(this,d).isEmpty()})):(bI(this,nI,gI).call(this),bI(this,U,II).call(this,{isEditing:!1}))}registerEditorTypes(f){XI(this,B,f);for(const v of R(this,B))bI(this,q,mI).call(this,v.defaultPropertiesToUpdate)}getId(){return R(this,a).getId()}addLayer(f){R(this,m).set(f.pageIndex,f),R(this,i)?f.enable():f.disable()}removeLayer(f){R(this,m).delete(f.pageIndex)}updateMode(f){if(XI(this,I,f),f===eI.AnnotationEditorType.NONE)this.setEditingState(!1),bI(this,J,e).call(this);else{this.setEditingState(!0),bI(this,NI,BI).call(this);for(const v of R(this,m).values())v.updateMode(f)}}updateToolbar(f){f!==R(this,I)&&R(this,Y).dispatch("switchannotationeditormode",{source:this,mode:f})}updateParams(f,v){for(const RI of R(this,g))RI.updateParams(f,v);for(const RI of R(this,B))RI.updateDefaultParams(f,v)}getEditors(f){const v=[];for(const RI of R(this,D).values())RI.pageIndex===f&&v.push(RI);return v}getEditor(f){return R(this,D).get(f)}addEditor(f){R(this,D).set(f.id,f)}removeEditor(f){R(this,D).delete(f.id),this.unselect(f)}setActiveEditor(f){R(this,j)!==f&&(XI(this,j,f),f&&bI(this,q,mI).call(this,f.propertiesToUpdate))}toggleSelected(f){if(R(this,g).has(f)){R(this,g).delete(f),f.unselect(),bI(this,U,II).call(this,{hasSelectedEditor:this.hasSelection});return}R(this,g).add(f),f.select(),bI(this,q,mI).call(this,f.propertiesToUpdate),bI(this,U,II).call(this,{hasSelectedEditor:!0})}setSelected(f){for(const v of R(this,g))v!==f&&v.unselect();R(this,g).clear(),R(this,g).add(f),f.select(),bI(this,q,mI).call(this,f.propertiesToUpdate),bI(this,U,II).call(this,{hasSelectedEditor:!0})}isSelected(f){return R(this,g).has(f)}unselect(f){f.unselect(),R(this,g).delete(f),bI(this,U,II).call(this,{hasSelectedEditor:this.hasSelection})}get hasSelection(){return R(this,g).size!==0}undo(){R(this,C).undo(),bI(this,U,II).call(this,{hasSomethingToUndo:R(this,C).hasSomethingToUndo(),hasSomethingToRedo:!0,isEmpty:bI(this,E,P).call(this)})}redo(){R(this,C).redo(),bI(this,U,II).call(this,{hasSomethingToUndo:!0,hasSomethingToRedo:R(this,C).hasSomethingToRedo(),isEmpty:bI(this,E,P).call(this)})}addCommands(f){R(this,C).add(f),bI(this,U,II).call(this,{hasSomethingToUndo:!0,hasSomethingToRedo:!1,isEmpty:bI(this,E,P).call(this)})}delete(){if(R(this,j)&&R(this,j).commitOrRemove(),!this.hasSelection)return;const f=[...R(this,g)],v=()=>{for(const pI of f)pI.remove()},RI=()=>{for(const pI of f)bI(this,w,x).call(this,pI)};this.addCommands({cmd:v,undo:RI,mustExec:!0})}copy(){if(R(this,j)&&R(this,j).commitOrRemove(),this.hasSelection){const f=[];for(const v of R(this,g))v.isEmpty()||f.push(v);if(f.length===0)return;R(this,d).copy(f),bI(this,U,II).call(this,{hasEmptyClipboard:!1})}}cut(){this.copy(),this.delete()}paste(){if(R(this,d).isEmpty())return;this.unselectAll();const f=R(this,m).get(R(this,l)),v=R(this,d).paste().map(DI=>f.deserialize(DI)),RI=()=>{for(const DI of v)bI(this,w,x).call(this,DI);bI(this,iI,aI).call(this,v)},pI=()=>{for(const DI of v)DI.remove()};this.addCommands({cmd:RI,undo:pI,mustExec:!0})}selectAll(){for(const f of R(this,g))f.commit();bI(this,iI,aI).call(this,R(this,D).values())}unselectAll(){if(R(this,j)){R(this,j).commitOrRemove();return}if(bI(this,iI,aI).size!==0){for(const f of R(this,g))f.unselect();R(this,g).clear(),bI(this,U,II).call(this,{hasSelectedEditor:!1})}}isActive(f){return R(this,j)===f}getActive(){return R(this,j)}getMode(){return R(this,I)}};let O=tI;j=new WeakMap,D=new WeakMap,m=new WeakMap,d=new WeakMap,C=new WeakMap,l=new WeakMap,B=new WeakMap,Y=new WeakMap,a=new WeakMap,i=new WeakMap,I=new WeakMap,g=new WeakMap,o=new WeakMap,X=new WeakMap,b=new WeakMap,N=new WeakMap,F=new WeakMap,hI=new WeakSet,YI=function(){R(this,F).addEventListener("keydown",R(this,o))},nI=new WeakSet,gI=function(){R(this,F).removeEventListener("keydown",R(this,o))},U=new WeakSet,II=function(f){Object.entries(f).some(([v,RI])=>R(this,N)[v]!==RI)&&R(this,Y).dispatch("annotationeditorstateschanged",{source:this,details:Object.assign(R(this,N),f)})},q=new WeakSet,mI=function(f){R(this,Y).dispatch("annotationeditorparamschanged",{source:this,details:f})},NI=new WeakSet,BI=function(){if(!R(this,i)){XI(this,i,!0);for(const f of R(this,m).values())f.enable()}},J=new WeakSet,e=function(){if(this.unselectAll(),R(this,i)){XI(this,i,!1);for(const f of R(this,m).values())f.disable()}},w=new WeakSet,x=function(f){const v=R(this,m).get(f.pageIndex);v?v.addOrRebuild(f):this.addEditor(f)},E=new WeakSet,P=function(){if(R(this,D).size===0)return!0;if(R(this,D).size===1)for(const f of R(this,D).values())return f.isEmpty();return!1},iI=new WeakSet,aI=function(f){R(this,g).clear();for(const v of f)v.isEmpty()||(R(this,g).add(v),v.select());bI(this,U,II).call(this,{hasSelectedEditor:!0})},QI(O,"_keyboardManager",new uI([[["ctrl+a","mac+meta+a"],tI.prototype.selectAll],[["ctrl+c","mac+meta+c"],tI.prototype.copy],[["ctrl+v","mac+meta+v"],tI.prototype.paste],[["ctrl+x","mac+meta+x"],tI.prototype.cut],[["ctrl+z","mac+meta+z"],tI.prototype.undo],[["ctrl+y","ctrl+shift+Z","mac+meta+shift+Z"],tI.prototype.redo],[["Backspace","alt+Backspace","ctrl+Backspace","shift+Backspace","mac+Backspace","mac+alt+Backspace","mac+ctrl+Backspace","Delete","ctrl+Delete","shift+Delete"],tI.prototype.delete],[["Escape","mac+Escape"],tI.prototype.unselectAll]])),c.AnnotationEditorUIManager=O},(wI,c,$)=>{Object.defineProperty(c,"__esModule",{value:!0}),c.StatTimer=c.RenderingCancelledException=c.PixelsPerInch=c.PageViewport=c.PDFDateString=c.DOMStandardFontDataFactory=c.DOMSVGFactory=c.DOMCanvasFactory=c.DOMCMapReaderFactory=c.AnnotationPrefix=void 0,c.deprecated=o,c.getColorValues=hI,c.getCurrentTransform=YI,c.getCurrentTransformInverse=nI,c.getFilenameFromUrl=Y,c.getPdfFilenameFromUrl=a,c.getRGB=F,c.getXfaPageViewport=N,c.isDataScheme=l,c.isPdfFile=B,c.isValidFetchUrl=I,c.loadScript=g;var h=$(9),M=$(1);const _="http://www.w3.org/2000/svg",z="pdfjs_internal_id_";c.AnnotationPrefix=z;const T=class{};let r=T;QI(r,"CSS",96),QI(r,"PDF",72),QI(r,"PDF_TO_CSS_UNITS",T.CSS/T.PDF),c.PixelsPerInch=r;class Z extends h.BaseCanvasFactory{constructor({ownerDocument:U=globalThis.document}={}){super(),this._document=U}_createCanvas(U,II){const q=this._document.createElement("canvas");return q.width=U,q.height=II,q}}c.DOMCanvasFactory=Z;async function p(gI,U=!1){if(I(gI,document.baseURI)){const II=await fetch(gI);if(!II.ok)throw new Error(II.statusText);return U?new Uint8Array(await II.arrayBuffer()):(0,M.stringToBytes)(await II.text())}return new Promise((II,q)=>{const mI=new XMLHttpRequest;mI.open("GET",gI,!0),U&&(mI.responseType="arraybuffer"),mI.onreadystatechange=()=>{if(mI.readyState===XMLHttpRequest.DONE){if(mI.status===200||mI.status===0){let NI;if(U&&mI.response?NI=new Uint8Array(mI.response):!U&&mI.responseText&&(NI=(0,M.stringToBytes)(mI.responseText)),NI){II(NI);return}}q(new Error(mI.statusText))}},mI.send(null)})}class j extends h.BaseCMapReaderFactory{_fetchData(U,II){return p(U,this.isCompressed).then(q=>({cMapData:q,compressionType:II}))}}c.DOMCMapReaderFactory=j;class D extends h.BaseStandardFontDataFactory{_fetchData(U){return p(U,!0)}}c.DOMStandardFontDataFactory=D;class m extends h.BaseSVGFactory{_createSVG(U){return document.createElementNS(_,U)}}c.DOMSVGFactory=m;class d{constructor({viewBox:U,scale:II,rotation:q,offsetX:mI=0,offsetY:NI=0,dontFlip:BI=!1}){this.viewBox=U,this.scale=II,this.rotation=q,this.offsetX=mI,this.offsetY=NI;const J=(U[2]+U[0])/2,e=(U[3]+U[1])/2;let w,x,E,P;switch(q%=360,q<0&&(q+=360),q){case 180:w=-1,x=0,E=0,P=1;break;case 90:w=0,x=1,E=1,P=0;break;case 270:w=0,x=-1,E=-1,P=0;break;case 0:w=1,x=0,E=0,P=-1;break;default:throw new Error("PageViewport: Invalid rotation, must be a multiple of 90 degrees.")}BI&&(E=-E,P=-P);let iI,aI,eI,A;w===0?(iI=Math.abs(e-U[1])*II+mI,aI=Math.abs(J-U[0])*II+NI,eI=Math.abs(U[3]-U[1])*II,A=Math.abs(U[2]-U[0])*II):(iI=Math.abs(J-U[0])*II+mI,aI=Math.abs(e-U[1])*II+NI,eI=Math.abs(U[2]-U[0])*II,A=Math.abs(U[3]-U[1])*II),this.transform=[w*II,x*II,E*II,P*II,iI-w*II*J-E*II*e,aI-x*II*J-P*II*e],this.width=eI,this.height=A}clone({scale:U=this.scale,rotation:II=this.rotation,offsetX:q=this.offsetX,offsetY:mI=this.offsetY,dontFlip:NI=!1}={}){return new d({viewBox:this.viewBox.slice(),scale:U,rotation:II,offsetX:q,offsetY:mI,dontFlip:NI})}convertToViewportPoint(U,II){return M.Util.applyTransform([U,II],this.transform)}convertToViewportRectangle(U){const II=M.Util.applyTransform([U[0],U[1]],this.transform),q=M.Util.applyTransform([U[2],U[3]],this.transform);return[II[0],II[1],q[0],q[1]]}convertToPdfPoint(U,II){return M.Util.applyInverseTransform([U,II],this.transform)}}c.PageViewport=d;class C extends M.BaseException{constructor(U,II){super(U,"RenderingCancelledException"),this.type=II}}c.RenderingCancelledException=C;function l(gI){const U=gI.length;let II=0;for(;II<U&&gI[II].trim()==="";)II++;return gI.substring(II,II+5).toLowerCase()==="data:"}function B(gI){return typeof gI=="string"&&/\.pdf$/i.test(gI)}function Y(gI){const U=gI.indexOf("#"),II=gI.indexOf("?"),q=Math.min(U>0?U:gI.length,II>0?II:gI.length);return gI.substring(gI.lastIndexOf("/",q)+1,q)}function a(gI,U="document.pdf"){if(typeof gI!="string")return U;if(l(gI))return(0,M.warn)('getPdfFilenameFromUrl: ignore "data:"-URL for performance reasons.'),U;const II=/^(?:(?:[^:]+:)?\/\/[^/]+)?([^?#]*)(\?[^#]*)?(#.*)?$/,q=/[^/?#=]+\.pdf\b(?!.*\.pdf\b)/i,mI=II.exec(gI);let NI=q.exec(mI[1])||q.exec(mI[2])||q.exec(mI[3]);if(NI&&(NI=NI[0],NI.includes("%")))try{NI=q.exec(decodeURIComponent(NI))[0]}catch{}return NI||U}class i{constructor(){this.started=Object.create(null),this.times=[]}time(U){U in this.started&&(0,M.warn)(`Timer is already running for ${U}`),this.started[U]=Date.now()}timeEnd(U){U in this.started||(0,M.warn)(`Timer has not been started for ${U}`),this.times.push({name:U,start:this.started[U],end:Date.now()}),delete this.started[U]}toString(){const U=[];let II=0;for(const q of this.times){const mI=q.name;mI.length>II&&(II=mI.length)}for(const q of this.times){const mI=q.end-q.start;U.push(`${q.name.padEnd(II)} ${mI}ms
`)}return U.join("")}}c.StatTimer=i;function I(gI,U){try{const{protocol:II}=U?new URL(gI,U):new URL(gI);return II==="http:"||II==="https:"}catch{return!1}}function g(gI,U=!1){return new Promise((II,q)=>{const mI=document.createElement("script");mI.src=gI,mI.onload=function(NI){U&&mI.remove(),II(NI)},mI.onerror=function(){q(new Error(`Cannot load script at: ${mI.src}`))},(document.head||document.documentElement).append(mI)})}function o(gI){console.log("Deprecated API usage: "+gI)}let X;class b{static toDateObject(U){if(!U||typeof U!="string")return null;X||(X=new RegExp("^D:(\\d{4})(\\d{2})?(\\d{2})?(\\d{2})?(\\d{2})?(\\d{2})?([Z|+|-])?(\\d{2})?'?(\\d{2})?'?"));const II=X.exec(U);if(!II)return null;const q=parseInt(II[1],10);let mI=parseInt(II[2],10);mI=mI>=1&&mI<=12?mI-1:0;let NI=parseInt(II[3],10);NI=NI>=1&&NI<=31?NI:1;let BI=parseInt(II[4],10);BI=BI>=0&&BI<=23?BI:0;let J=parseInt(II[5],10);J=J>=0&&J<=59?J:0;let e=parseInt(II[6],10);e=e>=0&&e<=59?e:0;const w=II[7]||"Z";let x=parseInt(II[8],10);x=x>=0&&x<=23?x:0;let E=parseInt(II[9],10)||0;return E=E>=0&&E<=59?E:0,w==="-"?(BI+=x,J+=E):w==="+"&&(BI-=x,J-=E),new Date(Date.UTC(q,mI,NI,BI,J,e))}}c.PDFDateString=b;function N(gI,{scale:U=1,rotation:II=0}){const{width:q,height:mI}=gI.attributes.style,NI=[0,0,parseInt(q),parseInt(mI)];return new d({viewBox:NI,scale:U,rotation:II})}function F(gI){if(gI.startsWith("#")){const U=parseInt(gI.slice(1),16);return[(U&16711680)>>16,(U&65280)>>8,U&255]}return gI.startsWith("rgb(")?gI.slice(4,-1).split(",").map(U=>parseInt(U)):gI.startsWith("rgba(")?gI.slice(5,-1).split(",").map(U=>parseInt(U)).slice(0,3):((0,M.warn)(`Not a valid color format: "${gI}"`),[0,0,0])}function hI(gI){const U=document.createElement("span");U.style.visibility="hidden",document.body.append(U);for(const II of gI.keys()){U.style.color=II;const q=window.getComputedStyle(U).color;gI.set(II,F(q))}U.remove()}function YI(gI){const{a:U,b:II,c:q,d:mI,e:NI,f:BI}=gI.getTransform();return[U,II,q,mI,NI,BI]}function nI(gI){const{a:U,b:II,c:q,d:mI,e:NI,f:BI}=gI.getTransform().invertSelf();return[U,II,q,mI,NI,BI]}},(wI,c,$)=>{Object.defineProperty(c,"__esModule",{value:!0}),c.BaseStandardFontDataFactory=c.BaseSVGFactory=c.BaseCanvasFactory=c.BaseCMapReaderFactory=void 0;var h=$(1);class M{constructor(){this.constructor===M&&(0,h.unreachable)("Cannot initialize BaseCanvasFactory.")}create(Z,p){if(Z<=0||p<=0)throw new Error("Invalid canvas size");const j=this._createCanvas(Z,p);return{canvas:j,context:j.getContext("2d")}}reset(Z,p,j){if(!Z.canvas)throw new Error("Canvas is not specified");if(p<=0||j<=0)throw new Error("Invalid canvas size");Z.canvas.width=p,Z.canvas.height=j}destroy(Z){if(!Z.canvas)throw new Error("Canvas is not specified");Z.canvas.width=0,Z.canvas.height=0,Z.canvas=null,Z.context=null}_createCanvas(Z,p){(0,h.unreachable)("Abstract method `_createCanvas` called.")}}c.BaseCanvasFactory=M;class _{constructor({baseUrl:Z=null,isCompressed:p=!1}){this.constructor===_&&(0,h.unreachable)("Cannot initialize BaseCMapReaderFactory."),this.baseUrl=Z,this.isCompressed=p}async fetch({name:Z}){if(!this.baseUrl)throw new Error('The CMap "baseUrl" parameter must be specified, ensure that the "cMapUrl" and "cMapPacked" API parameters are provided.');if(!Z)throw new Error("CMap name must be specified.");const p=this.baseUrl+Z+(this.isCompressed?".bcmap":""),j=this.isCompressed?h.CMapCompressionType.BINARY:h.CMapCompressionType.NONE;return this._fetchData(p,j).catch(D=>{throw new Error(`Unable to load ${this.isCompressed?"binary ":""}CMap at: ${p}`)})}_fetchData(Z,p){(0,h.unreachable)("Abstract method `_fetchData` called.")}}c.BaseCMapReaderFactory=_;class z{constructor({baseUrl:Z=null}){this.constructor===z&&(0,h.unreachable)("Cannot initialize BaseStandardFontDataFactory."),this.baseUrl=Z}async fetch({filename:Z}){if(!this.baseUrl)throw new Error('The standard font "baseUrl" parameter must be specified, ensure that the "standardFontDataUrl" API parameter is provided.');if(!Z)throw new Error("Font filename must be specified.");const p=`${this.baseUrl}${Z}`;return this._fetchData(p).catch(j=>{throw new Error(`Unable to load font data at: ${p}`)})}_fetchData(Z){(0,h.unreachable)("Abstract method `_fetchData` called.")}}c.BaseStandardFontDataFactory=z;class T{constructor(){this.constructor===T&&(0,h.unreachable)("Cannot initialize BaseSVGFactory.")}create(Z,p,j=!1){if(Z<=0||p<=0)throw new Error("Invalid SVG dimensions");const D=this._createSVG("svg:svg");return D.setAttribute("version","1.1"),j||(D.setAttribute("width",`${Z}px`),D.setAttribute("height",`${p}px`)),D.setAttribute("preserveAspectRatio","none"),D.setAttribute("viewBox",`0 0 ${Z} ${p}`),D}createElement(Z){if(typeof Z!="string")throw new Error("Invalid SVG element type");return this._createSVG(Z)}_createSVG(Z){(0,h.unreachable)("Abstract method `_createSVG` called.")}}c.BaseSVGFactory=T},(wI,c,$)=>{Object.defineProperty(c,"__esModule",{value:!0}),c.MurmurHash3_64=void 0;var h=$(1);const M=3285377520,_=4294901760,z=65535;class T{constructor(Z){this.h1=Z?Z&4294967295:M,this.h2=Z?Z&4294967295:M}update(Z){let p,j;if(typeof Z=="string"){p=new Uint8Array(Z.length*2),j=0;for(let o=0,X=Z.length;o<X;o++){const b=Z.charCodeAt(o);b<=255?p[j++]=b:(p[j++]=b>>>8,p[j++]=b&255)}}else if((0,h.isArrayBuffer)(Z))p=Z.slice(),j=p.byteLength;else throw new Error("Wrong data format in MurmurHash3_64_update. Input must be a string or array.");const D=j>>2,m=j-D*4,d=new Uint32Array(p.buffer,0,D);let C=0,l=0,B=this.h1,Y=this.h2;const a=3432918353,i=461845907,I=a&z,g=i&z;for(let o=0;o<D;o++)o&1?(C=d[o],C=C*a&_|C*I&z,C=C<<15|C>>>17,C=C*i&_|C*g&z,B^=C,B=B<<13|B>>>19,B=B*5+3864292196):(l=d[o],l=l*a&_|l*I&z,l=l<<15|l>>>17,l=l*i&_|l*g&z,Y^=l,Y=Y<<13|Y>>>19,Y=Y*5+3864292196);switch(C=0,m){case 3:C^=p[D*4+2]<<16;case 2:C^=p[D*4+1]<<8;case 1:C^=p[D*4],C=C*a&_|C*I&z,C=C<<15|C>>>17,C=C*i&_|C*g&z,D&1?B^=C:Y^=C}this.h1=B,this.h2=Y}hexdigest(){let Z=this.h1,p=this.h2;Z^=p>>>1,Z=Z*3981806797&_|Z*36045&z,p=p*4283543511&_|((p<<16|Z>>>16)*2950163797&_)>>>16,Z^=p>>>1,Z=Z*444984403&_|Z*60499&z,p=p*3301882366&_|((p<<16|Z>>>16)*3120437893&_)>>>16,Z^=p>>>1;const j=(Z>>>0).toString(16),D=(p>>>0).toString(16);return j.padStart(8,"0")+D.padStart(8,"0")}}c.MurmurHash3_64=T},(wI,c,$)=>{Object.defineProperty(c,"__esModule",{value:!0}),c.FontLoader=c.FontFaceObject=void 0;var h=$(1);class M{constructor({docId:r,onUnsupportedFeature:Z,ownerDocument:p=globalThis.document,styleElement:j=null}){this.constructor===M&&(0,h.unreachable)("Cannot initialize BaseFontLoader."),this.docId=r,this._onUnsupportedFeature=Z,this._document=p,this.nativeFontFaces=[],this.styleElement=null}addNativeFontFace(r){this.nativeFontFaces.push(r),this._document.fonts.add(r)}insertRule(r){let Z=this.styleElement;Z||(Z=this.styleElement=this._document.createElement("style"),Z.id=`PDFJS_FONT_STYLE_TAG_${this.docId}`,this._document.documentElement.getElementsByTagName("head")[0].append(Z));const p=Z.sheet;p.insertRule(r,p.cssRules.length)}clear(){for(const r of this.nativeFontFaces)this._document.fonts.delete(r);this.nativeFontFaces.length=0,this.styleElement&&(this.styleElement.remove(),this.styleElement=null)}async bind(r){if(r.attached||r.missingFile)return;if(r.attached=!0,this.isFontLoadingAPISupported){const p=r.createNativeFontFace();if(p){this.addNativeFontFace(p);try{await p.loaded}catch(j){throw this._onUnsupportedFeature({featureId:h.UNSUPPORTED_FEATURES.errorFontLoadNative}),(0,h.warn)(`Failed to load font '${p.family}': '${j}'.`),r.disableFontFace=!0,j}}return}const Z=r.createFontFaceRule();if(Z){if(this.insertRule(Z),this.isSyncFontLoadingSupported)return;await new Promise(p=>{const j=this._queueLoadingCallback(p);this._prepareFontLoadEvent([Z],[r],j)})}}_queueLoadingCallback(r){(0,h.unreachable)("Abstract method `_queueLoadingCallback`.")}get isFontLoadingAPISupported(){var r;const Z=!!((r=this._document)!=null&&r.fonts);return(0,h.shadow)(this,"isFontLoadingAPISupported",Z)}get isSyncFontLoadingSupported(){(0,h.unreachable)("Abstract method `isSyncFontLoadingSupported`.")}get _loadTestFont(){(0,h.unreachable)("Abstract method `_loadTestFont`.")}_prepareFontLoadEvent(r,Z,p){(0,h.unreachable)("Abstract method `_prepareFontLoadEvent`.")}}let _;c.FontLoader=_,c.FontLoader=_=class extends M{constructor(T){super(T),this.loadingContext={requests:[],nextRequestId:0},this.loadTestFontId=0}get isSyncFontLoadingSupported(){let T=!1;if(typeof navigator>"u")T=!0;else{const r=/Mozilla\/5.0.*?rv:(\d+).*? Gecko/.exec(navigator.userAgent);(r==null?void 0:r[1])>=14&&(T=!0)}return(0,h.shadow)(this,"isSyncFontLoadingSupported",T)}_queueLoadingCallback(T){function r(){for((0,h.assert)(!p.done,"completeRequest() cannot be called twice."),p.done=!0;Z.requests.length>0&&Z.requests[0].done;){const j=Z.requests.shift();setTimeout(j.callback,0)}}const Z=this.loadingContext,p={id:`pdfjs-font-loading-${Z.nextRequestId++}`,done:!1,complete:r,callback:T};return Z.requests.push(p),p}get _loadTestFont(){const T=function(){return atob("T1RUTwALAIAAAwAwQ0ZGIDHtZg4AAAOYAAAAgUZGVE1lkzZwAAAEHAAAABxHREVGABQAFQAABDgAAAAeT1MvMlYNYwkAAAEgAAAAYGNtYXABDQLUAAACNAAAAUJoZWFk/xVFDQAAALwAAAA2aGhlYQdkA+oAAAD0AAAAJGhtdHgD6AAAAAAEWAAAAAZtYXhwAAJQAAAAARgAAAAGbmFtZVjmdH4AAAGAAAAAsXBvc3T/hgAzAAADeAAAACAAAQAAAAEAALZRFsRfDzz1AAsD6AAAAADOBOTLAAAAAM4KHDwAAAAAA+gDIQAAAAgAAgAAAAAAAAABAAADIQAAAFoD6AAAAAAD6AABAAAAAAAAAAAAAAAAAAAAAQAAUAAAAgAAAAQD6AH0AAUAAAKKArwAAACMAooCvAAAAeAAMQECAAACAAYJAAAAAAAAAAAAAQAAAAAAAAAAAAAAAFBmRWQAwAAuAC4DIP84AFoDIQAAAAAAAQAAAAAAAAAAACAAIAABAAAADgCuAAEAAAAAAAAAAQAAAAEAAAAAAAEAAQAAAAEAAAAAAAIAAQAAAAEAAAAAAAMAAQAAAAEAAAAAAAQAAQAAAAEAAAAAAAUAAQAAAAEAAAAAAAYAAQAAAAMAAQQJAAAAAgABAAMAAQQJAAEAAgABAAMAAQQJAAIAAgABAAMAAQQJAAMAAgABAAMAAQQJAAQAAgABAAMAAQQJAAUAAgABAAMAAQQJAAYAAgABWABYAAAAAAAAAwAAAAMAAAAcAAEAAAAAADwAAwABAAAAHAAEACAAAAAEAAQAAQAAAC7//wAAAC7////TAAEAAAAAAAABBgAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMAAAAAAAD/gwAyAAAAAQAAAAAAAAAAAAAAAAAAAAABAAQEAAEBAQJYAAEBASH4DwD4GwHEAvgcA/gXBIwMAYuL+nz5tQXkD5j3CBLnEQACAQEBIVhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYAAABAQAADwACAQEEE/t3Dov6fAH6fAT+fPp8+nwHDosMCvm1Cvm1DAz6fBQAAAAAAAABAAAAAMmJbzEAAAAAzgTjFQAAAADOBOQpAAEAAAAAAAAADAAUAAQAAAABAAAAAgABAAAAAAAAAAAD6AAAAAAAAA==")};return(0,h.shadow)(this,"_loadTestFont",T())}_prepareFontLoadEvent(T,r,Z){function p(F,hI){return F.charCodeAt(hI)<<24|F.charCodeAt(hI+1)<<16|F.charCodeAt(hI+2)<<8|F.charCodeAt(hI+3)&255}function j(F,hI,YI,nI){const gI=F.substring(0,hI),U=F.substring(hI+YI);return gI+nI+U}let D,m;const d=this._document.createElement("canvas");d.width=1,d.height=1;const C=d.getContext("2d");let l=0;function B(F,hI){if(l++,l>30){(0,h.warn)("Load test font never loaded."),hI();return}if(C.font="30px "+F,C.fillText(".",0,20),C.getImageData(0,0,1,1).data[3]>0){hI();return}setTimeout(B.bind(null,F,hI))}const Y=`lt${Date.now()}${this.loadTestFontId++}`;let a=this._loadTestFont;a=j(a,976,Y.length,Y);const i=16,I=1482184792;let g=p(a,i);for(D=0,m=Y.length-3;D<m;D+=4)g=g-I+p(Y,D)|0;D<Y.length&&(g=g-I+p(Y+"XXX",D)|0),a=j(a,i,4,(0,h.string32)(g));const o=`url(data:font/opentype;base64,${btoa(a)});`,X=`@font-face {font-family:"${Y}";src:${o}}`;this.insertRule(X);const b=[];for(const F of r)b.push(F.loadedName);b.push(Y);const N=this._document.createElement("div");N.style.visibility="hidden",N.style.width=N.style.height="10px",N.style.position="absolute",N.style.top=N.style.left="0px";for(const F of b){const hI=this._document.createElement("span");hI.textContent="Hi",hI.style.fontFamily=F,N.append(hI)}this._document.body.append(N),B(Y,()=>{N.remove(),Z.complete()})}};class z{constructor(r,{isEvalSupported:Z=!0,disableFontFace:p=!1,ignoreErrors:j=!1,onUnsupportedFeature:D,fontRegistry:m=null}){this.compiledGlyphs=Object.create(null);for(const d in r)this[d]=r[d];this.isEvalSupported=Z!==!1,this.disableFontFace=p===!0,this.ignoreErrors=j===!0,this._onUnsupportedFeature=D,this.fontRegistry=m}createNativeFontFace(){if(!this.data||this.disableFontFace)return null;let r;if(!this.cssFontInfo)r=new FontFace(this.loadedName,this.data,{});else{const Z={weight:this.cssFontInfo.fontWeight};this.cssFontInfo.italicAngle&&(Z.style=`oblique ${this.cssFontInfo.italicAngle}deg`),r=new FontFace(this.cssFontInfo.fontFamily,this.data,Z)}return this.fontRegistry&&this.fontRegistry.registerFont(this),r}createFontFaceRule(){if(!this.data||this.disableFontFace)return null;const r=(0,h.bytesToString)(this.data),Z=`url(data:${this.mimetype};base64,${btoa(r)});`;let p;if(!this.cssFontInfo)p=`@font-face {font-family:"${this.loadedName}";src:${Z}}`;else{let j=`font-weight: ${this.cssFontInfo.fontWeight};`;this.cssFontInfo.italicAngle&&(j+=`font-style: oblique ${this.cssFontInfo.italicAngle}deg;`),p=`@font-face {font-family:"${this.cssFontInfo.fontFamily}";${j}src:${Z}}`}return this.fontRegistry&&this.fontRegistry.registerFont(this,Z),p}getPathGenerator(r,Z){if(this.compiledGlyphs[Z]!==void 0)return this.compiledGlyphs[Z];let p;try{p=r.get(this.loadedName+"_path_"+Z)}catch(j){if(!this.ignoreErrors)throw j;return this._onUnsupportedFeature({featureId:h.UNSUPPORTED_FEATURES.errorFontGetPath}),(0,h.warn)(`getPathGenerator - ignoring character: "${j}".`),this.compiledGlyphs[Z]=function(D,m){}}if(this.isEvalSupported&&h.FeatureTest.isEvalSupported){const j=[];for(const D of p){const m=D.args!==void 0?D.args.join(","):"";j.push("c.",D.cmd,"(",m,`);
`)}return this.compiledGlyphs[Z]=new Function("c","size",j.join(""))}return this.compiledGlyphs[Z]=function(j,D){for(const m of p)m.cmd==="scale"&&(m.args=[D,-D]),j[m.cmd].apply(j,m.args)}}}c.FontFaceObject=z},(wI,c,$)=>{var h,M;Object.defineProperty(c,"__esModule",{value:!0}),c.CanvasGraphics=void 0;var _=$(8),z=$(1),T=$(13),r=$(14),Z=$(3);const p=16,j=100,D=4096,m=15,d=10,C=Z.isNodeJS&&typeof Path2D>"u"?-1:1e3,l=16;function B(J,e){if(J._removeMirroring)throw new Error("Context is already forwarding operations.");J.__originalSave=J.save,J.__originalRestore=J.restore,J.__originalRotate=J.rotate,J.__originalScale=J.scale,J.__originalTranslate=J.translate,J.__originalTransform=J.transform,J.__originalSetTransform=J.setTransform,J.__originalResetTransform=J.resetTransform,J.__originalClip=J.clip,J.__originalMoveTo=J.moveTo,J.__originalLineTo=J.lineTo,J.__originalBezierCurveTo=J.bezierCurveTo,J.__originalRect=J.rect,J.__originalClosePath=J.closePath,J.__originalBeginPath=J.beginPath,J._removeMirroring=()=>{J.save=J.__originalSave,J.restore=J.__originalRestore,J.rotate=J.__originalRotate,J.scale=J.__originalScale,J.translate=J.__originalTranslate,J.transform=J.__originalTransform,J.setTransform=J.__originalSetTransform,J.resetTransform=J.__originalResetTransform,J.clip=J.__originalClip,J.moveTo=J.__originalMoveTo,J.lineTo=J.__originalLineTo,J.bezierCurveTo=J.__originalBezierCurveTo,J.rect=J.__originalRect,J.closePath=J.__originalClosePath,J.beginPath=J.__originalBeginPath,delete J._removeMirroring},J.save=function(){e.save(),this.__originalSave()},J.restore=function(){e.restore(),this.__originalRestore()},J.translate=function(w,x){e.translate(w,x),this.__originalTranslate(w,x)},J.scale=function(w,x){e.scale(w,x),this.__originalScale(w,x)},J.transform=function(w,x,E,P,iI,aI){e.transform(w,x,E,P,iI,aI),this.__originalTransform(w,x,E,P,iI,aI)},J.setTransform=function(w,x,E,P,iI,aI){e.setTransform(w,x,E,P,iI,aI),this.__originalSetTransform(w,x,E,P,iI,aI)},J.resetTransform=function(){e.resetTransform(),this.__originalResetTransform()},J.rotate=function(w){e.rotate(w),this.__originalRotate(w)},J.clip=function(w){e.clip(w),this.__originalClip(w)},J.moveTo=function(w,x){e.moveTo(w,x),this.__originalMoveTo(w,x)},J.lineTo=function(w,x){e.lineTo(w,x),this.__originalLineTo(w,x)},J.bezierCurveTo=function(w,x,E,P,iI,aI){e.bezierCurveTo(w,x,E,P,iI,aI),this.__originalBezierCurveTo(w,x,E,P,iI,aI)},J.rect=function(w,x,E,P){e.rect(w,x,E,P),this.__originalRect(w,x,E,P)},J.closePath=function(){e.closePath(),this.__originalClosePath()},J.beginPath=function(){e.beginPath(),this.__originalBeginPath()}}class Y{constructor(e){this.canvasFactory=e,this.cache=Object.create(null)}getCanvas(e,w,x){let E;return this.cache[e]!==void 0?(E=this.cache[e],this.canvasFactory.reset(E,w,x)):(E=this.canvasFactory.create(w,x),this.cache[e]=E),E}delete(e){delete this.cache[e]}clear(){for(const e in this.cache){const w=this.cache[e];this.canvasFactory.destroy(w),delete this.cache[e]}}}function a(J,e,w,x,E,P,iI,aI,eI,A){const[W,L,S,Q,lI,uI]=(0,_.getCurrentTransform)(J);if(L===0&&S===0){const WI=iI*W+lI,tI=Math.round(WI),O=aI*Q+uI,f=Math.round(O),v=(iI+eI)*W+lI,RI=Math.abs(Math.round(v)-tI)||1,pI=(aI+A)*Q+uI,DI=Math.abs(Math.round(pI)-f)||1;return J.setTransform(Math.sign(W),0,0,Math.sign(Q),tI,f),J.drawImage(e,w,x,E,P,0,0,RI,DI),J.setTransform(W,L,S,Q,lI,uI),[RI,DI]}if(W===0&&Q===0){const WI=aI*S+lI,tI=Math.round(WI),O=iI*L+uI,f=Math.round(O),v=(aI+A)*S+lI,RI=Math.abs(Math.round(v)-tI)||1,pI=(iI+eI)*L+uI,DI=Math.abs(Math.round(pI)-f)||1;return J.setTransform(0,Math.sign(L),Math.sign(S),0,tI,f),J.drawImage(e,w,x,E,P,0,0,DI,RI),J.setTransform(W,L,S,Q,lI,uI),[DI,RI]}J.drawImage(e,w,x,E,P,iI,aI,eI,A);const MI=Math.hypot(W,L),ZI=Math.hypot(S,Q);return[MI*eI,ZI*A]}function i(J){const{width:e,height:w}=J;if(e>C||w>C)return null;const x=1e3,E=new Uint8Array([0,2,4,0,1,0,5,4,8,10,0,8,0,2,1,0]),P=e+1;let iI=new Uint8Array(P*(w+1)),aI,eI,A;const W=e+7&-8;let L=new Uint8Array(W*w),S=0;for(const MI of J.data){let ZI=128;for(;ZI>0;)L[S++]=MI&ZI?0:255,ZI>>=1}let Q=0;for(S=0,L[S]!==0&&(iI[0]=1,++Q),eI=1;eI<e;eI++)L[S]!==L[S+1]&&(iI[eI]=L[S]?2:1,++Q),S++;for(L[S]!==0&&(iI[eI]=2,++Q),aI=1;aI<w;aI++){S=aI*W,A=aI*P,L[S-W]!==L[S]&&(iI[A]=L[S]?1:8,++Q);let MI=(L[S]?4:0)+(L[S-W]?8:0);for(eI=1;eI<e;eI++)MI=(MI>>2)+(L[S+1]?4:0)+(L[S-W+1]?8:0),E[MI]&&(iI[A+eI]=E[MI],++Q),S++;if(L[S-W]!==L[S]&&(iI[A+eI]=L[S]?2:4,++Q),Q>x)return null}for(S=W*(w-1),A=aI*P,L[S]!==0&&(iI[A]=8,++Q),eI=1;eI<e;eI++)L[S]!==L[S+1]&&(iI[A+eI]=L[S]?4:8,++Q),S++;if(L[S]!==0&&(iI[A+eI]=4,++Q),Q>x)return null;const lI=new Int32Array([0,P,-1,0,-P,0,0,0,1]),uI=new Path2D;for(aI=0;Q&&aI<=w;aI++){let MI=aI*P;const ZI=MI+e;for(;MI<ZI&&!iI[MI];)MI++;if(MI===ZI)continue;uI.moveTo(MI%P,aI);const WI=MI;let tI=iI[MI];do{const O=lI[tI];do MI+=O;while(!iI[MI]);const f=iI[MI];f!==5&&f!==10?(tI=f,iI[MI]=0):(tI=f&51*tI>>4,iI[MI]&=tI>>2|tI<<2),uI.lineTo(MI%P,MI/P|0),iI[MI]||--Q}while(WI!==MI);--aI}return L=null,iI=null,function(MI){MI.save(),MI.scale(1/e,-1/w),MI.translate(0,-w),MI.fill(uI),MI.beginPath(),MI.restore()}}class I{constructor(e,w){this.alphaIsShape=!1,this.fontSize=0,this.fontSizeScale=1,this.textMatrix=z.IDENTITY_MATRIX,this.textMatrixScale=1,this.fontMatrix=z.FONT_IDENTITY_MATRIX,this.leading=0,this.x=0,this.y=0,this.lineX=0,this.lineY=0,this.charSpacing=0,this.wordSpacing=0,this.textHScale=1,this.textRenderingMode=z.TextRenderingMode.FILL,this.textRise=0,this.fillColor="#000000",this.strokeColor="#000000",this.patternFill=!1,this.fillAlpha=1,this.strokeAlpha=1,this.lineWidth=1,this.activeSMask=null,this.transferMaps=null,this.startNewPathAndClipBox([0,0,e,w])}clone(){const e=Object.create(this);return e.clipBox=this.clipBox.slice(),e}setCurrentPoint(e,w){this.x=e,this.y=w}updatePathMinMax(e,w,x){[w,x]=z.Util.applyTransform([w,x],e),this.minX=Math.min(this.minX,w),this.minY=Math.min(this.minY,x),this.maxX=Math.max(this.maxX,w),this.maxY=Math.max(this.maxY,x)}updateRectMinMax(e,w){const x=z.Util.applyTransform(w,e),E=z.Util.applyTransform(w.slice(2),e);this.minX=Math.min(this.minX,x[0],E[0]),this.minY=Math.min(this.minY,x[1],E[1]),this.maxX=Math.max(this.maxX,x[0],E[0]),this.maxY=Math.max(this.maxY,x[1],E[1])}updateScalingPathMinMax(e,w){z.Util.scaleMinMax(e,w),this.minX=Math.min(this.minX,w[0]),this.maxX=Math.max(this.maxX,w[1]),this.minY=Math.min(this.minY,w[2]),this.maxY=Math.max(this.maxY,w[3])}updateCurvePathMinMax(e,w,x,E,P,iI,aI,eI,A,W){const L=z.Util.bezierBoundingBox(w,x,E,P,iI,aI,eI,A);if(W){W[0]=Math.min(W[0],L[0],L[2]),W[1]=Math.max(W[1],L[0],L[2]),W[2]=Math.min(W[2],L[1],L[3]),W[3]=Math.max(W[3],L[1],L[3]);return}this.updateRectMinMax(e,L)}getPathBoundingBox(e=T.PathType.FILL,w=null){const x=[this.minX,this.minY,this.maxX,this.maxY];if(e===T.PathType.STROKE){w||(0,z.unreachable)("Stroke bounding box must include transform.");const E=z.Util.singularValueDecompose2dScale(w),P=E[0]*this.lineWidth/2,iI=E[1]*this.lineWidth/2;x[0]-=P,x[1]-=iI,x[2]+=P,x[3]+=iI}return x}updateClipFromPath(){const e=z.Util.intersect(this.clipBox,this.getPathBoundingBox());this.startNewPathAndClipBox(e||[0,0,0,0])}isEmptyClip(){return this.minX===1/0}startNewPathAndClipBox(e){this.clipBox=e,this.minX=1/0,this.minY=1/0,this.maxX=0,this.maxY=0}getClippedPathBoundingBox(e=T.PathType.FILL,w=null){return z.Util.intersect(this.clipBox,this.getPathBoundingBox(e,w))}}function g(J,e,w=null){if(typeof ImageData<"u"&&e instanceof ImageData){J.putImageData(e,0,0);return}const x=e.height,E=e.width,P=x%l,iI=(x-P)/l,aI=P===0?iI:iI+1,eI=J.createImageData(E,l);let A=0,W;const L=e.data,S=eI.data;let Q,lI,uI,MI,ZI,WI,tI,O;if(w)switch(w.length){case 1:ZI=w[0],WI=w[0],tI=w[0],O=w[0];break;case 4:ZI=w[0],WI=w[1],tI=w[2],O=w[3];break}if(e.kind===z.ImageKind.GRAYSCALE_1BPP){const f=L.byteLength,v=new Uint32Array(S.buffer,0,S.byteLength>>2),RI=v.length,pI=E+7>>3;let DI=4294967295,FI=z.FeatureTest.isLittleEndian?4278190080:255;for(O&&O[0]===255&&O[255]===0&&([DI,FI]=[FI,DI]),Q=0;Q<aI;Q++){for(uI=Q<iI?l:P,W=0,lI=0;lI<uI;lI++){const TI=f-A;let vI=0;const fI=TI>pI?E:TI*8-7,PI=fI&-8;let EI=0,SI=0;for(;vI<PI;vI+=8)SI=L[A++],v[W++]=SI&128?DI:FI,v[W++]=SI&64?DI:FI,v[W++]=SI&32?DI:FI,v[W++]=SI&16?DI:FI,v[W++]=SI&8?DI:FI,v[W++]=SI&4?DI:FI,v[W++]=SI&2?DI:FI,v[W++]=SI&1?DI:FI;for(;vI<fI;vI++)EI===0&&(SI=L[A++],EI=128),v[W++]=SI&EI?DI:FI,EI>>=1}for(;W<RI;)v[W++]=0;J.putImageData(eI,0,Q*l)}}else if(e.kind===z.ImageKind.RGBA_32BPP){const f=!!(ZI||WI||tI);for(lI=0,MI=E*l*4,Q=0;Q<iI;Q++){if(S.set(L.subarray(A,A+MI)),A+=MI,f)for(let v=0;v<MI;v+=4)ZI&&(S[v+0]=ZI[S[v+0]]),WI&&(S[v+1]=WI[S[v+1]]),tI&&(S[v+2]=tI[S[v+2]]);J.putImageData(eI,0,lI),lI+=l}if(Q<aI){if(MI=E*P*4,S.set(L.subarray(A,A+MI)),f)for(let v=0;v<MI;v+=4)ZI&&(S[v+0]=ZI[S[v+0]]),WI&&(S[v+1]=WI[S[v+1]]),tI&&(S[v+2]=tI[S[v+2]]);J.putImageData(eI,0,lI)}}else if(e.kind===z.ImageKind.RGB_24BPP){const f=!!(ZI||WI||tI);for(uI=l,MI=E*uI,Q=0;Q<aI;Q++){for(Q>=iI&&(uI=P,MI=E*uI),W=0,lI=MI;lI--;)S[W++]=L[A++],S[W++]=L[A++],S[W++]=L[A++],S[W++]=255;if(f)for(let v=0;v<W;v+=4)ZI&&(S[v+0]=ZI[S[v+0]]),WI&&(S[v+1]=WI[S[v+1]]),tI&&(S[v+2]=tI[S[v+2]]);J.putImageData(eI,0,Q*l)}}else throw new Error(`bad image kind: ${e.kind}`)}function o(J,e){if(e.bitmap){J.drawImage(e.bitmap,0,0);return}const w=e.height,x=e.width,E=w%l,P=(w-E)/l,iI=E===0?P:P+1,aI=J.createImageData(x,l);let eI=0;const A=e.data,W=aI.data;for(let L=0;L<iI;L++){const S=L<P?l:E;({srcPos:eI}=(0,r.applyMaskImageData)({src:A,srcPos:eI,dest:W,width:x,height:S})),J.putImageData(aI,0,L*l)}}function X(J,e){const w=["strokeStyle","fillStyle","fillRule","globalAlpha","lineWidth","lineCap","lineJoin","miterLimit","globalCompositeOperation","font"];for(let x=0,E=w.length;x<E;x++){const P=w[x];J[P]!==void 0&&(e[P]=J[P])}J.setLineDash!==void 0&&(e.setLineDash(J.getLineDash()),e.lineDashOffset=J.lineDashOffset)}function b(J,e){J.strokeStyle=J.fillStyle=e||"#000000",J.fillRule="nonzero",J.globalAlpha=1,J.lineWidth=1,J.lineCap="butt",J.lineJoin="miter",J.miterLimit=10,J.globalCompositeOperation="source-over",J.font="10px sans-serif",J.setLineDash!==void 0&&(J.setLineDash([]),J.lineDashOffset=0)}function N(J,e,w,x){const E=J.length;for(let P=3;P<E;P+=4){const iI=J[P];if(iI===0)J[P-3]=e,J[P-2]=w,J[P-1]=x;else if(iI<255){const aI=255-iI;J[P-3]=J[P-3]*iI+e*aI>>8,J[P-2]=J[P-2]*iI+w*aI>>8,J[P-1]=J[P-1]*iI+x*aI>>8}}}function F(J,e,w){const x=J.length,E=1/255;for(let P=3;P<x;P+=4){const iI=w?w[J[P]]:J[P];e[P]=e[P]*iI*E|0}}function hI(J,e,w){const x=J.length;for(let E=3;E<x;E+=4){const P=J[E-3]*77+J[E-2]*152+J[E-1]*28;e[E]=w?e[E]*w[P>>8]>>8:e[E]*P>>16}}function YI(J,e,w,x,E,P,iI,aI,eI,A,W){const L=!!P,S=L?P[0]:0,Q=L?P[1]:0,lI=L?P[2]:0;let uI;E==="Luminosity"?uI=hI:uI=F;const MI=Math.min(x,Math.ceil(1048576/w));for(let ZI=0;ZI<x;ZI+=MI){const WI=Math.min(MI,x-ZI),tI=J.getImageData(aI-A,ZI+(eI-W),w,WI),O=e.getImageData(aI,ZI+eI,w,WI);L&&N(tI.data,S,Q,lI),uI(tI.data,O.data,iI),e.putImageData(O,aI,ZI+eI)}}function nI(J,e,w,x){const E=x[0],P=x[1],iI=x[2]-E,aI=x[3]-P;iI===0||aI===0||(YI(e.context,w,iI,aI,e.subtype,e.backdrop,e.transferMap,E,P,e.offsetX,e.offsetY),J.save(),J.globalAlpha=1,J.globalCompositeOperation="source-over",J.setTransform(1,0,0,1,0,0),J.drawImage(w.canvas,0,0),J.restore())}function gI(J,e){const w=z.Util.singularValueDecompose2dScale(J);w[0]=Math.fround(w[0]),w[1]=Math.fround(w[1]);const x=Math.fround((globalThis.devicePixelRatio||1)*_.PixelsPerInch.PDF_TO_CSS_UNITS);return e!==void 0?e:w[0]<=x||w[1]<=x}const U=["butt","round","square"],II=["miter","round","bevel"],q={},mI={},NI=class{constructor(J,e,w,x,E,P,iI,aI){GI(this,h),this.ctx=J,this.current=new I(this.ctx.canvas.width,this.ctx.canvas.height),this.stateStack=[],this.pendingClip=null,this.pendingEOFill=!1,this.res=null,this.xobjs=null,this.commonObjs=e,this.objs=w,this.canvasFactory=x,this.imageLayer=E,this.groupStack=[],this.processingType3=null,this.baseTransform=null,this.baseTransformStack=[],this.groupLevel=0,this.smaskStack=[],this.smaskCounter=0,this.tempSMask=null,this.suspendedCtx=null,this.contentVisible=!0,this.markedContentStack=[],this.optionalContentConfig=P,this.cachedCanvases=new Y(this.canvasFactory),this.cachedPatterns=new Map,this.annotationCanvasMap=iI,this.viewportScale=1,this.outputScaleX=1,this.outputScaleY=1,this.backgroundColor=(aI==null?void 0:aI.background)||null,this.foregroundColor=(aI==null?void 0:aI.foreground)||null,this._cachedScaleForStroking=null,this._cachedGetSinglePixelWidth=null,this._cachedBitmapsMap=new Map}getObject(J,e=null){return typeof J=="string"?J.startsWith("g_")?this.commonObjs.get(J):this.objs.get(J):e}beginDrawing({transform:J,viewport:e,transparency:w=!1,background:x=null}){const E=this.ctx.canvas.width,P=this.ctx.canvas.height,iI=x||"#ffffff";if(this.ctx.save(),this.foregroundColor&&this.backgroundColor){this.ctx.fillStyle=this.foregroundColor;const aI=this.foregroundColor=this.ctx.fillStyle;this.ctx.fillStyle=this.backgroundColor;const eI=this.backgroundColor=this.ctx.fillStyle;let A=!0,W=iI;if(this.ctx.fillStyle=iI,W=this.ctx.fillStyle,A=typeof W=="string"&&/^#[0-9A-Fa-f]{6}$/.test(W),aI==="#000000"&&eI==="#ffffff"||aI===eI||!A)this.foregroundColor=this.backgroundColor=null;else{const[L,S,Q]=(0,_.getRGB)(W),lI=MI=>(MI/=255,MI<=.03928?MI/12.92:((MI+.055)/1.055)**2.4),uI=Math.round(.2126*lI(L)+.7152*lI(S)+.0722*lI(Q));this.selectColor=(MI,ZI,WI)=>{const tI=.2126*lI(MI)+.7152*lI(ZI)+.0722*lI(WI);return Math.round(tI)===uI?eI:aI}}}if(this.ctx.fillStyle=this.backgroundColor||iI,this.ctx.fillRect(0,0,E,P),this.ctx.restore(),w){const aI=this.cachedCanvases.getCanvas("transparent",E,P);this.compositeCtx=this.ctx,this.transparentCanvas=aI.canvas,this.ctx=aI.context,this.ctx.save(),this.ctx.transform(...(0,_.getCurrentTransform)(this.compositeCtx))}this.ctx.save(),b(this.ctx,this.foregroundColor),J&&(this.ctx.transform(...J),this.outputScaleX=J[0],this.outputScaleY=J[0]),this.ctx.transform(...e.transform),this.viewportScale=e.scale,this.baseTransform=(0,_.getCurrentTransform)(this.ctx),this.imageLayer&&((0,_.deprecated)("The `imageLayer` functionality will be removed in the future."),this.imageLayer.beginLayout())}executeOperatorList(J,e,w,x){const E=J.argsArray,P=J.fnArray;let iI=e||0;const aI=E.length;if(aI===iI)return iI;const eI=aI-iI>d&&typeof w=="function",A=eI?Date.now()+m:0;let W=0;const L=this.commonObjs,S=this.objs;let Q;for(;;){if(x!==void 0&&iI===x.nextBreakPoint)return x.breakIt(iI,w),iI;if(Q=P[iI],Q!==z.OPS.dependency)this[Q].apply(this,E[iI]);else for(const lI of E[iI]){const uI=lI.startsWith("g_")?L:S;if(!uI.has(lI))return uI.get(lI,w),iI}if(iI++,iI===aI)return iI;if(eI&&++W>d){if(Date.now()>A)return w(),iI;W=0}}}endDrawing(){bI(this,h,M).call(this),this.cachedCanvases.clear(),this.cachedPatterns.clear();for(const J of this._cachedBitmapsMap.values()){for(const e of J.values())typeof HTMLCanvasElement<"u"&&e instanceof HTMLCanvasElement&&(e.width=e.height=0);J.clear()}this._cachedBitmapsMap.clear(),this.imageLayer&&this.imageLayer.endLayout()}_scaleImage(J,e){const w=J.width,x=J.height;let E=Math.max(Math.hypot(e[0],e[1]),1),P=Math.max(Math.hypot(e[2],e[3]),1),iI=w,aI=x,eI="prescale1",A,W;for(;E>2&&iI>1||P>2&&aI>1;){let L=iI,S=aI;E>2&&iI>1&&(L=Math.ceil(iI/2),E/=iI/L),P>2&&aI>1&&(S=Math.ceil(aI/2),P/=aI/S),A=this.cachedCanvases.getCanvas(eI,L,S),W=A.context,W.clearRect(0,0,L,S),W.drawImage(J,0,0,iI,aI,0,0,L,S),J=A.canvas,iI=L,aI=S,eI=eI==="prescale1"?"prescale2":"prescale1"}return{img:J,paintWidth:iI,paintHeight:aI}}_createMaskCanvas(J){const e=this.ctx,{width:w,height:x}=J,E=this.current.fillColor,P=this.current.patternFill,iI=(0,_.getCurrentTransform)(e);let aI,eI,A,W;if((J.bitmap||J.data)&&J.count>1){const v=J.bitmap||J.data.buffer,RI=iI.slice(0,4);eI=JSON.stringify(P?RI:[RI,E]),aI=this._cachedBitmapsMap.get(v),aI||(aI=new Map,this._cachedBitmapsMap.set(v,aI));const pI=aI.get(eI);if(pI&&!P){const DI=Math.round(Math.min(iI[0],iI[2])+iI[4]),FI=Math.round(Math.min(iI[1],iI[3])+iI[5]);return{canvas:pI,offsetX:DI,offsetY:FI}}A=pI}A||(W=this.cachedCanvases.getCanvas("maskCanvas",w,x),o(W.context,J));let L=z.Util.transform(iI,[1/w,0,0,-1/x,0,0]);L=z.Util.transform(L,[1,0,0,1,0,-x]);const S=z.Util.applyTransform([0,0],L),Q=z.Util.applyTransform([w,x],L),lI=z.Util.normalizeRect([S[0],S[1],Q[0],Q[1]]),uI=Math.round(lI[2]-lI[0])||1,MI=Math.round(lI[3]-lI[1])||1,ZI=this.cachedCanvases.getCanvas("fillCanvas",uI,MI),WI=ZI.context,tI=Math.min(S[0],Q[0]),O=Math.min(S[1],Q[1]);WI.translate(-tI,-O),WI.transform(...L),A||(A=this._scaleImage(W.canvas,(0,_.getCurrentTransformInverse)(WI)),A=A.img,aI&&P&&aI.set(eI,A)),WI.imageSmoothingEnabled=gI((0,_.getCurrentTransform)(WI),J.interpolate),a(WI,A,0,0,A.width,A.height,0,0,w,x),WI.globalCompositeOperation="source-in";const f=z.Util.transform((0,_.getCurrentTransformInverse)(WI),[1,0,0,1,-tI,-O]);return WI.fillStyle=P?E.getPattern(e,this,f,T.PathType.FILL):E,WI.fillRect(0,0,w,x),aI&&!P&&(this.cachedCanvases.delete("fillCanvas"),aI.set(eI,ZI.canvas)),{canvas:ZI.canvas,offsetX:Math.round(tI),offsetY:Math.round(O)}}setLineWidth(J){J!==this.current.lineWidth&&(this._cachedScaleForStroking=null),this.current.lineWidth=J,this.ctx.lineWidth=J}setLineCap(J){this.ctx.lineCap=U[J]}setLineJoin(J){this.ctx.lineJoin=II[J]}setMiterLimit(J){this.ctx.miterLimit=J}setDash(J,e){const w=this.ctx;w.setLineDash!==void 0&&(w.setLineDash(J),w.lineDashOffset=e)}setRenderingIntent(J){}setFlatness(J){}setGState(J){for(let e=0,w=J.length;e<w;e++){const x=J[e],E=x[0],P=x[1];switch(E){case"LW":this.setLineWidth(P);break;case"LC":this.setLineCap(P);break;case"LJ":this.setLineJoin(P);break;case"ML":this.setMiterLimit(P);break;case"D":this.setDash(P[0],P[1]);break;case"RI":this.setRenderingIntent(P);break;case"FL":this.setFlatness(P);break;case"Font":this.setFont(P[0],P[1]);break;case"CA":this.current.strokeAlpha=x[1];break;case"ca":this.current.fillAlpha=x[1],this.ctx.globalAlpha=x[1];break;case"BM":this.ctx.globalCompositeOperation=P;break;case"SMask":this.current.activeSMask=P?this.tempSMask:null,this.tempSMask=null,this.checkSMaskState();break;case"TR":this.current.transferMaps=P}}}get inSMaskMode(){return!!this.suspendedCtx}checkSMaskState(){const J=this.inSMaskMode;this.current.activeSMask&&!J?this.beginSMaskMode():!this.current.activeSMask&&J&&this.endSMaskMode()}beginSMaskMode(){if(this.inSMaskMode)throw new Error("beginSMaskMode called while already in smask mode");const J=this.ctx.canvas.width,e=this.ctx.canvas.height,w="smaskGroupAt"+this.groupLevel,x=this.cachedCanvases.getCanvas(w,J,e);this.suspendedCtx=this.ctx,this.ctx=x.context;const E=this.ctx;E.setTransform(...(0,_.getCurrentTransform)(this.suspendedCtx)),X(this.suspendedCtx,E),B(E,this.suspendedCtx),this.setGState([["BM","source-over"],["ca",1],["CA",1]])}endSMaskMode(){if(!this.inSMaskMode)throw new Error("endSMaskMode called while not in smask mode");this.ctx._removeMirroring(),X(this.ctx,this.suspendedCtx),this.ctx=this.suspendedCtx,this.suspendedCtx=null}compose(J){if(!this.current.activeSMask)return;J?(J[0]=Math.floor(J[0]),J[1]=Math.floor(J[1]),J[2]=Math.ceil(J[2]),J[3]=Math.ceil(J[3])):J=[0,0,this.ctx.canvas.width,this.ctx.canvas.height];const e=this.current.activeSMask,w=this.suspendedCtx;nI(w,e,this.ctx,J),this.ctx.save(),this.ctx.setTransform(1,0,0,1,0,0),this.ctx.clearRect(0,0,this.ctx.canvas.width,this.ctx.canvas.height),this.ctx.restore()}save(){this.inSMaskMode?(X(this.ctx,this.suspendedCtx),this.suspendedCtx.save()):this.ctx.save();const J=this.current;this.stateStack.push(J),this.current=J.clone()}restore(){this.stateStack.length===0&&this.inSMaskMode&&this.endSMaskMode(),this.stateStack.length!==0&&(this.current=this.stateStack.pop(),this.inSMaskMode?(this.suspendedCtx.restore(),X(this.suspendedCtx,this.ctx)):this.ctx.restore(),this.checkSMaskState(),this.pendingClip=null,this._cachedScaleForStroking=null,this._cachedGetSinglePixelWidth=null)}transform(J,e,w,x,E,P){this.ctx.transform(J,e,w,x,E,P),this._cachedScaleForStroking=null,this._cachedGetSinglePixelWidth=null}constructPath(J,e,w){const x=this.ctx,E=this.current;let P=E.x,iI=E.y,aI,eI;const A=(0,_.getCurrentTransform)(x),W=A[0]===0&&A[3]===0||A[1]===0&&A[2]===0,L=W?w.slice(0):null;for(let S=0,Q=0,lI=J.length;S<lI;S++)switch(J[S]|0){case z.OPS.rectangle:P=e[Q++],iI=e[Q++];const uI=e[Q++],MI=e[Q++],ZI=P+uI,WI=iI+MI;x.moveTo(P,iI),uI===0||MI===0?x.lineTo(ZI,WI):(x.lineTo(ZI,iI),x.lineTo(ZI,WI),x.lineTo(P,WI)),W||E.updateRectMinMax(A,[P,iI,ZI,WI]),x.closePath();break;case z.OPS.moveTo:P=e[Q++],iI=e[Q++],x.moveTo(P,iI),W||E.updatePathMinMax(A,P,iI);break;case z.OPS.lineTo:P=e[Q++],iI=e[Q++],x.lineTo(P,iI),W||E.updatePathMinMax(A,P,iI);break;case z.OPS.curveTo:aI=P,eI=iI,P=e[Q+4],iI=e[Q+5],x.bezierCurveTo(e[Q],e[Q+1],e[Q+2],e[Q+3],P,iI),E.updateCurvePathMinMax(A,aI,eI,e[Q],e[Q+1],e[Q+2],e[Q+3],P,iI,L),Q+=6;break;case z.OPS.curveTo2:aI=P,eI=iI,x.bezierCurveTo(P,iI,e[Q],e[Q+1],e[Q+2],e[Q+3]),E.updateCurvePathMinMax(A,aI,eI,P,iI,e[Q],e[Q+1],e[Q+2],e[Q+3],L),P=e[Q+2],iI=e[Q+3],Q+=4;break;case z.OPS.curveTo3:aI=P,eI=iI,P=e[Q+2],iI=e[Q+3],x.bezierCurveTo(e[Q],e[Q+1],P,iI,P,iI),E.updateCurvePathMinMax(A,aI,eI,e[Q],e[Q+1],P,iI,P,iI,L),Q+=4;break;case z.OPS.closePath:x.closePath();break}W&&E.updateScalingPathMinMax(A,L),E.setCurrentPoint(P,iI)}closePath(){this.ctx.closePath()}stroke(J){J=typeof J<"u"?J:!0;const e=this.ctx,w=this.current.strokeColor;e.globalAlpha=this.current.strokeAlpha,this.contentVisible&&(typeof w=="object"&&w!=null&&w.getPattern?(e.save(),e.strokeStyle=w.getPattern(e,this,(0,_.getCurrentTransformInverse)(e),T.PathType.STROKE),this.rescaleAndStroke(!1),e.restore()):this.rescaleAndStroke(!0)),J&&this.consumePath(this.current.getClippedPathBoundingBox()),e.globalAlpha=this.current.fillAlpha}closeStroke(){this.closePath(),this.stroke()}fill(J){J=typeof J<"u"?J:!0;const e=this.ctx,w=this.current.fillColor,x=this.current.patternFill;let E=!1;x&&(e.save(),e.fillStyle=w.getPattern(e,this,(0,_.getCurrentTransformInverse)(e),T.PathType.FILL),E=!0);const P=this.current.getClippedPathBoundingBox();this.contentVisible&&P!==null&&(this.pendingEOFill?(e.fill("evenodd"),this.pendingEOFill=!1):e.fill()),E&&e.restore(),J&&this.consumePath(P)}eoFill(){this.pendingEOFill=!0,this.fill()}fillStroke(){this.fill(!1),this.stroke(!1),this.consumePath()}eoFillStroke(){this.pendingEOFill=!0,this.fillStroke()}closeFillStroke(){this.closePath(),this.fillStroke()}closeEOFillStroke(){this.pendingEOFill=!0,this.closePath(),this.fillStroke()}endPath(){this.consumePath()}clip(){this.pendingClip=q}eoClip(){this.pendingClip=mI}beginText(){this.current.textMatrix=z.IDENTITY_MATRIX,this.current.textMatrixScale=1,this.current.x=this.current.lineX=0,this.current.y=this.current.lineY=0}endText(){const J=this.pendingTextPaths,e=this.ctx;if(J===void 0){e.beginPath();return}e.save(),e.beginPath();for(const w of J)e.setTransform(...w.transform),e.translate(w.x,w.y),w.addToPath(e,w.fontSize);e.restore(),e.clip(),e.beginPath(),delete this.pendingTextPaths}setCharSpacing(J){this.current.charSpacing=J}setWordSpacing(J){this.current.wordSpacing=J}setHScale(J){this.current.textHScale=J/100}setLeading(J){this.current.leading=-J}setFont(J,e){const w=this.commonObjs.get(J),x=this.current;if(!w)throw new Error(`Can't find font for ${J}`);if(x.fontMatrix=w.fontMatrix||z.FONT_IDENTITY_MATRIX,(x.fontMatrix[0]===0||x.fontMatrix[3]===0)&&(0,z.warn)("Invalid font matrix for font "+J),e<0?(e=-e,x.fontDirection=-1):x.fontDirection=1,this.current.font=w,this.current.fontSize=e,w.isType3Font)return;const E=w.loadedName||"sans-serif";let P="normal";w.black?P="900":w.bold&&(P="bold");const iI=w.italic?"italic":"normal",aI=`"${E}", ${w.fallbackName}`;let eI=e;e<p?eI=p:e>j&&(eI=j),this.current.fontSizeScale=e/eI,this.ctx.font=`${iI} ${P} ${eI}px ${aI}`}setTextRenderingMode(J){this.current.textRenderingMode=J}setTextRise(J){this.current.textRise=J}moveText(J,e){this.current.x=this.current.lineX+=J,this.current.y=this.current.lineY+=e}setLeadingMoveText(J,e){this.setLeading(-e),this.moveText(J,e)}setTextMatrix(J,e,w,x,E,P){this.current.textMatrix=[J,e,w,x,E,P],this.current.textMatrixScale=Math.hypot(J,e),this.current.x=this.current.lineX=0,this.current.y=this.current.lineY=0}nextLine(){this.moveText(0,this.current.leading)}paintChar(J,e,w,x){const E=this.ctx,P=this.current,iI=P.font,aI=P.textRenderingMode,eI=P.fontSize/P.fontSizeScale,A=aI&z.TextRenderingMode.FILL_STROKE_MASK,W=!!(aI&z.TextRenderingMode.ADD_TO_PATH_FLAG),L=P.patternFill&&!iI.missingFile;let S;(iI.disableFontFace||W||L)&&(S=iI.getPathGenerator(this.commonObjs,J)),iI.disableFontFace||L?(E.save(),E.translate(e,w),E.beginPath(),S(E,eI),x&&E.setTransform(...x),(A===z.TextRenderingMode.FILL||A===z.TextRenderingMode.FILL_STROKE)&&E.fill(),(A===z.TextRenderingMode.STROKE||A===z.TextRenderingMode.FILL_STROKE)&&E.stroke(),E.restore()):((A===z.TextRenderingMode.FILL||A===z.TextRenderingMode.FILL_STROKE)&&E.fillText(J,e,w),(A===z.TextRenderingMode.STROKE||A===z.TextRenderingMode.FILL_STROKE)&&E.strokeText(J,e,w)),W&&(this.pendingTextPaths||(this.pendingTextPaths=[])).push({transform:(0,_.getCurrentTransform)(E),x:e,y:w,fontSize:eI,addToPath:S})}get isFontSubpixelAAEnabled(){const{context:J}=this.cachedCanvases.getCanvas("isFontSubpixelAAEnabled",10,10);J.scale(1.5,1),J.fillText("I",0,10);const e=J.getImageData(0,0,10,10).data;let w=!1;for(let x=3;x<e.length;x+=4)if(e[x]>0&&e[x]<255){w=!0;break}return(0,z.shadow)(this,"isFontSubpixelAAEnabled",w)}showText(J){const e=this.current,w=e.font;if(w.isType3Font)return this.showType3Text(J);const x=e.fontSize;if(x===0)return;const E=this.ctx,P=e.fontSizeScale,iI=e.charSpacing,aI=e.wordSpacing,eI=e.fontDirection,A=e.textHScale*eI,W=J.length,L=w.vertical,S=L?1:-1,Q=w.defaultVMetrics,lI=x*e.fontMatrix[0],uI=e.textRenderingMode===z.TextRenderingMode.FILL&&!w.disableFontFace&&!e.patternFill;E.save(),E.transform(...e.textMatrix),E.translate(e.x,e.y+e.textRise),eI>0?E.scale(A,-1):E.scale(A,1);let MI;if(e.patternFill){E.save();const f=e.fillColor.getPattern(E,this,(0,_.getCurrentTransformInverse)(E),T.PathType.FILL);MI=(0,_.getCurrentTransform)(E),E.restore(),E.fillStyle=f}let ZI=e.lineWidth;const WI=e.textMatrixScale;if(WI===0||ZI===0){const f=e.textRenderingMode&z.TextRenderingMode.FILL_STROKE_MASK;(f===z.TextRenderingMode.STROKE||f===z.TextRenderingMode.FILL_STROKE)&&(ZI=this.getSinglePixelWidth())}else ZI/=WI;P!==1&&(E.scale(P,P),ZI/=P),E.lineWidth=ZI;let tI=0,O;for(O=0;O<W;++O){const f=J[O];if(typeof f=="number"){tI+=S*f*x/1e3;continue}let v=!1;const RI=(f.isSpace?aI:0)+iI,pI=f.fontChar,DI=f.accent;let FI,TI,vI=f.width;if(L){const PI=f.vmetric||Q,EI=-(f.vmetric?PI[1]:vI*.5)*lI,SI=PI[2]*lI;vI=PI?-PI[0]:vI,FI=EI/P,TI=(tI+SI)/P}else FI=tI/P,TI=0;if(w.remeasure&&vI>0){const PI=E.measureText(pI).width*1e3/x*P;if(vI<PI&&this.isFontSubpixelAAEnabled){const EI=vI/PI;v=!0,E.save(),E.scale(EI,1),FI/=EI}else vI!==PI&&(FI+=(vI-PI)/2e3*x/P)}if(this.contentVisible&&(f.isInFont||w.missingFile)){if(uI&&!DI)E.fillText(pI,FI,TI);else if(this.paintChar(pI,FI,TI,MI),DI){const PI=FI+x*DI.offset.x/P,EI=TI-x*DI.offset.y/P;this.paintChar(DI.fontChar,PI,EI,MI)}}let fI;L?fI=vI*lI-RI*eI:fI=vI*lI+RI*eI,tI+=fI,v&&E.restore()}L?e.y-=tI:e.x+=tI*A,E.restore(),this.compose()}showType3Text(J){const e=this.ctx,w=this.current,x=w.font,E=w.fontSize,P=w.fontDirection,iI=x.vertical?1:-1,aI=w.charSpacing,eI=w.wordSpacing,A=w.textHScale*P,W=w.fontMatrix||z.FONT_IDENTITY_MATRIX,L=J.length,S=w.textRenderingMode===z.TextRenderingMode.INVISIBLE;let Q,lI,uI,MI;if(!(S||E===0)){for(this._cachedScaleForStroking=null,this._cachedGetSinglePixelWidth=null,e.save(),e.transform(...w.textMatrix),e.translate(w.x,w.y),e.scale(A,P),Q=0;Q<L;++Q){if(lI=J[Q],typeof lI=="number"){MI=iI*lI*E/1e3,this.ctx.translate(MI,0),w.x+=MI*A;continue}const ZI=(lI.isSpace?eI:0)+aI,WI=x.charProcOperatorList[lI.operatorListId];if(!WI){(0,z.warn)(`Type3 character "${lI.operatorListId}" is not available.`);continue}this.contentVisible&&(this.processingType3=lI,this.save(),e.scale(E,E),e.transform(...W),this.executeOperatorList(WI),this.restore()),uI=z.Util.applyTransform([lI.width,0],W)[0]*E+ZI,e.translate(uI,0),w.x+=uI*A}e.restore(),this.processingType3=null}}setCharWidth(J,e){}setCharWidthAndBounds(J,e,w,x,E,P){this.ctx.rect(w,x,E-w,P-x),this.ctx.clip(),this.endPath()}getColorN_Pattern(J){let e;if(J[0]==="TilingPattern"){const w=J[1],x=this.baseTransform||(0,_.getCurrentTransform)(this.ctx),E={createCanvasGraphics:P=>new NI(P,this.commonObjs,this.objs,this.canvasFactory)};e=new T.TilingPattern(J,w,this.ctx,E,x)}else e=this._getPattern(J[1],J[2]);return e}setStrokeColorN(){this.current.strokeColor=this.getColorN_Pattern(arguments)}setFillColorN(){this.current.fillColor=this.getColorN_Pattern(arguments),this.current.patternFill=!0}setStrokeRGBColor(J,e,w){var x;const E=((x=this.selectColor)==null?void 0:x.call(this,J,e,w))||z.Util.makeHexColor(J,e,w);this.ctx.strokeStyle=E,this.current.strokeColor=E}setFillRGBColor(J,e,w){var x;const E=((x=this.selectColor)==null?void 0:x.call(this,J,e,w))||z.Util.makeHexColor(J,e,w);this.ctx.fillStyle=E,this.current.fillColor=E,this.current.patternFill=!1}_getPattern(J,e=null){let w;return this.cachedPatterns.has(J)?w=this.cachedPatterns.get(J):(w=(0,T.getShadingPattern)(this.objs.get(J)),this.cachedPatterns.set(J,w)),e&&(w.matrix=e),w}shadingFill(J){if(!this.contentVisible)return;const e=this.ctx;this.save();const w=this._getPattern(J);e.fillStyle=w.getPattern(e,this,(0,_.getCurrentTransformInverse)(e),T.PathType.SHADING);const x=(0,_.getCurrentTransformInverse)(e);if(x){const E=e.canvas,P=E.width,iI=E.height,aI=z.Util.applyTransform([0,0],x),eI=z.Util.applyTransform([0,iI],x),A=z.Util.applyTransform([P,0],x),W=z.Util.applyTransform([P,iI],x),L=Math.min(aI[0],eI[0],A[0],W[0]),S=Math.min(aI[1],eI[1],A[1],W[1]),Q=Math.max(aI[0],eI[0],A[0],W[0]),lI=Math.max(aI[1],eI[1],A[1],W[1]);this.ctx.fillRect(L,S,Q-L,lI-S)}else this.ctx.fillRect(-1e10,-1e10,2e10,2e10);this.compose(this.current.getClippedPathBoundingBox()),this.restore()}beginInlineImage(){(0,z.unreachable)("Should not call beginInlineImage")}beginImageData(){(0,z.unreachable)("Should not call beginImageData")}paintFormXObjectBegin(J,e){if(this.contentVisible&&(this.save(),this.baseTransformStack.push(this.baseTransform),Array.isArray(J)&&J.length===6&&this.transform(...J),this.baseTransform=(0,_.getCurrentTransform)(this.ctx),e)){const w=e[2]-e[0],x=e[3]-e[1];this.ctx.rect(e[0],e[1],w,x),this.current.updateRectMinMax((0,_.getCurrentTransform)(this.ctx),e),this.clip(),this.endPath()}}paintFormXObjectEnd(){this.contentVisible&&(this.restore(),this.baseTransform=this.baseTransformStack.pop())}beginGroup(J){if(!this.contentVisible)return;this.save(),this.inSMaskMode&&(this.endSMaskMode(),this.current.activeSMask=null);const e=this.ctx;J.isolated||(0,z.info)("TODO: Support non-isolated groups."),J.knockout&&(0,z.warn)("Knockout groups not supported.");const w=(0,_.getCurrentTransform)(e);if(J.matrix&&e.transform(...J.matrix),!J.bbox)throw new Error("Bounding box is required.");let x=z.Util.getAxialAlignedBoundingBox(J.bbox,(0,_.getCurrentTransform)(e));const E=[0,0,e.canvas.width,e.canvas.height];x=z.Util.intersect(x,E)||[0,0,0,0];const P=Math.floor(x[0]),iI=Math.floor(x[1]);let aI=Math.max(Math.ceil(x[2])-P,1),eI=Math.max(Math.ceil(x[3])-iI,1),A=1,W=1;aI>D&&(A=aI/D,aI=D),eI>D&&(W=eI/D,eI=D),this.current.startNewPathAndClipBox([0,0,aI,eI]);let L="groupAt"+this.groupLevel;J.smask&&(L+="_smask_"+this.smaskCounter++%2);const S=this.cachedCanvases.getCanvas(L,aI,eI),Q=S.context;Q.scale(1/A,1/W),Q.translate(-P,-iI),Q.transform(...w),J.smask?this.smaskStack.push({canvas:S.canvas,context:Q,offsetX:P,offsetY:iI,scaleX:A,scaleY:W,subtype:J.smask.subtype,backdrop:J.smask.backdrop,transferMap:J.smask.transferMap||null,startTransformInverse:null}):(e.setTransform(1,0,0,1,0,0),e.translate(P,iI),e.scale(A,W),e.save()),X(e,Q),this.ctx=Q,this.setGState([["BM","source-over"],["ca",1],["CA",1]]),this.groupStack.push(e),this.groupLevel++}endGroup(J){if(!this.contentVisible)return;this.groupLevel--;const e=this.ctx,w=this.groupStack.pop();if(this.ctx=w,this.ctx.imageSmoothingEnabled=!1,J.smask)this.tempSMask=this.smaskStack.pop(),this.restore();else{this.ctx.restore();const x=(0,_.getCurrentTransform)(this.ctx);this.restore(),this.ctx.save(),this.ctx.setTransform(...x);const E=z.Util.getAxialAlignedBoundingBox([0,0,e.canvas.width,e.canvas.height],x);this.ctx.drawImage(e.canvas,0,0),this.ctx.restore(),this.compose(E)}}beginAnnotation(J,e,w,x,E){if(bI(this,h,M).call(this),b(this.ctx,this.foregroundColor),this.ctx.save(),this.save(),this.baseTransform&&this.ctx.setTransform(...this.baseTransform),Array.isArray(e)&&e.length===4){const P=e[2]-e[0],iI=e[3]-e[1];if(E&&this.annotationCanvasMap){w=w.slice(),w[4]-=e[0],w[5]-=e[1],e=e.slice(),e[0]=e[1]=0,e[2]=P,e[3]=iI;const[aI,eI]=z.Util.singularValueDecompose2dScale((0,_.getCurrentTransform)(this.ctx)),{viewportScale:A}=this,W=Math.ceil(P*this.outputScaleX*A),L=Math.ceil(iI*this.outputScaleY*A);this.annotationCanvas=this.canvasFactory.create(W,L);const{canvas:S,context:Q}=this.annotationCanvas;this.annotationCanvasMap.set(J,S),this.annotationCanvas.savedCtx=this.ctx,this.ctx=Q,this.ctx.setTransform(aI,0,0,-eI,0,iI*eI),b(this.ctx,this.foregroundColor)}else b(this.ctx,this.foregroundColor),this.ctx.rect(e[0],e[1],P,iI),this.ctx.clip(),this.endPath()}this.current=new I(this.ctx.canvas.width,this.ctx.canvas.height),this.transform(...w),this.transform(...x)}endAnnotation(){this.annotationCanvas&&(this.ctx=this.annotationCanvas.savedCtx,delete this.annotationCanvas.savedCtx,delete this.annotationCanvas)}paintImageMaskXObject(J){if(!this.contentVisible)return;const e=J.count;J=this.getObject(J.data,J),J.count=e;const w=this.ctx,x=this.processingType3;if(x&&(x.compiled===void 0&&(x.compiled=i(J)),x.compiled)){x.compiled(w);return}const E=this._createMaskCanvas(J),P=E.canvas;w.save(),w.setTransform(1,0,0,1,0,0),w.drawImage(P,E.offsetX,E.offsetY),w.restore(),this.compose()}paintImageMaskXObjectRepeat(J,e,w=0,x=0,E,P){if(!this.contentVisible)return;J=this.getObject(J.data,J);const iI=this.ctx;iI.save();const aI=(0,_.getCurrentTransform)(iI);iI.transform(e,w,x,E,0,0);const eI=this._createMaskCanvas(J);iI.setTransform(1,0,0,1,0,0);for(let A=0,W=P.length;A<W;A+=2){const L=z.Util.transform(aI,[e,w,x,E,P[A],P[A+1]]),[S,Q]=z.Util.applyTransform([0,0],L);iI.drawImage(eI.canvas,S,Q)}iI.restore(),this.compose()}paintImageMaskXObjectGroup(J){if(!this.contentVisible)return;const e=this.ctx,w=this.current.fillColor,x=this.current.patternFill;for(const E of J){const{data:P,width:iI,height:aI,transform:eI}=E,A=this.cachedCanvases.getCanvas("maskCanvas",iI,aI),W=A.context;W.save();const L=this.getObject(P,E);o(W,L),W.globalCompositeOperation="source-in",W.fillStyle=x?w.getPattern(W,this,(0,_.getCurrentTransformInverse)(e),T.PathType.FILL):w,W.fillRect(0,0,iI,aI),W.restore(),e.save(),e.transform(...eI),e.scale(1,-1),a(e,A.canvas,0,0,iI,aI,0,-1,1,1),e.restore()}this.compose()}paintImageXObject(J){if(!this.contentVisible)return;const e=this.getObject(J);if(!e){(0,z.warn)("Dependent image isn't ready yet");return}this.paintInlineImageXObject(e)}paintImageXObjectRepeat(J,e,w,x){if(!this.contentVisible)return;const E=this.getObject(J);if(!E){(0,z.warn)("Dependent image isn't ready yet");return}const P=E.width,iI=E.height,aI=[];for(let eI=0,A=x.length;eI<A;eI+=2)aI.push({transform:[e,0,0,w,x[eI],x[eI+1]],x:0,y:0,w:P,h:iI});this.paintInlineImageXObjectGroup(E,aI)}paintInlineImageXObject(J){if(!this.contentVisible)return;const e=J.width,w=J.height,x=this.ctx;this.save(),x.scale(1/e,-1/w);let E;if(typeof HTMLElement=="function"&&J instanceof HTMLElement||!J.data)E=J;else{const eI=this.cachedCanvases.getCanvas("inlineImage",e,w),A=eI.context;g(A,J,this.current.transferMaps),E=eI.canvas}const P=this._scaleImage(E,(0,_.getCurrentTransformInverse)(x));x.imageSmoothingEnabled=gI((0,_.getCurrentTransform)(x),J.interpolate);const[iI,aI]=a(x,P.img,0,0,P.paintWidth,P.paintHeight,0,-w,e,w);if(this.imageLayer){const[eI,A]=z.Util.applyTransform([0,-w],(0,_.getCurrentTransform)(this.ctx));this.imageLayer.appendImage({imgData:J,left:eI,top:A,width:iI,height:aI})}this.compose(),this.restore()}paintInlineImageXObjectGroup(J,e){if(!this.contentVisible)return;const w=this.ctx,x=J.width,E=J.height,P=this.cachedCanvases.getCanvas("inlineImage",x,E),iI=P.context;g(iI,J,this.current.transferMaps);for(const aI of e){if(w.save(),w.transform(...aI.transform),w.scale(1,-1),a(w,P.canvas,aI.x,aI.y,aI.w,aI.h,0,-1,1,1),this.imageLayer){const[eI,A]=z.Util.applyTransform([aI.x,aI.y],(0,_.getCurrentTransform)(this.ctx));this.imageLayer.appendImage({imgData:J,left:eI,top:A,width:x,height:E})}w.restore()}this.compose()}paintSolidColorImageMask(){this.contentVisible&&(this.ctx.fillRect(0,0,1,1),this.compose())}markPoint(J){}markPointProps(J,e){}beginMarkedContent(J){this.markedContentStack.push({visible:!0})}beginMarkedContentProps(J,e){J==="OC"?this.markedContentStack.push({visible:this.optionalContentConfig.isVisible(e)}):this.markedContentStack.push({visible:!0}),this.contentVisible=this.isContentVisible()}endMarkedContent(){this.markedContentStack.pop(),this.contentVisible=this.isContentVisible()}beginCompat(){}endCompat(){}consumePath(J){const e=this.current.isEmptyClip();this.pendingClip&&this.current.updateClipFromPath(),this.pendingClip||this.compose(J);const w=this.ctx;this.pendingClip&&(e||(this.pendingClip===mI?w.clip("evenodd"):w.clip()),this.pendingClip=null),this.current.startNewPathAndClipBox(this.current.clipBox),w.beginPath()}getSinglePixelWidth(){if(!this._cachedGetSinglePixelWidth){const J=(0,_.getCurrentTransform)(this.ctx);if(J[1]===0&&J[2]===0)this._cachedGetSinglePixelWidth=1/Math.min(Math.abs(J[0]),Math.abs(J[3]));else{const e=Math.abs(J[0]*J[3]-J[2]*J[1]),w=Math.hypot(J[0],J[2]),x=Math.hypot(J[1],J[3]);this._cachedGetSinglePixelWidth=Math.max(w,x)/e}}return this._cachedGetSinglePixelWidth}getScaleForStroking(){if(!this._cachedScaleForStroking){const{lineWidth:J}=this.current,e=(0,_.getCurrentTransform)(this.ctx);let w,x;if(e[1]===0&&e[2]===0){const E=Math.abs(e[0]),P=Math.abs(e[3]);if(J===0)w=1/E,x=1/P;else{const iI=E*J,aI=P*J;w=iI<1?1/iI:1,x=aI<1?1/aI:1}}else{const E=Math.abs(e[0]*e[3]-e[2]*e[1]),P=Math.hypot(e[0],e[1]),iI=Math.hypot(e[2],e[3]);if(J===0)w=iI/E,x=P/E;else{const aI=J*E;w=iI>aI?iI/aI:1,x=P>aI?P/aI:1}}this._cachedScaleForStroking=[w,x]}return this._cachedScaleForStroking}rescaleAndStroke(J){const{ctx:e}=this,{lineWidth:w}=this.current,[x,E]=this.getScaleForStroking();if(e.lineWidth=w||1,x===1&&E===1){e.stroke();return}let P,iI,aI;J&&(P=(0,_.getCurrentTransform)(e),iI=e.getLineDash().slice(),aI=e.lineDashOffset),e.scale(x,E);const eI=Math.max(x,E);e.setLineDash(e.getLineDash().map(A=>A/eI)),e.lineDashOffset/=eI,e.stroke(),J&&(e.setTransform(...P),e.setLineDash(iI),e.lineDashOffset=aI)}isContentVisible(){for(let J=this.markedContentStack.length-1;J>=0;J--)if(!this.markedContentStack[J].visible)return!1;return!0}};let BI=NI;h=new WeakSet,M=function(){for(;this.stateStack.length||this.inSMaskMode;)this.restore();this.ctx.restore(),this.transparentCanvas&&(this.ctx=this.compositeCtx,this.ctx.save(),this.ctx.setTransform(1,0,0,1,0,0),this.ctx.drawImage(this.transparentCanvas,0,0),this.ctx.restore(),this.transparentCanvas=null)},c.CanvasGraphics=BI;for(const J in z.OPS)BI.prototype[J]!==void 0&&(BI.prototype[z.OPS[J]]=BI.prototype[J])},(wI,c,$)=>{Object.defineProperty(c,"__esModule",{value:!0}),c.TilingPattern=c.PathType=void 0,c.getShadingPattern=d;var h=$(1),M=$(8),_=$(3);const z={FILL:"Fill",STROKE:"Stroke",SHADING:"Shading"};c.PathType=z;function T(B,Y){if(!Y||_.isNodeJS)return;const a=Y[2]-Y[0],i=Y[3]-Y[1],I=new Path2D;I.rect(Y[0],Y[1],a,i),B.clip(I)}class r{constructor(){this.constructor===r&&(0,h.unreachable)("Cannot initialize BaseShadingPattern.")}getPattern(){(0,h.unreachable)("Abstract method `getPattern` called.")}}class Z extends r{constructor(Y){super(),this._type=Y[1],this._bbox=Y[2],this._colorStops=Y[3],this._p0=Y[4],this._p1=Y[5],this._r0=Y[6],this._r1=Y[7],this.matrix=null}_createGradient(Y){let a;this._type==="axial"?a=Y.createLinearGradient(this._p0[0],this._p0[1],this._p1[0],this._p1[1]):this._type==="radial"&&(a=Y.createRadialGradient(this._p0[0],this._p0[1],this._r0,this._p1[0],this._p1[1],this._r1));for(const i of this._colorStops)a.addColorStop(i[0],i[1]);return a}getPattern(Y,a,i,I){let g;if(I===z.STROKE||I===z.FILL){const o=a.current.getClippedPathBoundingBox(I,(0,M.getCurrentTransform)(Y))||[0,0,0,0],X=Math.ceil(o[2]-o[0])||1,b=Math.ceil(o[3]-o[1])||1,N=a.cachedCanvases.getCanvas("pattern",X,b,!0),F=N.context;F.clearRect(0,0,F.canvas.width,F.canvas.height),F.beginPath(),F.rect(0,0,F.canvas.width,F.canvas.height),F.translate(-o[0],-o[1]),i=h.Util.transform(i,[1,0,0,1,o[0],o[1]]),F.transform(...a.baseTransform),this.matrix&&F.transform(...this.matrix),T(F,this._bbox),F.fillStyle=this._createGradient(F),F.fill(),g=Y.createPattern(N.canvas,"no-repeat");const hI=new DOMMatrix(i);try{g.setTransform(hI)}catch(YI){(0,h.warn)(`RadialAxialShadingPattern.getPattern: "${YI==null?void 0:YI.message}".`)}}else T(Y,this._bbox),g=this._createGradient(Y);return g}}function p(B,Y,a,i,I,g,o,X){const b=Y.coords,N=Y.colors,F=B.data,hI=B.width*4;let YI;b[a+1]>b[i+1]&&(YI=a,a=i,i=YI,YI=g,g=o,o=YI),b[i+1]>b[I+1]&&(YI=i,i=I,I=YI,YI=o,o=X,X=YI),b[a+1]>b[i+1]&&(YI=a,a=i,i=YI,YI=g,g=o,o=YI);const nI=(b[a]+Y.offsetX)*Y.scaleX,gI=(b[a+1]+Y.offsetY)*Y.scaleY,U=(b[i]+Y.offsetX)*Y.scaleX,II=(b[i+1]+Y.offsetY)*Y.scaleY,q=(b[I]+Y.offsetX)*Y.scaleX,mI=(b[I+1]+Y.offsetY)*Y.scaleY;if(gI>=mI)return;const NI=N[g],BI=N[g+1],J=N[g+2],e=N[o],w=N[o+1],x=N[o+2],E=N[X],P=N[X+1],iI=N[X+2],aI=Math.round(gI),eI=Math.round(mI);let A,W,L,S,Q,lI,uI,MI;for(let ZI=aI;ZI<=eI;ZI++){if(ZI<II){let v;ZI<gI?v=0:v=(gI-ZI)/(gI-II),A=nI-(nI-U)*v,W=NI-(NI-e)*v,L=BI-(BI-w)*v,S=J-(J-x)*v}else{let v;ZI>mI?v=1:II===mI?v=0:v=(II-ZI)/(II-mI),A=U-(U-q)*v,W=e-(e-E)*v,L=w-(w-P)*v,S=x-(x-iI)*v}let WI;ZI<gI?WI=0:ZI>mI?WI=1:WI=(gI-ZI)/(gI-mI),Q=nI-(nI-q)*WI,lI=NI-(NI-E)*WI,uI=BI-(BI-P)*WI,MI=J-(J-iI)*WI;const tI=Math.round(Math.min(A,Q)),O=Math.round(Math.max(A,Q));let f=hI*ZI+tI*4;for(let v=tI;v<=O;v++)WI=(A-v)/(A-Q),WI<0?WI=0:WI>1&&(WI=1),F[f++]=W-(W-lI)*WI|0,F[f++]=L-(L-uI)*WI|0,F[f++]=S-(S-MI)*WI|0,F[f++]=255}}function j(B,Y,a){const i=Y.coords,I=Y.colors;let g,o;switch(Y.type){case"lattice":const X=Y.verticesPerRow,b=Math.floor(i.length/X)-1,N=X-1;for(g=0;g<b;g++){let F=g*X;for(let hI=0;hI<N;hI++,F++)p(B,a,i[F],i[F+1],i[F+X],I[F],I[F+1],I[F+X]),p(B,a,i[F+X+1],i[F+1],i[F+X],I[F+X+1],I[F+1],I[F+X])}break;case"triangles":for(g=0,o=i.length;g<o;g+=3)p(B,a,i[g],i[g+1],i[g+2],I[g],I[g+1],I[g+2]);break;default:throw new Error("illegal figure")}}class D extends r{constructor(Y){super(),this._coords=Y[2],this._colors=Y[3],this._figures=Y[4],this._bounds=Y[5],this._bbox=Y[7],this._background=Y[8],this.matrix=null}_createMeshCanvas(Y,a,i){const I=Math.floor(this._bounds[0]),g=Math.floor(this._bounds[1]),o=Math.ceil(this._bounds[2])-I,X=Math.ceil(this._bounds[3])-g,b=Math.min(Math.ceil(Math.abs(o*Y[0]*1.1)),3e3),N=Math.min(Math.ceil(Math.abs(X*Y[1]*1.1)),3e3),F=o/b,hI=X/N,YI={coords:this._coords,colors:this._colors,offsetX:-I,offsetY:-g,scaleX:1/F,scaleY:1/hI},nI=b+2*2,gI=N+2*2,U=i.getCanvas("mesh",nI,gI,!1),II=U.context,q=II.createImageData(b,N);if(a){const mI=q.data;for(let NI=0,BI=mI.length;NI<BI;NI+=4)mI[NI]=a[0],mI[NI+1]=a[1],mI[NI+2]=a[2],mI[NI+3]=255}for(const mI of this._figures)j(q,mI,YI);return II.putImageData(q,2,2),{canvas:U.canvas,offsetX:I-2*F,offsetY:g-2*hI,scaleX:F,scaleY:hI}}getPattern(Y,a,i,I){T(Y,this._bbox);let g;if(I===z.SHADING)g=h.Util.singularValueDecompose2dScale((0,M.getCurrentTransform)(Y));else if(g=h.Util.singularValueDecompose2dScale(a.baseTransform),this.matrix){const X=h.Util.singularValueDecompose2dScale(this.matrix);g=[g[0]*X[0],g[1]*X[1]]}const o=this._createMeshCanvas(g,I===z.SHADING?null:this._background,a.cachedCanvases);return I!==z.SHADING&&(Y.setTransform(...a.baseTransform),this.matrix&&Y.transform(...this.matrix)),Y.translate(o.offsetX,o.offsetY),Y.scale(o.scaleX,o.scaleY),Y.createPattern(o.canvas,"no-repeat")}}class m extends r{getPattern(){return"hotpink"}}function d(B){switch(B[0]){case"RadialAxial":return new Z(B);case"Mesh":return new D(B);case"Dummy":return new m}throw new Error(`Unknown IR type: ${B[0]}`)}const C={COLORED:1,UNCOLORED:2};class l{static get MAX_PATTERN_SIZE(){return(0,h.shadow)(this,"MAX_PATTERN_SIZE",3e3)}constructor(Y,a,i,I,g){this.operatorList=Y[2],this.matrix=Y[3]||[1,0,0,1,0,0],this.bbox=Y[4],this.xstep=Y[5],this.ystep=Y[6],this.paintType=Y[7],this.tilingType=Y[8],this.color=a,this.ctx=i,this.canvasGraphicsFactory=I,this.baseTransform=g}createPatternCanvas(Y){const a=this.operatorList,i=this.bbox,I=this.xstep,g=this.ystep,o=this.paintType,X=this.tilingType,b=this.color,N=this.canvasGraphicsFactory;(0,h.info)("TilingType: "+X);const F=i[0],hI=i[1],YI=i[2],nI=i[3],gI=h.Util.singularValueDecompose2dScale(this.matrix),U=h.Util.singularValueDecompose2dScale(this.baseTransform),II=[gI[0]*U[0],gI[1]*U[1]],q=this.getSizeAndScale(I,this.ctx.canvas.width,II[0]),mI=this.getSizeAndScale(g,this.ctx.canvas.height,II[1]),NI=Y.cachedCanvases.getCanvas("pattern",q.size,mI.size,!0),BI=NI.context,J=N.createCanvasGraphics(BI);J.groupLevel=Y.groupLevel,this.setFillAndStrokeStyleToContext(J,o,b);let e=F,w=hI,x=YI,E=nI;return F<0&&(e=0,x+=Math.abs(F)),hI<0&&(w=0,E+=Math.abs(hI)),BI.translate(-(q.scale*e),-(mI.scale*w)),J.transform(q.scale,0,0,mI.scale,0,0),BI.save(),this.clipBbox(J,e,w,x,E),J.baseTransform=(0,M.getCurrentTransform)(J.ctx),J.executeOperatorList(a),J.endDrawing(),{canvas:NI.canvas,scaleX:q.scale,scaleY:mI.scale,offsetX:e,offsetY:w}}getSizeAndScale(Y,a,i){Y=Math.abs(Y);const I=Math.max(l.MAX_PATTERN_SIZE,a);let g=Math.ceil(Y*i);return g>=I?g=I:i=g/Y,{scale:i,size:g}}clipBbox(Y,a,i,I,g){const o=I-a,X=g-i;Y.ctx.rect(a,i,o,X),Y.current.updateRectMinMax((0,M.getCurrentTransform)(Y.ctx),[a,i,I,g]),Y.clip(),Y.endPath()}setFillAndStrokeStyleToContext(Y,a,i){const I=Y.ctx,g=Y.current;switch(a){case C.COLORED:const o=this.ctx;I.fillStyle=o.fillStyle,I.strokeStyle=o.strokeStyle,g.fillColor=o.fillStyle,g.strokeColor=o.strokeStyle;break;case C.UNCOLORED:const X=h.Util.makeHexColor(i[0],i[1],i[2]);I.fillStyle=X,I.strokeStyle=X,g.fillColor=X,g.strokeColor=X;break;default:throw new h.FormatError(`Unsupported paint type: ${a}`)}}getPattern(Y,a,i,I){let g=i;I!==z.SHADING&&(g=h.Util.transform(g,a.baseTransform),this.matrix&&(g=h.Util.transform(g,this.matrix)));const o=this.createPatternCanvas(a);let X=new DOMMatrix(g);X=X.translate(o.offsetX,o.offsetY),X=X.scale(1/o.scaleX,1/o.scaleY);const b=Y.createPattern(o.canvas,"repeat");try{b.setTransform(X)}catch(N){(0,h.warn)(`TilingPattern.getPattern: "${N==null?void 0:N.message}".`)}return b}}c.TilingPattern=l},(wI,c,$)=>{Object.defineProperty(c,"__esModule",{value:!0}),c.applyMaskImageData=M;var h=$(1);function M({src:_,srcPos:z=0,dest:T,destPos:r=0,width:Z,height:p,inverseDecode:j=!1}){const D=h.FeatureTest.isLittleEndian?4278190080:255,[m,d]=j?[0,D]:[D,0],C=Z>>3,l=Z&7,B=_.length;T=new Uint32Array(T.buffer);for(let Y=0;Y<p;Y++){for(const i=z+C;z<i;z++){const I=z<B?_[z]:255;T[r++]=I&128?d:m,T[r++]=I&64?d:m,T[r++]=I&32?d:m,T[r++]=I&16?d:m,T[r++]=I&8?d:m,T[r++]=I&4?d:m,T[r++]=I&2?d:m,T[r++]=I&1?d:m}if(l===0)continue;const a=z<B?_[z++]:255;for(let i=0;i<l;i++)T[r++]=a&1<<7-i?d:m}return{srcPos:z,destPos:r}}},(wI,c)=>{Object.defineProperty(c,"__esModule",{value:!0}),c.GlobalWorkerOptions=void 0;const $=Object.create(null);c.GlobalWorkerOptions=$,$.workerPort=$.workerPort===void 0?null:$.workerPort,$.workerSrc=$.workerSrc===void 0?"":$.workerSrc},(wI,c,$)=>{Object.defineProperty(c,"__esModule",{value:!0}),c.MessageHandler=void 0;var h=$(1);const M={UNKNOWN:0,DATA:1,ERROR:2},_={UNKNOWN:0,CANCEL:1,CANCEL_COMPLETE:2,CLOSE:3,ENQUEUE:4,ERROR:5,PULL:6,PULL_COMPLETE:7,START_COMPLETE:8};function z(r){switch(r instanceof Error||typeof r=="object"&&r!==null||(0,h.unreachable)('wrapReason: Expected "reason" to be a (possibly cloned) Error.'),r.name){case"AbortException":return new h.AbortException(r.message);case"MissingPDFException":return new h.MissingPDFException(r.message);case"PasswordException":return new h.PasswordException(r.message,r.code);case"UnexpectedResponseException":return new h.UnexpectedResponseException(r.message,r.status);case"UnknownErrorException":return new h.UnknownErrorException(r.message,r.details);default:return new h.UnknownErrorException(r.message,r.toString())}}class T{constructor(Z,p,j){this.sourceName=Z,this.targetName=p,this.comObj=j,this.callbackId=1,this.streamId=1,this.streamSinks=Object.create(null),this.streamControllers=Object.create(null),this.callbackCapabilities=Object.create(null),this.actionHandler=Object.create(null),this._onComObjOnMessage=D=>{const m=D.data;if(m.targetName!==this.sourceName)return;if(m.stream){this._processStreamMessage(m);return}if(m.callback){const C=m.callbackId,l=this.callbackCapabilities[C];if(!l)throw new Error(`Cannot resolve callback ${C}`);if(delete this.callbackCapabilities[C],m.callback===M.DATA)l.resolve(m.data);else if(m.callback===M.ERROR)l.reject(z(m.reason));else throw new Error("Unexpected callback case");return}const d=this.actionHandler[m.action];if(!d)throw new Error(`Unknown action from worker: ${m.action}`);if(m.callbackId){const C=this.sourceName,l=m.sourceName;new Promise(function(B){B(d(m.data))}).then(function(B){j.postMessage({sourceName:C,targetName:l,callback:M.DATA,callbackId:m.callbackId,data:B})},function(B){j.postMessage({sourceName:C,targetName:l,callback:M.ERROR,callbackId:m.callbackId,reason:z(B)})});return}if(m.streamId){this._createStreamSink(m);return}d(m.data)},j.addEventListener("message",this._onComObjOnMessage)}on(Z,p){const j=this.actionHandler;if(j[Z])throw new Error(`There is already an actionName called "${Z}"`);j[Z]=p}send(Z,p,j){this.comObj.postMessage({sourceName:this.sourceName,targetName:this.targetName,action:Z,data:p},j)}sendWithPromise(Z,p,j){const D=this.callbackId++,m=(0,h.createPromiseCapability)();this.callbackCapabilities[D]=m;try{this.comObj.postMessage({sourceName:this.sourceName,targetName:this.targetName,action:Z,callbackId:D,data:p},j)}catch(d){m.reject(d)}return m.promise}sendWithStream(Z,p,j,D){const m=this.streamId++,d=this.sourceName,C=this.targetName,l=this.comObj;return new ReadableStream({start:B=>{const Y=(0,h.createPromiseCapability)();return this.streamControllers[m]={controller:B,startCall:Y,pullCall:null,cancelCall:null,isClosed:!1},l.postMessage({sourceName:d,targetName:C,action:Z,streamId:m,data:p,desiredSize:B.desiredSize},D),Y.promise},pull:B=>{const Y=(0,h.createPromiseCapability)();return this.streamControllers[m].pullCall=Y,l.postMessage({sourceName:d,targetName:C,stream:_.PULL,streamId:m,desiredSize:B.desiredSize}),Y.promise},cancel:B=>{(0,h.assert)(B instanceof Error,"cancel must have a valid reason");const Y=(0,h.createPromiseCapability)();return this.streamControllers[m].cancelCall=Y,this.streamControllers[m].isClosed=!0,l.postMessage({sourceName:d,targetName:C,stream:_.CANCEL,streamId:m,reason:z(B)}),Y.promise}},j)}_createStreamSink(Z){const p=Z.streamId,j=this.sourceName,D=Z.sourceName,m=this.comObj,d=this,C=this.actionHandler[Z.action],l={enqueue(B,Y=1,a){if(this.isCancelled)return;const i=this.desiredSize;this.desiredSize-=Y,i>0&&this.desiredSize<=0&&(this.sinkCapability=(0,h.createPromiseCapability)(),this.ready=this.sinkCapability.promise),m.postMessage({sourceName:j,targetName:D,stream:_.ENQUEUE,streamId:p,chunk:B},a)},close(){this.isCancelled||(this.isCancelled=!0,m.postMessage({sourceName:j,targetName:D,stream:_.CLOSE,streamId:p}),delete d.streamSinks[p])},error(B){(0,h.assert)(B instanceof Error,"error must have a valid reason"),!this.isCancelled&&(this.isCancelled=!0,m.postMessage({sourceName:j,targetName:D,stream:_.ERROR,streamId:p,reason:z(B)}))},sinkCapability:(0,h.createPromiseCapability)(),onPull:null,onCancel:null,isCancelled:!1,desiredSize:Z.desiredSize,ready:null};l.sinkCapability.resolve(),l.ready=l.sinkCapability.promise,this.streamSinks[p]=l,new Promise(function(B){B(C(Z.data,l))}).then(function(){m.postMessage({sourceName:j,targetName:D,stream:_.START_COMPLETE,streamId:p,success:!0})},function(B){m.postMessage({sourceName:j,targetName:D,stream:_.START_COMPLETE,streamId:p,reason:z(B)})})}_processStreamMessage(Z){const p=Z.streamId,j=this.sourceName,D=Z.sourceName,m=this.comObj,d=this.streamControllers[p],C=this.streamSinks[p];switch(Z.stream){case _.START_COMPLETE:Z.success?d.startCall.resolve():d.startCall.reject(z(Z.reason));break;case _.PULL_COMPLETE:Z.success?d.pullCall.resolve():d.pullCall.reject(z(Z.reason));break;case _.PULL:if(!C){m.postMessage({sourceName:j,targetName:D,stream:_.PULL_COMPLETE,streamId:p,success:!0});break}C.desiredSize<=0&&Z.desiredSize>0&&C.sinkCapability.resolve(),C.desiredSize=Z.desiredSize,new Promise(function(l){l(C.onPull&&C.onPull())}).then(function(){m.postMessage({sourceName:j,targetName:D,stream:_.PULL_COMPLETE,streamId:p,success:!0})},function(l){m.postMessage({sourceName:j,targetName:D,stream:_.PULL_COMPLETE,streamId:p,reason:z(l)})});break;case _.ENQUEUE:if((0,h.assert)(d,"enqueue should have stream controller"),d.isClosed)break;d.controller.enqueue(Z.chunk);break;case _.CLOSE:if((0,h.assert)(d,"close should have stream controller"),d.isClosed)break;d.isClosed=!0,d.controller.close(),this._deleteStreamController(d,p);break;case _.ERROR:(0,h.assert)(d,"error should have stream controller"),d.controller.error(z(Z.reason)),this._deleteStreamController(d,p);break;case _.CANCEL_COMPLETE:Z.success?d.cancelCall.resolve():d.cancelCall.reject(z(Z.reason)),this._deleteStreamController(d,p);break;case _.CANCEL:if(!C)break;new Promise(function(l){l(C.onCancel&&C.onCancel(z(Z.reason)))}).then(function(){m.postMessage({sourceName:j,targetName:D,stream:_.CANCEL_COMPLETE,streamId:p,success:!0})},function(l){m.postMessage({sourceName:j,targetName:D,stream:_.CANCEL_COMPLETE,streamId:p,reason:z(l)})}),C.sinkCapability.reject(z(Z.reason)),C.isCancelled=!0,delete this.streamSinks[p];break;default:throw new Error("Unexpected stream case")}}async _deleteStreamController(Z,p){await Promise.allSettled([Z.startCall&&Z.startCall.promise,Z.pullCall&&Z.pullCall.promise,Z.cancelCall&&Z.cancelCall.promise]),delete this.streamControllers[p]}destroy(){this.comObj.removeEventListener("message",this._onComObjOnMessage)}}c.MessageHandler=T},(wI,c,$)=>{var h,M;Object.defineProperty(c,"__esModule",{value:!0}),c.Metadata=void 0;var _=$(1);class z{constructor({parsedData:r,rawData:Z}){GI(this,h,void 0),GI(this,M,void 0),XI(this,h,r),XI(this,M,Z)}getRaw(){return R(this,M)}get(r){return R(this,h).get(r)??null}getAll(){return(0,_.objectFromMap)(R(this,h))}has(r){return R(this,h).has(r)}}h=new WeakMap,M=new WeakMap,c.Metadata=z},(wI,c,$)=>{var h,M,_,z,T,r,Z;Object.defineProperty(c,"__esModule",{value:!0}),c.OptionalContentConfig=void 0;var p=$(1);const j=Symbol("INTERNAL");class D{constructor(C,l){GI(this,h,!0),this.name=C,this.intent=l}get visible(){return R(this,h)}_setVisible(C,l){C!==j&&(0,p.unreachable)("Internal method `_setVisible` called."),XI(this,h,l)}}h=new WeakMap;class m{constructor(C){if(GI(this,r),GI(this,M,!0),GI(this,_,new Map),GI(this,z,null),GI(this,T,null),this.name=null,this.creator=null,C!==null){this.name=C.name,this.creator=C.creator,XI(this,T,C.order);for(const l of C.groups)R(this,_).set(l.id,new D(l.name,l.intent));if(C.baseState==="OFF")for(const l of R(this,_).values())l._setVisible(j,!1);for(const l of C.on)R(this,_).get(l)._setVisible(j,!0);for(const l of C.off)R(this,_).get(l)._setVisible(j,!1);XI(this,z,new Map);for(const[l,B]of R(this,_))R(this,z).set(l,B.visible)}}isVisible(C){if(R(this,_).size===0)return!0;if(!C)return(0,p.warn)("Optional content group not defined."),!0;if(C.type==="OCG")return R(this,_).has(C.id)?R(this,_).get(C.id).visible:((0,p.warn)(`Optional content group not found: ${C.id}`),!0);if(C.type==="OCMD"){if(C.expression)return bI(this,r,Z).call(this,C.expression);if(!C.policy||C.policy==="AnyOn"){for(const l of C.ids){if(!R(this,_).has(l))return(0,p.warn)(`Optional content group not found: ${l}`),!0;if(R(this,_).get(l).visible)return!0}return!1}else if(C.policy==="AllOn"){for(const l of C.ids){if(!R(this,_).has(l))return(0,p.warn)(`Optional content group not found: ${l}`),!0;if(!R(this,_).get(l).visible)return!1}return!0}else if(C.policy==="AnyOff"){for(const l of C.ids){if(!R(this,_).has(l))return(0,p.warn)(`Optional content group not found: ${l}`),!0;if(!R(this,_).get(l).visible)return!0}return!1}else if(C.policy==="AllOff"){for(const l of C.ids){if(!R(this,_).has(l))return(0,p.warn)(`Optional content group not found: ${l}`),!0;if(R(this,_).get(l).visible)return!1}return!0}return(0,p.warn)(`Unknown optional content policy ${C.policy}.`),!0}return(0,p.warn)(`Unknown group type ${C.type}.`),!0}setVisibility(C,l=!0){if(!R(this,_).has(C)){(0,p.warn)(`Optional content group not found: ${C}`);return}R(this,_).get(C)._setVisible(j,!!l),XI(this,M,null)}get hasInitialVisibility(){if(R(this,M)!==null)return R(this,M);for(const[C,l]of R(this,_)){const B=R(this,z).get(C);if(l.visible!==B)return XI(this,M,!1)}return XI(this,M,!0)}getOrder(){return R(this,_).size?R(this,T)?R(this,T).slice():[...R(this,_).keys()]:null}getGroups(){return R(this,_).size>0?(0,p.objectFromMap)(R(this,_)):null}getGroup(C){return R(this,_).get(C)||null}}M=new WeakMap,_=new WeakMap,z=new WeakMap,T=new WeakMap,r=new WeakSet,Z=function(d){const C=d.length;if(C<2)return!0;const l=d[0];for(let B=1;B<C;B++){const Y=d[B];let a;if(Array.isArray(Y))a=bI(this,r,Z).call(this,Y);else if(R(this,_).has(Y))a=R(this,_).get(Y).visible;else return(0,p.warn)(`Optional content group not found: ${Y}`),!0;switch(l){case"And":if(!a)return!1;break;case"Or":if(a)return!0;break;case"Not":return!a;default:return!0}}return l==="And"},c.OptionalContentConfig=m},(wI,c,$)=>{Object.defineProperty(c,"__esModule",{value:!0}),c.PDFDataTransportStream=void 0;var h=$(1),M=$(8);class _{constructor(Z,p){(0,h.assert)(p,'PDFDataTransportStream - missing required "pdfDataRangeTransport" argument.'),this._queuedChunks=[],this._progressiveDone=Z.progressiveDone||!1,this._contentDispositionFilename=Z.contentDispositionFilename||null;const j=Z.initialData;if((j==null?void 0:j.length)>0){const D=new Uint8Array(j).buffer;this._queuedChunks.push(D)}this._pdfDataRangeTransport=p,this._isStreamingSupported=!Z.disableStream,this._isRangeSupported=!Z.disableRange,this._contentLength=Z.length,this._fullRequestReader=null,this._rangeReaders=[],this._pdfDataRangeTransport.addRangeListener((D,m)=>{this._onReceiveData({begin:D,chunk:m})}),this._pdfDataRangeTransport.addProgressListener((D,m)=>{this._onProgress({loaded:D,total:m})}),this._pdfDataRangeTransport.addProgressiveReadListener(D=>{this._onReceiveData({chunk:D})}),this._pdfDataRangeTransport.addProgressiveDoneListener(()=>{this._onProgressiveDone()}),this._pdfDataRangeTransport.transportReady()}_onReceiveData(Z){const p=new Uint8Array(Z.chunk).buffer;if(Z.begin===void 0)this._fullRequestReader?this._fullRequestReader._enqueue(p):this._queuedChunks.push(p);else{const j=this._rangeReaders.some(function(D){return D._begin!==Z.begin?!1:(D._enqueue(p),!0)});(0,h.assert)(j,"_onReceiveData - no `PDFDataTransportStreamRangeReader` instance found.")}}get _progressiveDataLength(){var Z;return((Z=this._fullRequestReader)==null?void 0:Z._loaded)??0}_onProgress(Z){if(Z.total===void 0){const p=this._rangeReaders[0];p!=null&&p.onProgress&&p.onProgress({loaded:Z.loaded})}else{const p=this._fullRequestReader;p!=null&&p.onProgress&&p.onProgress({loaded:Z.loaded,total:Z.total})}}_onProgressiveDone(){this._fullRequestReader&&this._fullRequestReader.progressiveDone(),this._progressiveDone=!0}_removeRangeReader(Z){const p=this._rangeReaders.indexOf(Z);p>=0&&this._rangeReaders.splice(p,1)}getFullReader(){(0,h.assert)(!this._fullRequestReader,"PDFDataTransportStream.getFullReader can only be called once.");const Z=this._queuedChunks;return this._queuedChunks=null,new z(this,Z,this._progressiveDone,this._contentDispositionFilename)}getRangeReader(Z,p){if(p<=this._progressiveDataLength)return null;const j=new T(this,Z,p);return this._pdfDataRangeTransport.requestDataRange(Z,p),this._rangeReaders.push(j),j}cancelAllRequests(Z){this._fullRequestReader&&this._fullRequestReader.cancel(Z);for(const p of this._rangeReaders.slice(0))p.cancel(Z);this._pdfDataRangeTransport.abort()}}c.PDFDataTransportStream=_;class z{constructor(Z,p,j=!1,D=null){this._stream=Z,this._done=j||!1,this._filename=(0,M.isPdfFile)(D)?D:null,this._queuedChunks=p||[],this._loaded=0;for(const m of this._queuedChunks)this._loaded+=m.byteLength;this._requests=[],this._headersReady=Promise.resolve(),Z._fullRequestReader=this,this.onProgress=null}_enqueue(Z){this._done||(this._requests.length>0?this._requests.shift().resolve({value:Z,done:!1}):this._queuedChunks.push(Z),this._loaded+=Z.byteLength)}get headersReady(){return this._headersReady}get filename(){return this._filename}get isRangeSupported(){return this._stream._isRangeSupported}get isStreamingSupported(){return this._stream._isStreamingSupported}get contentLength(){return this._stream._contentLength}async read(){if(this._queuedChunks.length>0)return{value:this._queuedChunks.shift(),done:!1};if(this._done)return{value:void 0,done:!0};const Z=(0,h.createPromiseCapability)();return this._requests.push(Z),Z.promise}cancel(Z){this._done=!0;for(const p of this._requests)p.resolve({value:void 0,done:!0});this._requests.length=0}progressiveDone(){this._done||(this._done=!0)}}class T{constructor(Z,p,j){this._stream=Z,this._begin=p,this._end=j,this._queuedChunk=null,this._requests=[],this._done=!1,this.onProgress=null}_enqueue(Z){if(!this._done){if(this._requests.length===0)this._queuedChunk=Z;else{this._requests.shift().resolve({value:Z,done:!1});for(const p of this._requests)p.resolve({value:void 0,done:!0});this._requests.length=0}this._done=!0,this._stream._removeRangeReader(this)}}get isStreamingSupported(){return!1}async read(){if(this._queuedChunk){const p=this._queuedChunk;return this._queuedChunk=null,{value:p,done:!1}}if(this._done)return{value:void 0,done:!0};const Z=(0,h.createPromiseCapability)();return this._requests.push(Z),Z.promise}cancel(Z){this._done=!0;for(const p of this._requests)p.resolve({value:void 0,done:!0});this._requests.length=0,this._stream._removeRangeReader(this)}}},(wI,c)=>{Object.defineProperty(c,"__esModule",{value:!0}),c.XfaText=void 0;class ${static textContent(M){const _=[],z={items:_,styles:Object.create(null)};function T(r){var Z;if(!r)return;let p=null;const j=r.name;if(j==="#text")p=r.value;else if($.shouldBuildText(j))(Z=r==null?void 0:r.attributes)!=null&&Z.textContent?p=r.attributes.textContent:r.value&&(p=r.value);else return;if(p!==null&&_.push({str:p}),!!r.children)for(const D of r.children)T(D)}return T(M),z}static shouldBuildText(M){return!(M==="textarea"||M==="input"||M==="option"||M==="select")}}c.XfaText=$},(wI,c,$)=>{Object.defineProperty(c,"__esModule",{value:!0}),c.NodeStandardFontDataFactory=c.NodeCanvasFactory=c.NodeCMapReaderFactory=void 0;var h=$(9);const M=function(r){return new Promise((Z,p)=>{require$$5.readFile(r,(j,D)=>{if(j||!D){p(new Error(j));return}Z(new Uint8Array(D))})})};class _ extends h.BaseCanvasFactory{_createCanvas(Z,p){return require$$5.createCanvas(Z,p)}}c.NodeCanvasFactory=_;class z extends h.BaseCMapReaderFactory{_fetchData(Z,p){return M(Z).then(j=>({cMapData:j,compressionType:p}))}}c.NodeCMapReaderFactory=z;class T extends h.BaseStandardFontDataFactory{_fetchData(Z){return M(Z)}}c.NodeStandardFontDataFactory=T},(wI,c,$)=>{var h,M,_,z,T,r,Z,p,j,D,m,d,C,l,B,Y;Object.defineProperty(c,"__esModule",{value:!0}),c.AnnotationEditorLayer=void 0;var a=$(7),i=$(1),I=$(23),g=$(24);const o=class{constructor(b){GI(this,j),GI(this,m),GI(this,C),GI(this,B),GI(this,h,void 0),GI(this,M,!1),GI(this,_,this.pointerup.bind(this)),GI(this,z,this.pointerdown.bind(this)),GI(this,T,new Map),GI(this,r,!1),GI(this,Z,!1),GI(this,p,void 0),o._initialized||(o._initialized=!0,I.FreeTextEditor.initialize(b.l10n),g.InkEditor.initialize(b.l10n),b.uiManager.registerEditorTypes([I.FreeTextEditor,g.InkEditor])),XI(this,p,b.uiManager),this.annotationStorage=b.annotationStorage,this.pageIndex=b.pageIndex,this.div=b.div,XI(this,h,b.accessibilityManager),R(this,p).addLayer(this)}updateToolbar(b){R(this,p).updateToolbar(b)}updateMode(b=R(this,p).getMode()){bI(this,B,Y).call(this),b===i.AnnotationEditorType.INK?(this.addInkEditorIfNeeded(!1),this.disableClick()):this.enableClick(),R(this,p).unselectAll()}addInkEditorIfNeeded(b){if(!(!b&&R(this,p).getMode()!==i.AnnotationEditorType.INK)){if(!b){for(const N of R(this,T).values())if(N.isEmpty()){N.setInBackground();return}}bI(this,C,l).call(this,{offsetX:0,offsetY:0}).setInBackground()}}setEditingState(b){R(this,p).setEditingState(b)}addCommands(b){R(this,p).addCommands(b)}enable(){this.div.style.pointerEvents="auto";for(const b of R(this,T).values())b.enableEditing()}disable(){this.div.style.pointerEvents="none";for(const b of R(this,T).values())b.disableEditing()}setActiveEditor(b){R(this,p).getActive()!==b&&R(this,p).setActiveEditor(b)}enableClick(){this.div.addEventListener("pointerdown",R(this,z)),this.div.addEventListener("pointerup",R(this,_))}disableClick(){this.div.removeEventListener("pointerdown",R(this,z)),this.div.removeEventListener("pointerup",R(this,_))}attach(b){R(this,T).set(b.id,b)}detach(b){var N;R(this,T).delete(b.id),(N=R(this,h))==null||N.removePointerInTextLayer(b.contentDiv)}remove(b){R(this,p).removeEditor(b),this.detach(b),this.annotationStorage.remove(b.id),b.div.style.display="none",setTimeout(()=>{b.div.style.display="",b.div.remove(),b.isAttachedToDOM=!1,document.activeElement===document.body&&R(this,p).focusMainContainer()},0),R(this,Z)||this.addInkEditorIfNeeded(!1)}add(b){if(bI(this,j,D).call(this,b),R(this,p).addEditor(b),this.attach(b),!b.isAttachedToDOM){const N=b.render();this.div.append(N),b.isAttachedToDOM=!0}this.moveEditorInDOM(b),b.onceAdded(),this.addToAnnotationStorage(b)}moveEditorInDOM(b){var N;(N=R(this,h))==null||N.moveElementInDOM(this.div,b.div,b.contentDiv,!0)}addToAnnotationStorage(b){!b.isEmpty()&&!this.annotationStorage.has(b.id)&&this.annotationStorage.setValue(b.id,b)}addOrRebuild(b){b.needsToBeRebuilt()?b.rebuild():this.add(b)}addANewEditor(b){const N=()=>{this.addOrRebuild(b)},F=()=>{b.remove()};this.addCommands({cmd:N,undo:F,mustExec:!0})}addUndoableEditor(b){const N=()=>{this.addOrRebuild(b)},F=()=>{b.remove()};this.addCommands({cmd:N,undo:F,mustExec:!1})}getNextId(){return R(this,p).getId()}deserialize(b){switch(b.annotationType){case i.AnnotationEditorType.FREETEXT:return I.FreeTextEditor.deserialize(b,this);case i.AnnotationEditorType.INK:return g.InkEditor.deserialize(b,this)}return null}setSelected(b){R(this,p).setSelected(b)}toggleSelected(b){R(this,p).toggleSelected(b)}isSelected(b){return R(this,p).isSelected(b)}unselect(b){R(this,p).unselect(b)}pointerup(b){const N=a.KeyboardManager.platform.isMac;if(!(b.button!==0||b.ctrlKey&&N)&&b.target===this.div&&R(this,r)){if(XI(this,r,!1),!R(this,M)){XI(this,M,!0);return}bI(this,C,l).call(this,b)}}pointerdown(b){const N=a.KeyboardManager.platform.isMac;if(b.button!==0||b.ctrlKey&&N||b.target!==this.div)return;XI(this,r,!0);const F=R(this,p).getActive();XI(this,M,!F||F.isEmpty())}drop(b){const N=b.dataTransfer.getData("text/plain"),F=R(this,p).getEditor(N);if(!F)return;b.preventDefault(),b.dataTransfer.dropEffect="move",bI(this,j,D).call(this,F);const hI=this.div.getBoundingClientRect(),YI=b.clientX-hI.x,nI=b.clientY-hI.y;F.translate(YI-F.startX,nI-F.startY),this.moveEditorInDOM(F),F.div.focus()}dragover(b){b.preventDefault()}destroy(){var b,N;((b=R(this,p).getActive())==null?void 0:b.parent)===this&&R(this,p).setActiveEditor(null);for(const F of R(this,T).values())(N=R(this,h))==null||N.removePointerInTextLayer(F.contentDiv),F.isAttachedToDOM=!1,F.div.remove(),F.parent=null;this.div=null,R(this,T).clear(),R(this,p).removeLayer(this)}render(b){this.viewport=b.viewport,(0,a.bindEvents)(this,this.div,["dragover","drop"]),this.setDimensions();for(const N of R(this,p).getEditors(this.pageIndex))this.add(N);this.updateMode()}update(b){this.viewport=b.viewport,this.setDimensions(),this.updateMode()}get scaleFactor(){return this.viewport.scale}get pageDimensions(){const[b,N,F,hI]=this.viewport.viewBox,YI=F-b,nI=hI-N;return[YI,nI]}get viewportBaseDimensions(){const{width:b,height:N,rotation:F}=this.viewport;return F%180===0?[b,N]:[N,b]}setDimensions(){const{width:b,height:N,rotation:F}=this.viewport,hI=F%180!==0,YI=Math.floor(b)+"px",nI=Math.floor(N)+"px";this.div.style.width=hI?nI:YI,this.div.style.height=hI?YI:nI,this.div.setAttribute("data-main-rotation",F)}};let X=o;h=new WeakMap,M=new WeakMap,_=new WeakMap,z=new WeakMap,T=new WeakMap,r=new WeakMap,Z=new WeakMap,p=new WeakMap,j=new WeakSet,D=function(b){var N;b.parent!==this&&(this.attach(b),b.pageIndex=this.pageIndex,(N=b.parent)==null||N.detach(b),b.parent=this,b.div&&b.isAttachedToDOM&&(b.div.remove(),this.div.append(b.div)))},m=new WeakSet,d=function(b){switch(R(this,p).getMode()){case i.AnnotationEditorType.FREETEXT:return new I.FreeTextEditor(b);case i.AnnotationEditorType.INK:return new g.InkEditor(b)}return null},C=new WeakSet,l=function(b){const N=this.getNextId(),F=bI(this,m,d).call(this,{parent:this,id:N,x:b.offsetX,y:b.offsetY});return F&&this.add(F),F},B=new WeakSet,Y=function(){XI(this,Z,!0);for(const b of R(this,T).values())b.isEmpty()&&b.remove();XI(this,Z,!1)},QI(X,"_initialized",!1),c.AnnotationEditorLayer=X},(wI,c,$)=>{var h,M,_,z,T,r,Z,p,j,D,m,d,C,l,B;Object.defineProperty(c,"__esModule",{value:!0}),c.FreeTextEditor=void 0;var Y=$(1),a=$(7),i=$(6);const I=class extends i.AnnotationEditor{constructor(o){super({...o,name:"freeTextEditor"}),GI(this,p),GI(this,D),GI(this,d),GI(this,l),GI(this,h,this.editorDivBlur.bind(this)),GI(this,M,this.editorDivFocus.bind(this)),GI(this,_,this.editorDivKeydown.bind(this)),GI(this,z,void 0),GI(this,T,""),GI(this,r,!1),GI(this,Z,void 0),XI(this,z,o.color||I._defaultColor||i.AnnotationEditor._defaultLineColor),XI(this,Z,o.fontSize||I._defaultFontSize)}static initialize(o){this._l10nPromise=new Map(["free_text_default_content","editor_free_text_aria_label"].map(b=>[b,o.get(b)]));const X=getComputedStyle(document.documentElement);this._internalPadding=parseFloat(X.getPropertyValue("--freetext-padding"))}static updateDefaultParams(o,X){switch(o){case Y.AnnotationEditorParamsType.FREETEXT_SIZE:I._defaultFontSize=X;break;case Y.AnnotationEditorParamsType.FREETEXT_COLOR:I._defaultColor=X;break}}updateParams(o,X){switch(o){case Y.AnnotationEditorParamsType.FREETEXT_SIZE:bI(this,p,j).call(this,X);break;case Y.AnnotationEditorParamsType.FREETEXT_COLOR:bI(this,D,m).call(this,X);break}}static get defaultPropertiesToUpdate(){return[[Y.AnnotationEditorParamsType.FREETEXT_SIZE,I._defaultFontSize],[Y.AnnotationEditorParamsType.FREETEXT_COLOR,I._defaultColor||i.AnnotationEditor._defaultLineColor]]}get propertiesToUpdate(){return[[Y.AnnotationEditorParamsType.FREETEXT_SIZE,R(this,Z)],[Y.AnnotationEditorParamsType.FREETEXT_COLOR,R(this,z)]]}getInitialTranslation(){return[-I._internalPadding*this.parent.scaleFactor,-(I._internalPadding+R(this,Z))*this.parent.scaleFactor]}rebuild(){super.rebuild(),this.div!==null&&(this.isAttachedToDOM||this.parent.add(this))}enableEditMode(){this.isInEditMode()||(this.parent.setEditingState(!1),this.parent.updateToolbar(Y.AnnotationEditorType.FREETEXT),super.enableEditMode(),this.enableEditing(),this.overlayDiv.classList.remove("enabled"),this.editorDiv.contentEditable=!0,this.div.draggable=!1,this.editorDiv.addEventListener("keydown",R(this,_)),this.editorDiv.addEventListener("focus",R(this,M)),this.editorDiv.addEventListener("blur",R(this,h)))}disableEditMode(){this.isInEditMode()&&(this.parent.setEditingState(!0),super.disableEditMode(),this.disableEditing(),this.overlayDiv.classList.add("enabled"),this.editorDiv.contentEditable=!1,this.div.draggable=!0,this.editorDiv.removeEventListener("keydown",R(this,_)),this.editorDiv.removeEventListener("focus",R(this,M)),this.editorDiv.removeEventListener("blur",R(this,h)),this.div.focus(),this.isEditing=!1)}focusin(o){super.focusin(o),o.target!==this.editorDiv&&this.editorDiv.focus()}onceAdded(){this.width||(this.enableEditMode(),this.editorDiv.focus())}isEmpty(){return!this.editorDiv||this.editorDiv.innerText.trim()===""}remove(){this.isEditing=!1,this.parent.setEditingState(!0),super.remove()}commit(){super.commit(),R(this,r)||(XI(this,r,!0),this.parent.addUndoableEditor(this)),this.disableEditMode(),XI(this,T,bI(this,d,C).call(this).trimEnd()),bI(this,l,B).call(this)}shouldGetKeyboardEvents(){return this.isInEditMode()}dblclick(o){this.enableEditMode(),this.editorDiv.focus()}keydown(o){o.target===this.div&&o.key==="Enter"&&(this.enableEditMode(),this.editorDiv.focus())}editorDivKeydown(o){I._keyboardManager.exec(this,o)}editorDivFocus(o){this.isEditing=!0}editorDivBlur(o){this.isEditing=!1}disableEditing(){this.editorDiv.setAttribute("role","comment"),this.editorDiv.removeAttribute("aria-multiline")}enableEditing(){this.editorDiv.setAttribute("role","textbox"),this.editorDiv.setAttribute("aria-multiline",!0)}render(){if(this.div)return this.div;let o,X;this.width&&(o=this.x,X=this.y),super.render(),this.editorDiv=document.createElement("div"),this.editorDiv.className="internal",this.editorDiv.setAttribute("id",`${this.id}-editor`),this.enableEditing(),I._l10nPromise.get("editor_free_text_aria_label").then(N=>{var F;return(F=this.editorDiv)==null?void 0:F.setAttribute("aria-label",N)}),I._l10nPromise.get("free_text_default_content").then(N=>{var F;return(F=this.editorDiv)==null?void 0:F.setAttribute("default-content",N)}),this.editorDiv.contentEditable=!0;const{style:b}=this.editorDiv;if(b.fontSize=`calc(${R(this,Z)}px * var(--scale-factor))`,b.color=R(this,z),this.div.append(this.editorDiv),this.overlayDiv=document.createElement("div"),this.overlayDiv.classList.add("overlay","enabled"),this.div.append(this.overlayDiv),(0,a.bindEvents)(this,this.div,["dblclick","keydown"]),this.width){const[N,F]=this.parent.viewportBaseDimensions;this.setAt(o*N,X*F,this.width*N,this.height*F);for(const hI of R(this,T).split(`
`)){const YI=document.createElement("div");YI.append(hI?document.createTextNode(hI):document.createElement("br")),this.editorDiv.append(YI)}this.div.draggable=!0,this.editorDiv.contentEditable=!1}else this.div.draggable=!1,this.editorDiv.contentEditable=!0;return this.div}get contentDiv(){return this.editorDiv}static deserialize(o,X){const b=super.deserialize(o,X);return XI(b,Z,o.fontSize),XI(b,z,Y.Util.makeHexColor(...o.color)),XI(b,T,o.value),b}serialize(){if(this.isEmpty())return null;const o=I._internalPadding*this.parent.scaleFactor,X=this.getRect(o,o),b=i.AnnotationEditor._colorManager.convert(getComputedStyle(this.editorDiv).color);return{annotationType:Y.AnnotationEditorType.FREETEXT,color:b,fontSize:R(this,Z),value:R(this,T),pageIndex:this.parent.pageIndex,rect:X,rotation:this.rotation}}};let g=I;h=new WeakMap,M=new WeakMap,_=new WeakMap,z=new WeakMap,T=new WeakMap,r=new WeakMap,Z=new WeakMap,p=new WeakSet,j=function(o){const X=N=>{this.editorDiv.style.fontSize=`calc(${N}px * var(--scale-factor))`,this.translate(0,-(N-R(this,Z))*this.parent.scaleFactor),XI(this,Z,N),bI(this,l,B).call(this)},b=R(this,Z);this.parent.addCommands({cmd:()=>{X(o)},undo:()=>{X(b)},mustExec:!0,type:Y.AnnotationEditorParamsType.FREETEXT_SIZE,overwriteIfSameType:!0,keepUndo:!0})},D=new WeakSet,m=function(o){const X=R(this,z);this.parent.addCommands({cmd:()=>{XI(this,z,o),this.editorDiv.style.color=o},undo:()=>{XI(this,z,X),this.editorDiv.style.color=X},mustExec:!0,type:Y.AnnotationEditorParamsType.FREETEXT_COLOR,overwriteIfSameType:!0,keepUndo:!0})},d=new WeakSet,C=function(){const o=this.editorDiv.getElementsByTagName("div");if(o.length===0)return this.editorDiv.innerText;const X=[];for(let b=0,N=o.length;b<N;b++){const F=o[b].firstChild;(F==null?void 0:F.nodeName)==="#text"?X.push(F.data):X.push("")}return X.join(`
`)},l=new WeakSet,B=function(){const[o,X]=this.parent.viewportBaseDimensions,b=this.div.getBoundingClientRect();this.width=b.width/o,this.height=b.height/X},QI(g,"_freeTextDefaultContent",""),QI(g,"_l10nPromise"),QI(g,"_internalPadding",0),QI(g,"_defaultColor",null),QI(g,"_defaultFontSize",10),QI(g,"_keyboardManager",new a.KeyboardManager([[["ctrl+Enter","mac+meta+Enter","Escape","mac+Escape"],I.prototype.commitOrRemove]])),QI(g,"_type","freetext"),c.FreeTextEditor=g},(wI,c,$)=>{var h,M,_,z,T,r,Z,p,j,D,m,d,C,l,B,Y,a,i,I,g,o,X,b,N,F,hI,YI,nI,gI,U,II,q,mI,NI,BI,J,e,w,x,E,P,iI,aI,eI,A,W,L,S,Q,lI,uI,MI,ZI,WI,tI,O,f,v,RI,pI;Object.defineProperty(c,"__esModule",{value:!0}),c.InkEditor=void 0,Object.defineProperty(c,"fitCurve",{enumerable:!0,get:function(){return TI.fitCurve}});var DI=$(1),FI=$(6),TI=$(25),vI=$(7);const fI=16,PI=class extends FI.AnnotationEditor{constructor(SI){super({...SI,name:"inkEditor"}),GI(this,B),GI(this,a),GI(this,I),GI(this,o),GI(this,b),GI(this,F),GI(this,YI),GI(this,gI),GI(this,II),GI(this,mI),GI(this,BI),GI(this,e),GI(this,x),GI(this,P),GI(this,aI),GI(this,L),GI(this,Q),GI(this,uI),GI(this,ZI),GI(this,tI),GI(this,f),GI(this,RI),GI(this,h,0),GI(this,M,0),GI(this,_,0),GI(this,z,this.canvasPointermove.bind(this)),GI(this,T,this.canvasPointerleave.bind(this)),GI(this,r,this.canvasPointerup.bind(this)),GI(this,Z,this.canvasPointerdown.bind(this)),GI(this,p,!1),GI(this,j,!1),GI(this,D,null),GI(this,m,null),GI(this,d,0),GI(this,C,0),GI(this,l,null),this.color=SI.color||null,this.thickness=SI.thickness||null,this.opacity=SI.opacity||null,this.paths=[],this.bezierPath2D=[],this.currentPath=[],this.scaleFactor=1,this.translationX=this.translationY=0,this.x=0,this.y=0}static initialize(SI){this._l10nPromise=new Map(["editor_ink_canvas_aria_label","editor_ink_aria_label"].map(JI=>[JI,SI.get(JI)]))}static updateDefaultParams(SI,JI){switch(SI){case DI.AnnotationEditorParamsType.INK_THICKNESS:PI._defaultThickness=JI;break;case DI.AnnotationEditorParamsType.INK_COLOR:PI._defaultColor=JI;break;case DI.AnnotationEditorParamsType.INK_OPACITY:PI._defaultOpacity=JI/100;break}}updateParams(SI,JI){switch(SI){case DI.AnnotationEditorParamsType.INK_THICKNESS:bI(this,B,Y).call(this,JI);break;case DI.AnnotationEditorParamsType.INK_COLOR:bI(this,a,i).call(this,JI);break;case DI.AnnotationEditorParamsType.INK_OPACITY:bI(this,I,g).call(this,JI);break}}static get defaultPropertiesToUpdate(){return[[DI.AnnotationEditorParamsType.INK_THICKNESS,PI._defaultThickness],[DI.AnnotationEditorParamsType.INK_COLOR,PI._defaultColor||FI.AnnotationEditor._defaultLineColor],[DI.AnnotationEditorParamsType.INK_OPACITY,Math.round(PI._defaultOpacity*100)]]}get propertiesToUpdate(){return[[DI.AnnotationEditorParamsType.INK_THICKNESS,this.thickness||PI._defaultThickness],[DI.AnnotationEditorParamsType.INK_COLOR,this.color||PI._defaultColor||FI.AnnotationEditor._defaultLineColor],[DI.AnnotationEditorParamsType.INK_OPACITY,Math.round(100*(this.opacity??PI._defaultOpacity))]]}rebuild(){super.rebuild(),this.div!==null&&(this.canvas||(bI(this,BI,J).call(this),bI(this,e,w).call(this)),this.isAttachedToDOM||(this.parent.add(this),bI(this,x,E).call(this)),bI(this,f,v).call(this))}remove(){this.canvas!==null&&(this.isEmpty()||this.commit(),this.canvas.width=this.canvas.height=0,this.canvas.remove(),this.canvas=null,R(this,m).disconnect(),XI(this,m,null),super.remove())}enableEditMode(){R(this,p)||this.canvas===null||(super.enableEditMode(),this.div.draggable=!1,this.canvas.addEventListener("pointerdown",R(this,Z)),this.canvas.addEventListener("pointerup",R(this,r)))}disableEditMode(){!this.isInEditMode()||this.canvas===null||(super.disableEditMode(),this.div.draggable=!this.isEmpty(),this.div.classList.remove("editing"),this.canvas.removeEventListener("pointerdown",R(this,Z)),this.canvas.removeEventListener("pointerup",R(this,r)))}onceAdded(){this.div.draggable=!this.isEmpty()}isEmpty(){return this.paths.length===0||this.paths.length===1&&this.paths[0].length===0}commit(){R(this,p)||(super.commit(),this.isEditing=!1,this.disableEditMode(),this.setInForeground(),XI(this,p,!0),this.div.classList.add("disabled"),bI(this,f,v).call(this,!0),this.parent.addInkEditorIfNeeded(!0),this.parent.moveEditorInDOM(this),this.div.focus())}focusin(SI){super.focusin(SI),this.enableEditMode()}canvasPointerdown(SI){SI.button!==0||!this.isInEditMode()||R(this,p)||(this.setInForeground(),SI.type!=="mouse"&&this.div.focus(),SI.stopPropagation(),this.canvas.addEventListener("pointerleave",R(this,T)),this.canvas.addEventListener("pointermove",R(this,z)),bI(this,F,hI).call(this,SI.offsetX,SI.offsetY))}canvasPointermove(SI){SI.stopPropagation(),bI(this,YI,nI).call(this,SI.offsetX,SI.offsetY)}canvasPointerup(SI){SI.button===0&&this.isInEditMode()&&this.currentPath.length!==0&&(SI.stopPropagation(),bI(this,mI,NI).call(this,SI),this.setInBackground())}canvasPointerleave(SI){bI(this,mI,NI).call(this,SI),this.setInBackground()}render(){if(this.div)return this.div;let SI,JI;this.width&&(SI=this.x,JI=this.y),super.render(),PI._l10nPromise.get("editor_ink_aria_label").then(AI=>{var KI;return(KI=this.div)==null?void 0:KI.setAttribute("aria-label",AI)});const[yI,HI,cI,CI]=bI(this,o,X).call(this);if(this.setAt(yI,HI,0,0),this.setDims(cI,CI),bI(this,BI,J).call(this),this.width){const[AI,KI]=this.parent.viewportBaseDimensions;this.setAt(SI*AI,JI*KI,this.width*AI,this.height*KI),XI(this,j,!0),bI(this,x,E).call(this),this.setDims(this.width*AI,this.height*KI),bI(this,II,q).call(this),bI(this,RI,pI).call(this),this.div.classList.add("disabled")}else this.div.classList.add("editing"),this.enableEditMode();return bI(this,e,w).call(this),this.div}setDimensions(SI,JI){const yI=Math.round(SI),HI=Math.round(JI);if(R(this,d)===yI&&R(this,C)===HI)return;XI(this,d,yI),XI(this,C,HI),this.canvas.style.visibility="hidden",R(this,h)&&Math.abs(R(this,h)-SI/JI)>.01&&(JI=Math.ceil(SI/R(this,h)),this.setDims(SI,JI));const[cI,CI]=this.parent.viewportBaseDimensions;this.width=SI/cI,this.height=JI/CI,R(this,p)&&bI(this,P,iI).call(this,SI,JI),bI(this,x,E).call(this),bI(this,II,q).call(this),this.canvas.style.visibility="visible"}static deserialize(SI,JI){var yI,HI;const cI=super.deserialize(SI,JI);cI.thickness=SI.thickness,cI.color=DI.Util.makeHexColor(...SI.color),cI.opacity=SI.opacity;const[CI,AI]=JI.pageDimensions,KI=cI.width*CI,LI=cI.height*AI,rI=JI.scaleFactor,kI=SI.thickness/2;XI(cI,h,KI/LI),XI(cI,p,!0),XI(cI,d,Math.round(KI)),XI(cI,C,Math.round(LI));for(const{bezier:_I}of SI.paths){const $I=[];cI.paths.push($I);let OI=rI*(_I[0]-kI),gg=rI*(LI-_I[1]-kI);for(let Ag=2,qI=_I.length;Ag<qI;Ag+=6){const lg=rI*(_I[Ag]-kI),ig=rI*(LI-_I[Ag+1]-kI),og=rI*(_I[Ag+2]-kI),Zg=rI*(LI-_I[Ag+3]-kI),sg=rI*(_I[Ag+4]-kI),Cg=rI*(LI-_I[Ag+5]-kI);$I.push([[OI,gg],[lg,ig],[og,Zg],[sg,Cg]]),OI=sg,gg=Cg}const Ig=bI(this,A,W).call(this,$I);cI.bezierPath2D.push(Ig)}const xI=bI(yI=cI,ZI,WI).call(yI);return XI(cI,_,Math.max(fI,xI[2]-xI[0])),XI(cI,M,Math.max(fI,xI[3]-xI[1])),bI(HI=cI,P,iI).call(HI,KI,LI),cI}serialize(){if(this.isEmpty())return null;const SI=this.getRect(0,0),JI=this.rotation%180===0?SI[3]-SI[1]:SI[2]-SI[0],yI=FI.AnnotationEditor._colorManager.convert(this.ctx.strokeStyle);return{annotationType:DI.AnnotationEditorType.INK,color:yI,thickness:this.thickness,opacity:this.opacity,paths:bI(this,L,S).call(this,this.scaleFactor/this.parent.scaleFactor,this.translationX,this.translationY,JI),pageIndex:this.parent.pageIndex,rect:SI,rotation:this.rotation}}};let EI=PI;h=new WeakMap,M=new WeakMap,_=new WeakMap,z=new WeakMap,T=new WeakMap,r=new WeakMap,Z=new WeakMap,p=new WeakMap,j=new WeakMap,D=new WeakMap,m=new WeakMap,d=new WeakMap,C=new WeakMap,l=new WeakMap,B=new WeakSet,Y=function(SI){const JI=this.thickness;this.parent.addCommands({cmd:()=>{this.thickness=SI,bI(this,f,v).call(this)},undo:()=>{this.thickness=JI,bI(this,f,v).call(this)},mustExec:!0,type:DI.AnnotationEditorParamsType.INK_THICKNESS,overwriteIfSameType:!0,keepUndo:!0})},a=new WeakSet,i=function(SI){const JI=this.color;this.parent.addCommands({cmd:()=>{this.color=SI,bI(this,II,q).call(this)},undo:()=>{this.color=JI,bI(this,II,q).call(this)},mustExec:!0,type:DI.AnnotationEditorParamsType.INK_COLOR,overwriteIfSameType:!0,keepUndo:!0})},I=new WeakSet,g=function(SI){SI/=100;const JI=this.opacity;this.parent.addCommands({cmd:()=>{this.opacity=SI,bI(this,II,q).call(this)},undo:()=>{this.opacity=JI,bI(this,II,q).call(this)},mustExec:!0,type:DI.AnnotationEditorParamsType.INK_OPACITY,overwriteIfSameType:!0,keepUndo:!0})},o=new WeakSet,X=function(){const{width:SI,height:JI,rotation:yI}=this.parent.viewport;switch(yI){case 90:return[0,SI,SI,JI];case 180:return[SI,JI,SI,JI];case 270:return[JI,0,SI,JI];default:return[0,0,SI,JI]}},b=new WeakSet,N=function(){this.ctx.lineWidth=this.thickness*this.parent.scaleFactor/this.scaleFactor,this.ctx.lineCap="round",this.ctx.lineJoin="round",this.ctx.miterLimit=10,this.ctx.strokeStyle=`${this.color}${(0,vI.opacityToHex)(this.opacity)}`},F=new WeakSet,hI=function(SI,JI){this.isEditing=!0,R(this,j)||(XI(this,j,!0),bI(this,x,E).call(this),this.thickness||(this.thickness=PI._defaultThickness),this.color||(this.color=PI._defaultColor||FI.AnnotationEditor._defaultLineColor),this.opacity??(this.opacity=PI._defaultOpacity)),this.currentPath.push([SI,JI]),XI(this,D,null),bI(this,b,N).call(this),this.ctx.beginPath(),this.ctx.moveTo(SI,JI),XI(this,l,()=>{R(this,l)&&(R(this,D)&&(this.isEmpty()?(this.ctx.setTransform(1,0,0,1,0,0),this.ctx.clearRect(0,0,this.canvas.width,this.canvas.height)):bI(this,II,q).call(this),this.ctx.lineTo(...R(this,D)),XI(this,D,null),this.ctx.stroke()),window.requestAnimationFrame(R(this,l)))}),window.requestAnimationFrame(R(this,l))},YI=new WeakSet,nI=function(SI,JI){const[yI,HI]=this.currentPath.at(-1);SI===yI&&JI===HI||(this.currentPath.push([SI,JI]),XI(this,D,[SI,JI]))},gI=new WeakSet,U=function(SI,JI){var yI;this.ctx.closePath(),XI(this,l,null),SI=Math.min(Math.max(SI,0),this.canvas.width),JI=Math.min(Math.max(JI,0),this.canvas.height);const[HI,cI]=this.currentPath.at(-1);(SI!==HI||JI!==cI)&&this.currentPath.push([SI,JI]);let CI;if(this.currentPath.length!==1)CI=(0,TI.fitCurve)(this.currentPath,30,null);else{const rI=[SI,JI];CI=[[rI,rI.slice(),rI.slice(),rI]]}const AI=bI(yI=PI,A,W).call(yI,CI);this.currentPath.length=0;const KI=()=>{this.paths.push(CI),this.bezierPath2D.push(AI),this.rebuild()},LI=()=>{this.paths.pop(),this.bezierPath2D.pop(),this.paths.length===0?this.remove():(this.canvas||(bI(this,BI,J).call(this),bI(this,e,w).call(this)),bI(this,f,v).call(this))};this.parent.addCommands({cmd:KI,undo:LI,mustExec:!0})},II=new WeakSet,q=function(){if(this.isEmpty()){bI(this,aI,eI).call(this);return}bI(this,b,N).call(this);const{canvas:SI,ctx:JI}=this;JI.setTransform(1,0,0,1,0,0),JI.clearRect(0,0,SI.width,SI.height),bI(this,aI,eI).call(this);for(const yI of this.bezierPath2D)JI.stroke(yI)},mI=new WeakSet,NI=function(SI){bI(this,gI,U).call(this,SI.offsetX,SI.offsetY),this.canvas.removeEventListener("pointerleave",R(this,T)),this.canvas.removeEventListener("pointermove",R(this,z)),this.parent.addToAnnotationStorage(this)},BI=new WeakSet,J=function(){this.canvas=document.createElement("canvas"),this.canvas.width=this.canvas.height=0,this.canvas.className="inkEditorCanvas",PI._l10nPromise.get("editor_ink_canvas_aria_label").then(SI=>{var JI;return(JI=this.canvas)==null?void 0:JI.setAttribute("aria-label",SI)}),this.div.append(this.canvas),this.ctx=this.canvas.getContext("2d")},e=new WeakSet,w=function(){XI(this,m,new ResizeObserver(SI=>{const JI=SI[0].contentRect;JI.width&&JI.height&&this.setDimensions(JI.width,JI.height)})),R(this,m).observe(this.div)},x=new WeakSet,E=function(){if(!R(this,j))return;const[SI,JI]=this.parent.viewportBaseDimensions;this.canvas.width=Math.ceil(this.width*SI),this.canvas.height=Math.ceil(this.height*JI),bI(this,aI,eI).call(this)},P=new WeakSet,iI=function(SI,JI){const yI=bI(this,tI,O).call(this),HI=(SI-yI)/R(this,_),cI=(JI-yI)/R(this,M);this.scaleFactor=Math.min(HI,cI)},aI=new WeakSet,eI=function(){const SI=bI(this,tI,O).call(this)/2;this.ctx.setTransform(this.scaleFactor,0,0,this.scaleFactor,this.translationX*this.scaleFactor+SI,this.translationY*this.scaleFactor+SI)},A=new WeakSet,W=function(SI){const JI=new Path2D;for(let yI=0,HI=SI.length;yI<HI;yI++){const[cI,CI,AI,KI]=SI[yI];yI===0&&JI.moveTo(...cI),JI.bezierCurveTo(CI[0],CI[1],AI[0],AI[1],KI[0],KI[1])}return JI},L=new WeakSet,S=function(SI,JI,yI,HI){const cI=[],CI=this.thickness/2;let AI,KI;for(const LI of this.paths){AI=[],KI=[];for(let rI=0,kI=LI.length;rI<kI;rI++){const[xI,_I,$I,OI]=LI[rI],gg=SI*(xI[0]+JI)+CI,Ig=HI-SI*(xI[1]+yI)-CI,Ag=SI*(_I[0]+JI)+CI,qI=HI-SI*(_I[1]+yI)-CI,lg=SI*($I[0]+JI)+CI,ig=HI-SI*($I[1]+yI)-CI,og=SI*(OI[0]+JI)+CI,Zg=HI-SI*(OI[1]+yI)-CI;rI===0&&(AI.push(gg,Ig),KI.push(gg,Ig)),AI.push(Ag,qI,lg,ig,og,Zg),bI(this,Q,lI).call(this,gg,Ig,Ag,qI,lg,ig,og,Zg,4,KI)}cI.push({bezier:AI,points:KI})}return cI},Q=new WeakSet,lI=function(SI,JI,yI,HI,cI,CI,AI,KI,LI,rI){if(bI(this,uI,MI).call(this,SI,JI,yI,HI,cI,CI,AI,KI)){rI.push(AI,KI);return}for(let kI=1;kI<LI-1;kI++){const xI=kI/LI,_I=1-xI;let $I=xI*SI+_I*yI,OI=xI*JI+_I*HI,gg=xI*yI+_I*cI,Ig=xI*HI+_I*CI;const Ag=xI*cI+_I*AI,qI=xI*CI+_I*KI;$I=xI*$I+_I*gg,OI=xI*OI+_I*Ig,gg=xI*gg+_I*Ag,Ig=xI*Ig+_I*qI,$I=xI*$I+_I*gg,OI=xI*OI+_I*Ig,rI.push($I,OI)}rI.push(AI,KI)},uI=new WeakSet,MI=function(SI,JI,yI,HI,cI,CI,AI,KI){const LI=(3*yI-2*SI-AI)**2,rI=(3*HI-2*JI-KI)**2,kI=(3*cI-SI-2*AI)**2,xI=(3*CI-JI-2*KI)**2;return Math.max(LI,kI)+Math.max(rI,xI)<=10},ZI=new WeakSet,WI=function(){let SI=1/0,JI=-1/0,yI=1/0,HI=-1/0;for(const cI of this.paths)for(const[CI,AI,KI,LI]of cI){const rI=DI.Util.bezierBoundingBox(...CI,...AI,...KI,...LI);SI=Math.min(SI,rI[0]),yI=Math.min(yI,rI[1]),JI=Math.max(JI,rI[2]),HI=Math.max(HI,rI[3])}return[SI,yI,JI,HI]},tI=new WeakSet,O=function(){return R(this,p)?Math.ceil(this.thickness*this.parent.scaleFactor):0},f=new WeakSet,v=function(SI=!1){if(this.isEmpty())return;if(!R(this,p)){bI(this,II,q).call(this);return}const JI=bI(this,ZI,WI).call(this),yI=bI(this,tI,O).call(this);XI(this,_,Math.max(fI,JI[2]-JI[0])),XI(this,M,Math.max(fI,JI[3]-JI[1]));const HI=Math.ceil(yI+R(this,_)*this.scaleFactor),cI=Math.ceil(yI+R(this,M)*this.scaleFactor),[CI,AI]=this.parent.viewportBaseDimensions;this.width=HI/CI,this.height=cI/AI,XI(this,h,HI/cI),bI(this,RI,pI).call(this);const KI=this.translationX,LI=this.translationY;this.translationX=-JI[0],this.translationY=-JI[1],bI(this,x,E).call(this),bI(this,II,q).call(this),XI(this,d,HI),XI(this,C,cI),this.setDims(HI,cI);const rI=SI?yI/this.scaleFactor/2:0;this.translate(KI-this.translationX-rI,LI-this.translationY-rI)},RI=new WeakSet,pI=function(){const{style:SI}=this.div;R(this,h)>=1?(SI.minHeight=`${fI}px`,SI.minWidth=`${Math.round(R(this,h)*fI)}px`):(SI.minWidth=`${fI}px`,SI.minHeight=`${Math.round(fI/R(this,h))}px`)},GI(EI,A),QI(EI,"_defaultColor",null),QI(EI,"_defaultOpacity",1),QI(EI,"_defaultThickness",1),QI(EI,"_l10nPromise"),QI(EI,"_type","ink"),c.InkEditor=EI},(wI,c,$)=>{Object.defineProperty(c,"__esModule",{value:!0}),c.fitCurve=void 0;const h=$(26);c.fitCurve=h},wI=>{function c(d,C,l){if(!Array.isArray(d))throw new TypeError("First argument should be an array");if(d.forEach(i=>{if(!Array.isArray(i)||i.some(I=>typeof I!="number")||i.length!==d[0].length)throw Error("Each point should be an array of numbers. Each point should have the same amount of numbers.")}),d=d.filter((i,I)=>I===0||!i.every((g,o)=>g===d[I-1][o])),d.length<2)return[];const B=d.length,Y=j(d[1],d[0]),a=j(d[B-2],d[B-1]);return $(d,Y,a,C,l)}function $(d,C,l,B,Y){var a,i,I,g,o,X,b,N,F,hI,YI,nI,gI;if(d.length===2)return nI=D.vectorLen(D.subtract(d[0],d[1]))/3,a=[d[0],D.addArrays(d[0],D.mulItems(C,nI)),D.addArrays(d[1],D.mulItems(l,nI)),d[1]],[a];if(i=T(d),[a,g,X]=h(d,i,i,C,l,Y),g===0||g<B)return[a];if(g<B*B)for(I=i,o=g,b=X,gI=0;gI<20;gI++){if(I=_(a,d,I),[a,g,X]=h(d,i,I,C,l,Y),g<B)return[a];if(X===b){let U=g/o;if(U>.9999&&U<1.0001)break}o=g,b=X}return YI=[],N=D.subtract(d[X-1],d[X+1]),N.every(U=>U===0)&&(N=D.subtract(d[X-1],d[X]),[N[0],N[1]]=[-N[1],N[0]]),F=D.normalize(N),hI=D.mulItems(F,-1),YI=YI.concat($(d.slice(0,X+1),C,F,B,Y)),YI=YI.concat($(d.slice(X),hI,l,B,Y)),YI}function h(d,C,l,B,Y,a){var i,I,g;return i=M(d,l,B,Y),[I,g]=r(d,i,C),a&&a({bez:i,points:d,params:C,maxErr:I,maxPoint:g}),[i,I,g]}function M(d,C,l,B){var Y,a,i,I,g,o,X,b,N,F,hI,YI,nI,gI,U,II,q,mI=d[0],NI=d[d.length-1];for(Y=[mI,null,null,NI],a=D.zeros_Xx2x2(C.length),nI=0,gI=C.length;nI<gI;nI++)II=C[nI],q=1-II,i=a[nI],i[0]=D.mulItems(l,3*II*(q*q)),i[1]=D.mulItems(B,3*q*(II*II));for(I=[[0,0],[0,0]],g=[0,0],nI=0,gI=d.length;nI<gI;nI++)II=C[nI],i=a[nI],I[0][0]+=D.dot(i[0],i[0]),I[0][1]+=D.dot(i[0],i[1]),I[1][0]+=D.dot(i[0],i[1]),I[1][1]+=D.dot(i[1],i[1]),U=D.subtract(d[nI],m.q([mI,mI,NI,NI],II)),g[0]+=D.dot(i[0],U),g[1]+=D.dot(i[1],U);return o=I[0][0]*I[1][1]-I[1][0]*I[0][1],X=I[0][0]*g[1]-I[1][0]*g[0],b=g[0]*I[1][1]-g[1]*I[0][1],N=o===0?0:b/o,F=o===0?0:X/o,YI=D.vectorLen(D.subtract(mI,NI)),hI=1e-6*YI,N<hI||F<hI?(Y[1]=D.addArrays(mI,D.mulItems(l,YI/3)),Y[2]=D.addArrays(NI,D.mulItems(B,YI/3))):(Y[1]=D.addArrays(mI,D.mulItems(l,N)),Y[2]=D.addArrays(NI,D.mulItems(B,F))),Y}function _(d,C,l){return l.map((B,Y)=>z(d,C[Y],B))}function z(d,C,l){var B=D.subtract(m.q(d,l),C),Y=m.qprime(d,l),a=D.mulMatrix(B,Y),i=D.sum(D.squareItems(Y))+2*D.mulMatrix(B,m.qprimeprime(d,l));return i===0?l:l-a/i}function T(d){var C=[],l,B,Y;return d.forEach((a,i)=>{l=i?B+D.vectorLen(D.subtract(a,Y)):0,C.push(l),B=l,Y=a}),C=C.map(a=>a/B),C}function r(d,C,l){var B,Y,a,i,I,g,o,X;Y=0,a=Math.floor(d.length/2);const b=Z(C,10);for(I=0,g=d.length;I<g;I++)o=d[I],X=p(C,l[I],b,10),i=D.subtract(m.q(C,X),o),B=i[0]*i[0]+i[1]*i[1],B>Y&&(Y=B,a=I);return[Y,a]}var Z=function(d,C){for(var l,B=[0],Y=d[0],a=0,i=1;i<=C;i++)l=m.q(d,i/C),a+=D.vectorLen(D.subtract(l,Y)),B.push(a),Y=l;return B=B.map(I=>I/a),B};function p(d,C,l,B){if(C<0)return 0;if(C>1)return 1;for(var Y,a,i,I,g,o=1;o<=B;o++)if(C<=l[o]){I=(o-1)/B,i=o/B,a=l[o-1],Y=l[o],g=(C-a)/(Y-a)*(i-I)+I;break}return g}function j(d,C){return D.normalize(D.subtract(d,C))}class D{static zeros_Xx2x2(C){for(var l=[];C--;)l.push([0,0]);return l}static mulItems(C,l){return C.map(B=>B*l)}static mulMatrix(C,l){return C.reduce((B,Y,a)=>B+Y*l[a],0)}static subtract(C,l){return C.map((B,Y)=>B-l[Y])}static addArrays(C,l){return C.map((B,Y)=>B+l[Y])}static addItems(C,l){return C.map(B=>B+l)}static sum(C){return C.reduce((l,B)=>l+B)}static dot(C,l){return D.mulMatrix(C,l)}static vectorLen(C){return Math.hypot(...C)}static divItems(C,l){return C.map(B=>B/l)}static squareItems(C){return C.map(l=>l*l)}static normalize(C){return this.divItems(C,this.vectorLen(C))}}class m{static q(C,l){var B=1-l,Y=D.mulItems(C[0],B*B*B),a=D.mulItems(C[1],3*B*B*l),i=D.mulItems(C[2],3*B*l*l),I=D.mulItems(C[3],l*l*l);return D.addArrays(D.addArrays(Y,a),D.addArrays(i,I))}static qprime(C,l){var B=1-l,Y=D.mulItems(D.subtract(C[1],C[0]),3*B*B),a=D.mulItems(D.subtract(C[2],C[1]),6*B*l),i=D.mulItems(D.subtract(C[3],C[2]),3*l*l);return D.addArrays(D.addArrays(Y,a),i)}static qprimeprime(C,l){return D.addArrays(D.mulItems(D.addArrays(D.subtract(C[2],D.mulItems(C[1],2)),C[0]),6*(1-l)),D.mulItems(D.addArrays(D.subtract(C[3],D.mulItems(C[2],2)),C[1]),6*l))}}wI.exports=c,wI.exports.fitCubic=$,wI.exports.createTangent=j},(wI,c,$)=>{var h,M,_,z,T,r;Object.defineProperty(c,"__esModule",{value:!0}),c.AnnotationLayer=void 0;var Z=$(1),p=$(8),j=$(5),D=$(28),m=$(29);const d=1e3,C=9,l=new WeakSet;function B(eI){return{width:eI[2]-eI[0],height:eI[3]-eI[1]}}class Y{static create(A){switch(A.data.annotationType){case Z.AnnotationType.LINK:return new i(A);case Z.AnnotationType.TEXT:return new I(A);case Z.AnnotationType.WIDGET:switch(A.data.fieldType){case"Tx":return new o(A);case"Btn":return A.data.radioButton?new b(A):A.data.checkBox?new X(A):new N(A);case"Ch":return new F(A)}return new g(A);case Z.AnnotationType.POPUP:return new hI(A);case Z.AnnotationType.FREETEXT:return new nI(A);case Z.AnnotationType.LINE:return new gI(A);case Z.AnnotationType.SQUARE:return new U(A);case Z.AnnotationType.CIRCLE:return new II(A);case Z.AnnotationType.POLYLINE:return new q(A);case Z.AnnotationType.CARET:return new NI(A);case Z.AnnotationType.INK:return new BI(A);case Z.AnnotationType.POLYGON:return new mI(A);case Z.AnnotationType.HIGHLIGHT:return new J(A);case Z.AnnotationType.UNDERLINE:return new e(A);case Z.AnnotationType.SQUIGGLY:return new w(A);case Z.AnnotationType.STRIKEOUT:return new x(A);case Z.AnnotationType.STAMP:return new E(A);case Z.AnnotationType.FILEATTACHMENT:return new P(A);default:return new a(A)}}}class a{constructor(A,{isRenderable:W=!1,ignoreBorder:L=!1,createQuadrilaterals:S=!1}={}){this.isRenderable=W,this.data=A.data,this.layer=A.layer,this.page=A.page,this.viewport=A.viewport,this.linkService=A.linkService,this.downloadManager=A.downloadManager,this.imageResourcesPath=A.imageResourcesPath,this.renderForms=A.renderForms,this.svgFactory=A.svgFactory,this.annotationStorage=A.annotationStorage,this.enableScripting=A.enableScripting,this.hasJSActions=A.hasJSActions,this._fieldObjects=A.fieldObjects,this._mouseState=A.mouseState,W&&(this.container=this._createContainer(L)),S&&(this.quadrilaterals=this._createQuadrilaterals(L))}_createContainer(A=!1){const W=this.data,L=this.page,S=this.viewport,Q=document.createElement("section"),{width:lI,height:uI}=B(W.rect),[MI,ZI,WI,tI]=S.viewBox,O=WI-MI,f=tI-ZI;Q.setAttribute("data-annotation-id",W.id);const v=Z.Util.normalizeRect([W.rect[0],L.view[3]-W.rect[1]+L.view[1],W.rect[2],L.view[3]-W.rect[3]+L.view[1]]);if(!A&&W.borderStyle.width>0){Q.style.borderWidth=`${W.borderStyle.width}px`;const pI=W.borderStyle.horizontalCornerRadius,DI=W.borderStyle.verticalCornerRadius;if(pI>0||DI>0){const TI=`calc(${pI}px * var(--scale-factor)) / calc(${DI}px * var(--scale-factor))`;Q.style.borderRadius=TI}else if(this instanceof b){const TI=`calc(${lI}px * var(--scale-factor)) / calc(${uI}px * var(--scale-factor))`;Q.style.borderRadius=TI}switch(W.borderStyle.style){case Z.AnnotationBorderStyleType.SOLID:Q.style.borderStyle="solid";break;case Z.AnnotationBorderStyleType.DASHED:Q.style.borderStyle="dashed";break;case Z.AnnotationBorderStyleType.BEVELED:(0,Z.warn)("Unimplemented border style: beveled");break;case Z.AnnotationBorderStyleType.INSET:(0,Z.warn)("Unimplemented border style: inset");break;case Z.AnnotationBorderStyleType.UNDERLINE:Q.style.borderBottomStyle="solid";break}const FI=W.borderColor||null;FI?Q.style.borderColor=Z.Util.makeHexColor(FI[0]|0,FI[1]|0,FI[2]|0):Q.style.borderWidth=0}Q.style.left=`${100*(v[0]-MI)/O}%`,Q.style.top=`${100*(v[1]-ZI)/f}%`;const{rotation:RI}=W;return W.hasOwnCanvas||RI===0?(Q.style.width=`${100*lI/O}%`,Q.style.height=`${100*uI/f}%`):this.setRotation(RI,Q),Q}setRotation(A,W=this.container){const[L,S,Q,lI]=this.viewport.viewBox,uI=Q-L,MI=lI-S,{width:ZI,height:WI}=B(this.data.rect);let tI,O;A%180===0?(tI=100*ZI/uI,O=100*WI/MI):(tI=100*WI/uI,O=100*ZI/MI),W.style.width=`${tI}%`,W.style.height=`${O}%`,W.setAttribute("data-main-rotation",(360-A)%360)}get _commonActions(){const A=(W,L,S)=>{const Q=S.detail[W];S.target.style[L]=D.ColorConverters[`${Q[0]}_HTML`](Q.slice(1))};return(0,Z.shadow)(this,"_commonActions",{display:W=>{const L=W.detail.display%2===1;this.container.style.visibility=L?"hidden":"visible",this.annotationStorage.setValue(this.data.id,{hidden:L,print:W.detail.display===0||W.detail.display===3})},print:W=>{this.annotationStorage.setValue(this.data.id,{print:W.detail.print})},hidden:W=>{this.container.style.visibility=W.detail.hidden?"hidden":"visible",this.annotationStorage.setValue(this.data.id,{hidden:W.detail.hidden})},focus:W=>{setTimeout(()=>W.target.focus({preventScroll:!1}),0)},userName:W=>{W.target.title=W.detail.userName},readonly:W=>{W.detail.readonly?W.target.setAttribute("readonly",""):W.target.removeAttribute("readonly")},required:W=>{this._setRequired(W.target,W.detail.required)},bgColor:W=>{A("bgColor","backgroundColor",W)},fillColor:W=>{A("fillColor","backgroundColor",W)},fgColor:W=>{A("fgColor","color",W)},textColor:W=>{A("textColor","color",W)},borderColor:W=>{A("borderColor","borderColor",W)},strokeColor:W=>{A("strokeColor","borderColor",W)},rotation:W=>{const L=W.detail.rotation;this.setRotation(L),this.annotationStorage.setValue(this.data.id,{rotation:L})}})}_dispatchEventFromSandbox(A,W){const L=this._commonActions;for(const S of Object.keys(W.detail)){const Q=A[S]||L[S];Q&&Q(W)}}_setDefaultPropertiesFromJS(A){if(!this.enableScripting)return;const W=this.annotationStorage.getRawValue(this.data.id);if(!W)return;const L=this._commonActions;for(const[S,Q]of Object.entries(W)){const lI=L[S];if(lI){const uI={detail:{[S]:Q},target:A};lI(uI),delete W[S]}}}_createQuadrilaterals(A=!1){if(!this.data.quadPoints)return null;const W=[],L=this.data.rect;for(const S of this.data.quadPoints)this.data.rect=[S[2].x,S[2].y,S[1].x,S[1].y],W.push(this._createContainer(A));return this.data.rect=L,W}_createPopup(A,W){let L=this.container;this.quadrilaterals&&(A=A||this.quadrilaterals,L=this.quadrilaterals[0]),A||(A=document.createElement("div"),A.className="popupTriggerArea",L.append(A));const S=new YI({container:L,trigger:A,color:W.color,titleObj:W.titleObj,modificationDate:W.modificationDate,contentsObj:W.contentsObj,richText:W.richText,hideWrapper:!0}).render();S.style.left="100%",L.append(S)}_renderQuadrilaterals(A){for(const W of this.quadrilaterals)W.className=A;return this.quadrilaterals}render(){(0,Z.unreachable)("Abstract method `AnnotationElement.render` called")}_getElementsByName(A,W=null){const L=[];if(this._fieldObjects){const S=this._fieldObjects[A];if(S)for(const{page:Q,id:lI,exportValues:uI}of S){if(Q===-1||lI===W)continue;const MI=typeof uI=="string"?uI:null,ZI=document.querySelector(`[data-element-id="${lI}"]`);if(ZI&&!l.has(ZI)){(0,Z.warn)(`_getElementsByName - element not allowed: ${lI}`);continue}L.push({id:lI,exportValue:MI,domElement:ZI})}return L}for(const S of document.getElementsByName(A)){const{id:Q,exportValue:lI}=S;Q!==W&&l.has(S)&&L.push({id:Q,exportValue:lI,domElement:S})}return L}static get platform(){const A=typeof navigator<"u"?navigator.platform:"";return(0,Z.shadow)(this,"platform",{isWin:A.includes("Win"),isMac:A.includes("Mac")})}}class i extends a{constructor(A,W=null){super(A,{isRenderable:!0,ignoreBorder:!!(W!=null&&W.ignoreBorder),createQuadrilaterals:!0}),this.isTooltipOnly=A.data.isTooltipOnly}render(){const{data:A,linkService:W}=this,L=document.createElement("a");L.setAttribute("data-element-id",A.id);let S=!1;return A.url?(W.addLinkAttributes(L,A.url,A.newWindow),S=!0):A.action?(this._bindNamedAction(L,A.action),S=!0):A.dest?(this._bindLink(L,A.dest),S=!0):(A.actions&&(A.actions.Action||A.actions["Mouse Up"]||A.actions["Mouse Down"])&&this.enableScripting&&this.hasJSActions&&(this._bindJSAction(L,A),S=!0),A.resetForm?(this._bindResetFormAction(L,A.resetForm),S=!0):this.isTooltipOnly&&!S&&(this._bindLink(L,""),S=!0)),this.quadrilaterals?this._renderQuadrilaterals("linkAnnotation").map((Q,lI)=>{const uI=lI===0?L:L.cloneNode();return Q.append(uI),Q}):(this.container.className="linkAnnotation",S&&this.container.append(L),this.container)}_bindLink(A,W){A.href=this.linkService.getDestinationHash(W),A.onclick=()=>(W&&this.linkService.goToDestination(W),!1),(W||W==="")&&(A.className="internalLink")}_bindNamedAction(A,W){A.href=this.linkService.getAnchorUrl(""),A.onclick=()=>(this.linkService.executeNamedAction(W),!1),A.className="internalLink"}_bindJSAction(A,W){A.href=this.linkService.getAnchorUrl("");const L=new Map([["Action","onclick"],["Mouse Up","onmouseup"],["Mouse Down","onmousedown"]]);for(const S of Object.keys(W.actions)){const Q=L.get(S);Q&&(A[Q]=()=>{var lI;return(lI=this.linkService.eventBus)==null||lI.dispatch("dispatcheventinsandbox",{source:this,detail:{id:W.id,name:S}}),!1})}A.onclick||(A.onclick=()=>!1),A.className="internalLink"}_bindResetFormAction(A,W){const L=A.onclick;if(L||(A.href=this.linkService.getAnchorUrl("")),A.className="internalLink",!this._fieldObjects){(0,Z.warn)('_bindResetFormAction - "resetForm" action not supported, ensure that the `fieldObjects` parameter is provided.'),L||(A.onclick=()=>!1);return}A.onclick=()=>{var S;L&&L();const{fields:Q,refs:lI,include:uI}=W,MI=[];if(Q.length!==0||lI.length!==0){const tI=new Set(lI);for(const O of Q){const f=this._fieldObjects[O]||[];for(const{id:v}of f)tI.add(v)}for(const O of Object.values(this._fieldObjects))for(const f of O)tI.has(f.id)===uI&&MI.push(f)}else for(const tI of Object.values(this._fieldObjects))MI.push(...tI);const ZI=this.annotationStorage,WI=[];for(const tI of MI){const{id:O}=tI;switch(WI.push(O),tI.type){case"text":{const v=tI.defaultValue||"";ZI.setValue(O,{value:v});break}case"checkbox":case"radiobutton":{const v=tI.defaultValue===tI.exportValues;ZI.setValue(O,{value:v});break}case"combobox":case"listbox":{const v=tI.defaultValue||"";ZI.setValue(O,{value:v});break}default:continue}const f=document.querySelector(`[data-element-id="${O}"]`);if(f){if(!l.has(f)){(0,Z.warn)(`_bindResetFormAction - element not allowed: ${O}`);continue}}else continue;f.dispatchEvent(new Event("resetform"))}return this.enableScripting&&((S=this.linkService.eventBus)==null||S.dispatch("dispatcheventinsandbox",{source:this,detail:{id:"app",ids:WI,name:"ResetForm"}})),!1}}}class I extends a{constructor(A){var W,L,S;const Q=!!(A.data.hasPopup||(W=A.data.titleObj)!=null&&W.str||(L=A.data.contentsObj)!=null&&L.str||(S=A.data.richText)!=null&&S.str);super(A,{isRenderable:Q})}render(){this.container.className="textAnnotation";const A=document.createElement("img");return A.src=this.imageResourcesPath+"annotation-"+this.data.name.toLowerCase()+".svg",A.alt="[{{type}} Annotation]",A.dataset.l10nId="text_annotation_type",A.dataset.l10nArgs=JSON.stringify({type:this.data.name}),this.data.hasPopup||this._createPopup(A,this.data),this.container.append(A),this.container}}class g extends a{render(){return this.data.alternativeText&&(this.container.title=this.data.alternativeText),this.container}_getKeyModifier(A){const{isWin:W,isMac:L}=a.platform;return W&&A.ctrlKey||L&&A.metaKey}_setEventListener(A,W,L,S){W.includes("mouse")?A.addEventListener(W,Q=>{var lI;(lI=this.linkService.eventBus)==null||lI.dispatch("dispatcheventinsandbox",{source:this,detail:{id:this.data.id,name:L,value:S(Q),shift:Q.shiftKey,modifier:this._getKeyModifier(Q)}})}):A.addEventListener(W,Q=>{var lI;(lI=this.linkService.eventBus)==null||lI.dispatch("dispatcheventinsandbox",{source:this,detail:{id:this.data.id,name:L,value:S(Q)}})})}_setEventListeners(A,W,L){var S;for(const[Q,lI]of W)(lI==="Action"||(S=this.data.actions)!=null&&S[lI])&&this._setEventListener(A,Q,lI,L)}_setBackgroundColor(A){const W=this.data.backgroundColor||null;A.style.backgroundColor=W===null?"transparent":Z.Util.makeHexColor(W[0],W[1],W[2])}_setTextStyle(A){const W=["left","center","right"],{fontColor:L}=this.data.defaultAppearanceData,S=this.data.defaultAppearanceData.fontSize||C,Q=A.style;let lI;if(this.data.multiLine){const uI=Math.abs(this.data.rect[3]-this.data.rect[1]),MI=Math.round(uI/(Z.LINE_FACTOR*S))||1,ZI=uI/MI;lI=Math.min(S,Math.round(ZI/Z.LINE_FACTOR))}else{const uI=Math.abs(this.data.rect[3]-this.data.rect[1]);lI=Math.min(S,Math.round(uI/Z.LINE_FACTOR))}Q.fontSize=`calc(${lI}px * var(--scale-factor))`,Q.color=Z.Util.makeHexColor(L[0],L[1],L[2]),this.data.textAlignment!==null&&(Q.textAlign=W[this.data.textAlignment])}_setRequired(A,W){W?A.setAttribute("required",!0):A.removeAttribute("required"),A.setAttribute("aria-required",W)}}class o extends g{constructor(A){const W=A.renderForms||!A.data.hasAppearance&&!!A.data.fieldValue;super(A,{isRenderable:W})}setPropertyOnSiblings(A,W,L,S){const Q=this.annotationStorage;for(const lI of this._getElementsByName(A.name,A.id))lI.domElement&&(lI.domElement[W]=L),Q.setValue(lI.id,{[S]:L})}render(){var A;const W=this.annotationStorage,L=this.data.id;this.container.className="textWidgetAnnotation";let S=null;if(this.renderForms){const Q=W.getValue(L,{value:this.data.fieldValue});let lI=Q.formattedValue||Q.value||"";const uI=W.getValue(L,{charLimit:this.data.maxLen}).charLimit;uI&&lI.length>uI&&(lI=lI.slice(0,uI));const MI={userValue:lI,formattedValue:null,valueOnFocus:""};this.data.multiLine?(S=document.createElement("textarea"),S.textContent=lI,this.data.doNotScroll&&(S.style.overflowY="hidden")):(S=document.createElement("input"),S.type="text",S.setAttribute("value",lI),this.data.doNotScroll&&(S.style.overflowX="hidden")),l.add(S),S.setAttribute("data-element-id",L),S.disabled=this.data.readOnly,S.name=this.data.fieldName,S.tabIndex=d,this._setRequired(S,this.data.required),uI&&(S.maxLength=uI),S.addEventListener("input",WI=>{W.setValue(L,{value:WI.target.value}),this.setPropertyOnSiblings(S,"value",WI.target.value,"value")}),S.addEventListener("resetform",WI=>{const tI=this.data.defaultFieldValue??"";S.value=MI.userValue=tI,MI.formattedValue=null});let ZI=WI=>{const{formattedValue:tI}=MI;tI!=null&&(WI.target.value=tI),WI.target.scrollLeft=0};if(this.enableScripting&&this.hasJSActions){S.addEventListener("focus",tI=>{MI.userValue&&(tI.target.value=MI.userValue),MI.valueOnFocus=tI.target.value}),S.addEventListener("updatefromsandbox",tI=>{const O={value(f){MI.userValue=f.detail.value??"",W.setValue(L,{value:MI.userValue.toString()}),f.target.value=MI.userValue},formattedValue(f){const{formattedValue:v}=f.detail;MI.formattedValue=v,v!=null&&f.target!==document.activeElement&&(f.target.value=v),W.setValue(L,{formattedValue:v})},selRange(f){f.target.setSelectionRange(...f.detail.selRange)},charLimit:f=>{var v;const{charLimit:RI}=f.detail,{target:pI}=f;if(RI===0){pI.removeAttribute("maxLength");return}pI.setAttribute("maxLength",RI);let DI=MI.userValue;!DI||DI.length<=RI||(DI=DI.slice(0,RI),pI.value=MI.userValue=DI,W.setValue(L,{value:DI}),(v=this.linkService.eventBus)==null||v.dispatch("dispatcheventinsandbox",{source:this,detail:{id:L,name:"Keystroke",value:DI,willCommit:!0,commitKey:1,selStart:pI.selectionStart,selEnd:pI.selectionEnd}}))}};this._dispatchEventFromSandbox(O,tI)}),S.addEventListener("keydown",tI=>{var O;let f=-1;if(tI.key==="Escape"?f=0:tI.key==="Enter"?f=2:tI.key==="Tab"&&(f=3),f===-1)return;const{value:v}=tI.target;MI.valueOnFocus!==v&&(MI.userValue=v,(O=this.linkService.eventBus)==null||O.dispatch("dispatcheventinsandbox",{source:this,detail:{id:L,name:"Keystroke",value:v,willCommit:!0,commitKey:f,selStart:tI.target.selectionStart,selEnd:tI.target.selectionEnd}}))});const WI=ZI;ZI=null,S.addEventListener("blur",tI=>{var O;const{value:f}=tI.target;MI.userValue=f,this._mouseState.isDown&&MI.valueOnFocus!==f&&((O=this.linkService.eventBus)==null||O.dispatch("dispatcheventinsandbox",{source:this,detail:{id:L,name:"Keystroke",value:f,willCommit:!0,commitKey:1,selStart:tI.target.selectionStart,selEnd:tI.target.selectionEnd}})),WI(tI)}),(A=this.data.actions)!=null&&A.Keystroke&&S.addEventListener("beforeinput",tI=>{var O;const{data:f,target:v}=tI,{value:RI,selectionStart:pI,selectionEnd:DI}=v;let FI=pI,TI=DI;switch(tI.inputType){case"deleteWordBackward":{const vI=RI.substring(0,pI).match(/\w*[^\w]*$/);vI&&(FI-=vI[0].length);break}case"deleteWordForward":{const vI=RI.substring(pI).match(/^[^\w]*\w*/);vI&&(TI+=vI[0].length);break}case"deleteContentBackward":pI===DI&&(FI-=1);break;case"deleteContentForward":pI===DI&&(TI+=1);break}tI.preventDefault(),(O=this.linkService.eventBus)==null||O.dispatch("dispatcheventinsandbox",{source:this,detail:{id:L,name:"Keystroke",value:RI,change:f||"",willCommit:!1,selStart:FI,selEnd:TI}})}),this._setEventListeners(S,[["focus","Focus"],["blur","Blur"],["mousedown","Mouse Down"],["mouseenter","Mouse Enter"],["mouseleave","Mouse Exit"],["mouseup","Mouse Up"]],tI=>tI.target.value)}if(ZI&&S.addEventListener("blur",ZI),this.data.comb){const WI=(this.data.rect[2]-this.data.rect[0])/uI;S.classList.add("comb"),S.style.letterSpacing=`calc(${WI}px * var(--scale-factor) - 1ch)`}}else S=document.createElement("div"),S.textContent=this.data.fieldValue,S.style.verticalAlign="middle",S.style.display="table-cell";return this._setTextStyle(S),this._setBackgroundColor(S),this._setDefaultPropertiesFromJS(S),this.container.append(S),this.container}}class X extends g{constructor(A){super(A,{isRenderable:A.renderForms})}render(){const A=this.annotationStorage,W=this.data,L=W.id;let S=A.getValue(L,{value:W.exportValue===W.fieldValue}).value;typeof S=="string"&&(S=S!=="Off",A.setValue(L,{value:S})),this.container.className="buttonWidgetAnnotation checkBox";const Q=document.createElement("input");return l.add(Q),Q.setAttribute("data-element-id",L),Q.disabled=W.readOnly,this._setRequired(Q,this.data.required),Q.type="checkbox",Q.name=W.fieldName,S&&Q.setAttribute("checked",!0),Q.setAttribute("exportValue",W.exportValue),Q.tabIndex=d,Q.addEventListener("change",lI=>{const{name:uI,checked:MI}=lI.target;for(const ZI of this._getElementsByName(uI,L)){const WI=MI&&ZI.exportValue===W.exportValue;ZI.domElement&&(ZI.domElement.checked=WI),A.setValue(ZI.id,{value:WI})}A.setValue(L,{value:MI})}),Q.addEventListener("resetform",lI=>{const uI=W.defaultFieldValue||"Off";lI.target.checked=uI===W.exportValue}),this.enableScripting&&this.hasJSActions&&(Q.addEventListener("updatefromsandbox",lI=>{const uI={value(MI){MI.target.checked=MI.detail.value!=="Off",A.setValue(L,{value:MI.target.checked})}};this._dispatchEventFromSandbox(uI,lI)}),this._setEventListeners(Q,[["change","Validate"],["change","Action"],["focus","Focus"],["blur","Blur"],["mousedown","Mouse Down"],["mouseenter","Mouse Enter"],["mouseleave","Mouse Exit"],["mouseup","Mouse Up"]],lI=>lI.target.checked)),this._setBackgroundColor(Q),this._setDefaultPropertiesFromJS(Q),this.container.append(Q),this.container}}class b extends g{constructor(A){super(A,{isRenderable:A.renderForms})}render(){this.container.className="buttonWidgetAnnotation radioButton";const A=this.annotationStorage,W=this.data,L=W.id;let S=A.getValue(L,{value:W.fieldValue===W.buttonValue}).value;typeof S=="string"&&(S=S!==W.buttonValue,A.setValue(L,{value:S}));const Q=document.createElement("input");if(l.add(Q),Q.setAttribute("data-element-id",L),Q.disabled=W.readOnly,this._setRequired(Q,this.data.required),Q.type="radio",Q.name=W.fieldName,S&&Q.setAttribute("checked",!0),Q.tabIndex=d,Q.addEventListener("change",lI=>{const{name:uI,checked:MI}=lI.target;for(const ZI of this._getElementsByName(uI,L))A.setValue(ZI.id,{value:!1});A.setValue(L,{value:MI})}),Q.addEventListener("resetform",lI=>{const uI=W.defaultFieldValue;lI.target.checked=uI!=null&&uI===W.buttonValue}),this.enableScripting&&this.hasJSActions){const lI=W.buttonValue;Q.addEventListener("updatefromsandbox",uI=>{const MI={value:ZI=>{const WI=lI===ZI.detail.value;for(const tI of this._getElementsByName(ZI.target.name)){const O=WI&&tI.id===L;tI.domElement&&(tI.domElement.checked=O),A.setValue(tI.id,{value:O})}}};this._dispatchEventFromSandbox(MI,uI)}),this._setEventListeners(Q,[["change","Validate"],["change","Action"],["focus","Focus"],["blur","Blur"],["mousedown","Mouse Down"],["mouseenter","Mouse Enter"],["mouseleave","Mouse Exit"],["mouseup","Mouse Up"]],uI=>uI.target.checked)}return this._setBackgroundColor(Q),this._setDefaultPropertiesFromJS(Q),this.container.append(Q),this.container}}class N extends i{constructor(A){super(A,{ignoreBorder:A.data.hasAppearance})}render(){const A=super.render();A.className="buttonWidgetAnnotation pushButton",this.data.alternativeText&&(A.title=this.data.alternativeText);const W=A.lastChild;return this.enableScripting&&this.hasJSActions&&W&&(this._setDefaultPropertiesFromJS(W),W.addEventListener("updatefromsandbox",L=>{this._dispatchEventFromSandbox({},L)})),A}}class F extends g{constructor(A){super(A,{isRenderable:A.renderForms})}render(){this.container.className="choiceWidgetAnnotation";const A=this.annotationStorage,W=this.data.id,L=A.getValue(W,{value:this.data.fieldValue}),S=document.createElement("select");l.add(S),S.setAttribute("data-element-id",W),S.disabled=this.data.readOnly,this._setRequired(S,this.data.required),S.name=this.data.fieldName,S.tabIndex=d;let Q=this.data.combo&&this.data.options.length>0;this.data.combo||(S.size=this.data.options.length,this.data.multiSelect&&(S.multiple=!0)),S.addEventListener("resetform",ZI=>{const WI=this.data.defaultFieldValue;for(const tI of S.options)tI.selected=tI.value===WI});for(const ZI of this.data.options){const WI=document.createElement("option");WI.textContent=ZI.displayValue,WI.value=ZI.exportValue,L.value.includes(ZI.exportValue)&&(WI.setAttribute("selected",!0),Q=!1),S.append(WI)}let lI=null;if(Q){const ZI=document.createElement("option");ZI.value=" ",ZI.setAttribute("hidden",!0),ZI.setAttribute("selected",!0),S.prepend(ZI),lI=()=>{ZI.remove(),S.removeEventListener("input",lI),lI=null},S.addEventListener("input",lI)}const uI=(ZI,WI)=>{const tI=WI?"value":"textContent",O=ZI.target.options;return ZI.target.multiple?Array.prototype.filter.call(O,f=>f.selected).map(f=>f[tI]):O.selectedIndex===-1?null:O[O.selectedIndex][tI]},MI=ZI=>{const WI=ZI.target.options;return Array.prototype.map.call(WI,tI=>({displayValue:tI.textContent,exportValue:tI.value}))};return this.enableScripting&&this.hasJSActions?(S.addEventListener("updatefromsandbox",ZI=>{const WI={value(tI){lI==null||lI();const O=tI.detail.value,f=new Set(Array.isArray(O)?O:[O]);for(const v of S.options)v.selected=f.has(v.value);A.setValue(W,{value:uI(tI,!0)})},multipleSelection(tI){S.multiple=!0},remove(tI){const O=S.options,f=tI.detail.remove;O[f].selected=!1,S.remove(f),O.length>0&&Array.prototype.findIndex.call(O,v=>v.selected)===-1&&(O[0].selected=!0),A.setValue(W,{value:uI(tI,!0),items:MI(tI)})},clear(tI){for(;S.length!==0;)S.remove(0);A.setValue(W,{value:null,items:[]})},insert(tI){const{index:O,displayValue:f,exportValue:v}=tI.detail.insert,RI=S.children[O],pI=document.createElement("option");pI.textContent=f,pI.value=v,RI?RI.before(pI):S.append(pI),A.setValue(W,{value:uI(tI,!0),items:MI(tI)})},items(tI){const{items:O}=tI.detail;for(;S.length!==0;)S.remove(0);for(const f of O){const{displayValue:v,exportValue:RI}=f,pI=document.createElement("option");pI.textContent=v,pI.value=RI,S.append(pI)}S.options.length>0&&(S.options[0].selected=!0),A.setValue(W,{value:uI(tI,!0),items:MI(tI)})},indices(tI){const O=new Set(tI.detail.indices);for(const f of tI.target.options)f.selected=O.has(f.index);A.setValue(W,{value:uI(tI,!0)})},editable(tI){tI.target.disabled=!tI.detail.editable}};this._dispatchEventFromSandbox(WI,ZI)}),S.addEventListener("input",ZI=>{var WI;const tI=uI(ZI,!0),O=uI(ZI,!1);A.setValue(W,{value:tI}),(WI=this.linkService.eventBus)==null||WI.dispatch("dispatcheventinsandbox",{source:this,detail:{id:W,name:"Keystroke",value:O,changeEx:tI,willCommit:!0,commitKey:1,keyDown:!1}})}),this._setEventListeners(S,[["focus","Focus"],["blur","Blur"],["mousedown","Mouse Down"],["mouseenter","Mouse Enter"],["mouseleave","Mouse Exit"],["mouseup","Mouse Up"],["input","Action"]],ZI=>ZI.target.checked)):S.addEventListener("input",function(ZI){A.setValue(W,{value:uI(ZI,!0)})}),this.data.combo&&this._setTextStyle(S),this._setBackgroundColor(S),this._setDefaultPropertiesFromJS(S),this.container.append(S),this.container}}class hI extends a{constructor(A){var W,L,S;const Q=!!((W=A.data.titleObj)!=null&&W.str||(L=A.data.contentsObj)!=null&&L.str||(S=A.data.richText)!=null&&S.str);super(A,{isRenderable:Q})}render(){const A=["Line","Square","Circle","PolyLine","Polygon","Ink"];if(this.container.className="popupAnnotation",A.includes(this.data.parentType))return this.container;const W=`[data-annotation-id="${this.data.parentId}"]`,L=this.layer.querySelectorAll(W);if(L.length===0)return this.container;const S=new YI({container:this.container,trigger:Array.from(L),color:this.data.color,titleObj:this.data.titleObj,modificationDate:this.data.modificationDate,contentsObj:this.data.contentsObj,richText:this.data.richText}),Q=this.page,lI=Z.Util.normalizeRect([this.data.parentRect[0],Q.view[3]-this.data.parentRect[1]+Q.view[1],this.data.parentRect[2],Q.view[3]-this.data.parentRect[3]+Q.view[1]]),uI=lI[0]+this.data.parentRect[2]-this.data.parentRect[0],MI=lI[1],[ZI,WI,tI,O]=this.viewport.viewBox,f=tI-ZI,v=O-WI;return this.container.style.left=`${100*(uI-ZI)/f}%`,this.container.style.top=`${100*(MI-WI)/v}%`,this.container.append(S.render()),this.container}}class YI{constructor(A){this.container=A.container,this.trigger=A.trigger,this.color=A.color,this.titleObj=A.titleObj,this.modificationDate=A.modificationDate,this.contentsObj=A.contentsObj,this.richText=A.richText,this.hideWrapper=A.hideWrapper||!1,this.pinned=!1}render(){var A,W;const L=document.createElement("div");L.className="popupWrapper",this.hideElement=this.hideWrapper?L:this.container,this.hideElement.hidden=!0;const S=document.createElement("div");S.className="popup";const Q=this.color;if(Q){const MI=.7*(255-Q[0])+Q[0],ZI=.7*(255-Q[1])+Q[1],WI=.7*(255-Q[2])+Q[2];S.style.backgroundColor=Z.Util.makeHexColor(MI|0,ZI|0,WI|0)}const lI=document.createElement("h1");lI.dir=this.titleObj.dir,lI.textContent=this.titleObj.str,S.append(lI);const uI=p.PDFDateString.toDateObject(this.modificationDate);if(uI){const MI=document.createElement("span");MI.className="popupDate",MI.textContent="{{date}}, {{time}}",MI.dataset.l10nId="annotation_date_string",MI.dataset.l10nArgs=JSON.stringify({date:uI.toLocaleDateString(),time:uI.toLocaleTimeString()}),S.append(MI)}if((A=this.richText)!=null&&A.str&&(!((W=this.contentsObj)!=null&&W.str)||this.contentsObj.str===this.richText.str))m.XfaLayer.render({xfaHtml:this.richText.html,intent:"richText",div:S}),S.lastChild.className="richText popupContent";else{const MI=this._formatContents(this.contentsObj);S.append(MI)}Array.isArray(this.trigger)||(this.trigger=[this.trigger]);for(const MI of this.trigger)MI.addEventListener("click",this._toggle.bind(this)),MI.addEventListener("mouseover",this._show.bind(this,!1)),MI.addEventListener("mouseout",this._hide.bind(this,!1));return S.addEventListener("click",this._hide.bind(this,!0)),L.append(S),L}_formatContents({str:A,dir:W}){const L=document.createElement("p");L.className="popupContent",L.dir=W;const S=A.split(/(?:\r\n?|\n)/);for(let Q=0,lI=S.length;Q<lI;++Q){const uI=S[Q];L.append(document.createTextNode(uI)),Q<lI-1&&L.append(document.createElement("br"))}return L}_toggle(){this.pinned?this._hide(!0):this._show(!0)}_show(A=!1){A&&(this.pinned=!0),this.hideElement.hidden&&(this.hideElement.hidden=!1,this.container.style.zIndex=parseInt(this.container.style.zIndex)+1e3)}_hide(A=!0){A&&(this.pinned=!1),!this.hideElement.hidden&&!this.pinned&&(this.hideElement.hidden=!0,this.container.style.zIndex=parseInt(this.container.style.zIndex)-1e3)}}class nI extends a{constructor(A){var W,L,S;const Q=!!(A.data.hasPopup||(W=A.data.titleObj)!=null&&W.str||(L=A.data.contentsObj)!=null&&L.str||(S=A.data.richText)!=null&&S.str);super(A,{isRenderable:Q,ignoreBorder:!0}),this.textContent=A.data.textContent}render(){if(this.container.className="freeTextAnnotation",this.textContent){const A=document.createElement("div");A.className="annotationTextContent",A.setAttribute("role","comment");for(const W of this.textContent){const L=document.createElement("span");L.textContent=W,A.append(L)}this.container.append(A)}return this.data.hasPopup||this._createPopup(null,this.data),this.container}}class gI extends a{constructor(A){var W,L,S;const Q=!!(A.data.hasPopup||(W=A.data.titleObj)!=null&&W.str||(L=A.data.contentsObj)!=null&&L.str||(S=A.data.richText)!=null&&S.str);super(A,{isRenderable:Q,ignoreBorder:!0})}render(){this.container.className="lineAnnotation";const A=this.data,{width:W,height:L}=B(A.rect),S=this.svgFactory.create(W,L,!0),Q=this.svgFactory.createElement("svg:line");return Q.setAttribute("x1",A.rect[2]-A.lineCoordinates[0]),Q.setAttribute("y1",A.rect[3]-A.lineCoordinates[1]),Q.setAttribute("x2",A.rect[2]-A.lineCoordinates[2]),Q.setAttribute("y2",A.rect[3]-A.lineCoordinates[3]),Q.setAttribute("stroke-width",A.borderStyle.width||1),Q.setAttribute("stroke","transparent"),Q.setAttribute("fill","transparent"),S.append(Q),this.container.append(S),this._createPopup(Q,A),this.container}}class U extends a{constructor(A){var W,L,S;const Q=!!(A.data.hasPopup||(W=A.data.titleObj)!=null&&W.str||(L=A.data.contentsObj)!=null&&L.str||(S=A.data.richText)!=null&&S.str);super(A,{isRenderable:Q,ignoreBorder:!0})}render(){this.container.className="squareAnnotation";const A=this.data,{width:W,height:L}=B(A.rect),S=this.svgFactory.create(W,L,!0),Q=A.borderStyle.width,lI=this.svgFactory.createElement("svg:rect");return lI.setAttribute("x",Q/2),lI.setAttribute("y",Q/2),lI.setAttribute("width",W-Q),lI.setAttribute("height",L-Q),lI.setAttribute("stroke-width",Q||1),lI.setAttribute("stroke","transparent"),lI.setAttribute("fill","transparent"),S.append(lI),this.container.append(S),this._createPopup(lI,A),this.container}}class II extends a{constructor(A){var W,L,S;const Q=!!(A.data.hasPopup||(W=A.data.titleObj)!=null&&W.str||(L=A.data.contentsObj)!=null&&L.str||(S=A.data.richText)!=null&&S.str);super(A,{isRenderable:Q,ignoreBorder:!0})}render(){this.container.className="circleAnnotation";const A=this.data,{width:W,height:L}=B(A.rect),S=this.svgFactory.create(W,L,!0),Q=A.borderStyle.width,lI=this.svgFactory.createElement("svg:ellipse");return lI.setAttribute("cx",W/2),lI.setAttribute("cy",L/2),lI.setAttribute("rx",W/2-Q/2),lI.setAttribute("ry",L/2-Q/2),lI.setAttribute("stroke-width",Q||1),lI.setAttribute("stroke","transparent"),lI.setAttribute("fill","transparent"),S.append(lI),this.container.append(S),this._createPopup(lI,A),this.container}}class q extends a{constructor(A){var W,L,S;const Q=!!(A.data.hasPopup||(W=A.data.titleObj)!=null&&W.str||(L=A.data.contentsObj)!=null&&L.str||(S=A.data.richText)!=null&&S.str);super(A,{isRenderable:Q,ignoreBorder:!0}),this.containerClassName="polylineAnnotation",this.svgElementName="svg:polyline"}render(){this.container.className=this.containerClassName;const A=this.data,{width:W,height:L}=B(A.rect),S=this.svgFactory.create(W,L,!0);let Q=[];for(const uI of A.vertices){const MI=uI.x-A.rect[0],ZI=A.rect[3]-uI.y;Q.push(MI+","+ZI)}Q=Q.join(" ");const lI=this.svgFactory.createElement(this.svgElementName);return lI.setAttribute("points",Q),lI.setAttribute("stroke-width",A.borderStyle.width||1),lI.setAttribute("stroke","transparent"),lI.setAttribute("fill","transparent"),S.append(lI),this.container.append(S),this._createPopup(lI,A),this.container}}class mI extends q{constructor(A){super(A),this.containerClassName="polygonAnnotation",this.svgElementName="svg:polygon"}}class NI extends a{constructor(A){var W,L,S;const Q=!!(A.data.hasPopup||(W=A.data.titleObj)!=null&&W.str||(L=A.data.contentsObj)!=null&&L.str||(S=A.data.richText)!=null&&S.str);super(A,{isRenderable:Q,ignoreBorder:!0})}render(){return this.container.className="caretAnnotation",this.data.hasPopup||this._createPopup(null,this.data),this.container}}class BI extends a{constructor(A){var W,L,S;const Q=!!(A.data.hasPopup||(W=A.data.titleObj)!=null&&W.str||(L=A.data.contentsObj)!=null&&L.str||(S=A.data.richText)!=null&&S.str);super(A,{isRenderable:Q,ignoreBorder:!0}),this.containerClassName="inkAnnotation",this.svgElementName="svg:polyline"}render(){this.container.className=this.containerClassName;const A=this.data,{width:W,height:L}=B(A.rect),S=this.svgFactory.create(W,L,!0);for(const Q of A.inkLists){let lI=[];for(const MI of Q){const ZI=MI.x-A.rect[0],WI=A.rect[3]-MI.y;lI.push(`${ZI},${WI}`)}lI=lI.join(" ");const uI=this.svgFactory.createElement(this.svgElementName);uI.setAttribute("points",lI),uI.setAttribute("stroke-width",A.borderStyle.width||1),uI.setAttribute("stroke","transparent"),uI.setAttribute("fill","transparent"),this._createPopup(uI,A),S.append(uI)}return this.container.append(S),this.container}}class J extends a{constructor(A){var W,L,S;const Q=!!(A.data.hasPopup||(W=A.data.titleObj)!=null&&W.str||(L=A.data.contentsObj)!=null&&L.str||(S=A.data.richText)!=null&&S.str);super(A,{isRenderable:Q,ignoreBorder:!0,createQuadrilaterals:!0})}render(){return this.data.hasPopup||this._createPopup(null,this.data),this.quadrilaterals?this._renderQuadrilaterals("highlightAnnotation"):(this.container.className="highlightAnnotation",this.container)}}class e extends a{constructor(A){var W,L,S;const Q=!!(A.data.hasPopup||(W=A.data.titleObj)!=null&&W.str||(L=A.data.contentsObj)!=null&&L.str||(S=A.data.richText)!=null&&S.str);super(A,{isRenderable:Q,ignoreBorder:!0,createQuadrilaterals:!0})}render(){return this.data.hasPopup||this._createPopup(null,this.data),this.quadrilaterals?this._renderQuadrilaterals("underlineAnnotation"):(this.container.className="underlineAnnotation",this.container)}}class w extends a{constructor(A){var W,L,S;const Q=!!(A.data.hasPopup||(W=A.data.titleObj)!=null&&W.str||(L=A.data.contentsObj)!=null&&L.str||(S=A.data.richText)!=null&&S.str);super(A,{isRenderable:Q,ignoreBorder:!0,createQuadrilaterals:!0})}render(){return this.data.hasPopup||this._createPopup(null,this.data),this.quadrilaterals?this._renderQuadrilaterals("squigglyAnnotation"):(this.container.className="squigglyAnnotation",this.container)}}class x extends a{constructor(A){var W,L,S;const Q=!!(A.data.hasPopup||(W=A.data.titleObj)!=null&&W.str||(L=A.data.contentsObj)!=null&&L.str||(S=A.data.richText)!=null&&S.str);super(A,{isRenderable:Q,ignoreBorder:!0,createQuadrilaterals:!0})}render(){return this.data.hasPopup||this._createPopup(null,this.data),this.quadrilaterals?this._renderQuadrilaterals("strikeoutAnnotation"):(this.container.className="strikeoutAnnotation",this.container)}}class E extends a{constructor(A){var W,L,S;const Q=!!(A.data.hasPopup||(W=A.data.titleObj)!=null&&W.str||(L=A.data.contentsObj)!=null&&L.str||(S=A.data.richText)!=null&&S.str);super(A,{isRenderable:Q,ignoreBorder:!0})}render(){return this.container.className="stampAnnotation",this.data.hasPopup||this._createPopup(null,this.data),this.container}}class P extends a{constructor(A){var W;super(A,{isRenderable:!0});const{filename:L,content:S}=this.data.file;this.filename=(0,p.getFilenameFromUrl)(L),this.content=S,(W=this.linkService.eventBus)==null||W.dispatch("fileattachmentannotation",{source:this,filename:L,content:S})}render(){var A,W;this.container.className="fileAttachmentAnnotation";const L=document.createElement("div");return L.className="popupTriggerArea",L.addEventListener("dblclick",this._download.bind(this)),!this.data.hasPopup&&((A=this.data.titleObj)!=null&&A.str||(W=this.data.contentsObj)!=null&&W.str||this.data.richText)&&this._createPopup(L,this.data),this.container.append(L),this.container}_download(){var A;(A=this.downloadManager)==null||A.openOrDownloadData(this.container,this.content,this.filename)}}const iI=class{static render(eI){var A,W;const{annotations:L,div:S,viewport:Q,accessibilityManager:lI}=eI;bI(this,_,z).call(this,S,Q);let uI=0;for(const MI of L){if(MI.annotationType!==Z.AnnotationType.POPUP){const{width:WI,height:tI}=B(MI.rect);if(WI<=0||tI<=0)continue}const ZI=Y.create({data:MI,layer:S,page:eI.page,viewport:Q,linkService:eI.linkService,downloadManager:eI.downloadManager,imageResourcesPath:eI.imageResourcesPath||"",renderForms:eI.renderForms!==!1,svgFactory:new p.DOMSVGFactory,annotationStorage:eI.annotationStorage||new j.AnnotationStorage,enableScripting:eI.enableScripting,hasJSActions:eI.hasJSActions,fieldObjects:eI.fieldObjects,mouseState:eI.mouseState||{isDown:!1}});if(ZI.isRenderable){const WI=ZI.render();if(MI.hidden&&(WI.style.visibility="hidden"),Array.isArray(WI))for(const tI of WI)tI.style.zIndex=uI++,bI(A=iI,h,M).call(A,tI,MI.id,S,lI);else WI.style.zIndex=uI++,ZI instanceof hI?S.prepend(WI):bI(W=iI,h,M).call(W,WI,MI.id,S,lI)}}bI(this,T,r).call(this,S,eI.annotationCanvasMap)}static update(eI){const{annotationCanvasMap:A,div:W,viewport:L}=eI;bI(this,_,z).call(this,W,L),bI(this,T,r).call(this,W,A),W.hidden=!1}};let aI=iI;h=new WeakSet,M=function(eI,A,W,L){const S=eI.firstChild||eI;S.id=`${p.AnnotationPrefix}${A}`,W.append(eI),L==null||L.moveElementInDOM(W,eI,S,!1)},_=new WeakSet,z=function(eI,{width:A,height:W,rotation:L}){const{style:S}=eI,Q=L%180!==0,lI=Math.floor(A)+"px",uI=Math.floor(W)+"px";S.width=Q?uI:lI,S.height=Q?lI:uI,eI.setAttribute("data-main-rotation",L)},T=new WeakSet,r=function(eI,A){if(A){for(const[W,L]of A){const S=eI.querySelector(`[data-annotation-id="${W}"]`);if(!S)continue;const{firstChild:Q}=S;Q?Q.nodeName==="CANVAS"?Q.replaceWith(L):Q.before(L):S.append(L)}A.clear()}},GI(aI,h),GI(aI,_),GI(aI,T),c.AnnotationLayer=aI},(wI,c)=>{Object.defineProperty(c,"__esModule",{value:!0}),c.ColorConverters=void 0;function $(M){return Math.floor(Math.max(0,Math.min(1,M))*255).toString(16).padStart(2,"0")}class h{static CMYK_G([_,z,T,r]){return["G",1-Math.min(1,.3*_+.59*T+.11*z+r)]}static G_CMYK([_]){return["CMYK",0,0,0,1-_]}static G_RGB([_]){return["RGB",_,_,_]}static G_HTML([_]){const z=$(_);return`#${z}${z}${z}`}static RGB_G([_,z,T]){return["G",.3*_+.59*z+.11*T]}static RGB_HTML([_,z,T]){const r=$(_),Z=$(z),p=$(T);return`#${r}${Z}${p}`}static T_HTML(){return"#00000000"}static CMYK_RGB([_,z,T,r]){return["RGB",1-Math.min(1,_+r),1-Math.min(1,T+r),1-Math.min(1,z+r)]}static CMYK_HTML(_){const z=this.CMYK_RGB(_).slice(1);return this.RGB_HTML(z)}static RGB_CMYK([_,z,T]){const r=1-_,Z=1-z,p=1-T,j=Math.min(r,Z,p);return["CMYK",r,Z,p,j]}}c.ColorConverters=h},(wI,c,$)=>{Object.defineProperty(c,"__esModule",{value:!0}),c.XfaLayer=void 0;var h=$(20);class M{static setupStorage(z,T,r,Z,p){const j=Z.getValue(T,{value:null});switch(r.name){case"textarea":if(j.value!==null&&(z.textContent=j.value),p==="print")break;z.addEventListener("input",D=>{Z.setValue(T,{value:D.target.value})});break;case"input":if(r.attributes.type==="radio"||r.attributes.type==="checkbox"){if(j.value===r.attributes.xfaOn?z.setAttribute("checked",!0):j.value===r.attributes.xfaOff&&z.removeAttribute("checked"),p==="print")break;z.addEventListener("change",D=>{Z.setValue(T,{value:D.target.checked?D.target.getAttribute("xfaOn"):D.target.getAttribute("xfaOff")})})}else{if(j.value!==null&&z.setAttribute("value",j.value),p==="print")break;z.addEventListener("input",D=>{Z.setValue(T,{value:D.target.value})})}break;case"select":if(j.value!==null)for(const D of r.children)D.attributes.value===j.value&&(D.attributes.selected=!0);z.addEventListener("input",D=>{const m=D.target.options,d=m.selectedIndex===-1?"":m[m.selectedIndex].value;Z.setValue(T,{value:d})});break}}static setAttributes({html:z,element:T,storage:r=null,intent:Z,linkService:p}){const{attributes:j}=T,D=z instanceof HTMLAnchorElement;j.type==="radio"&&(j.name=`${j.name}-${Z}`);for(const[m,d]of Object.entries(j))if(d!=null)switch(m){case"class":d.length&&z.setAttribute(m,d.join(" "));break;case"dataId":break;case"id":z.setAttribute("data-element-id",d);break;case"style":Object.assign(z.style,d);break;case"textContent":z.textContent=d;break;default:(!D||m!=="href"&&m!=="newWindow")&&z.setAttribute(m,d)}D&&p.addLinkAttributes(z,j.href,j.newWindow),r&&j.dataId&&this.setupStorage(z,j.dataId,T,r)}static render(z){var T;const r=z.annotationStorage,Z=z.linkService,p=z.xfaHtml,j=z.intent||"display",D=document.createElement(p.name);p.attributes&&this.setAttributes({html:D,element:p,intent:j,linkService:Z});const m=[[p,-1,D]],d=z.div;if(d.append(D),z.viewport){const l=`matrix(${z.viewport.transform.join(",")})`;d.style.transform=l}j!=="richText"&&d.setAttribute("class","xfaLayer xfaFont");const C=[];for(;m.length>0;){const[l,B,Y]=m.at(-1);if(B+1===l.children.length){m.pop();continue}const a=l.children[++m.at(-1)[1]];if(a===null)continue;const{name:i}=a;if(i==="#text"){const g=document.createTextNode(a.value);C.push(g),Y.append(g);continue}let I;if((T=a==null?void 0:a.attributes)!=null&&T.xmlns?I=document.createElementNS(a.attributes.xmlns,i):I=document.createElement(i),Y.append(I),a.attributes&&this.setAttributes({html:I,element:a,storage:r,intent:j,linkService:Z}),a.children&&a.children.length>0)m.push([a,-1,I]);else if(a.value){const g=document.createTextNode(a.value);h.XfaText.shouldBuildText(i)&&C.push(g),I.append(g)}}for(const l of d.querySelectorAll(".xfaNonInteractive input, .xfaNonInteractive textarea"))l.setAttribute("readOnly",!0);return{textDivs:C}}static update(z){const T=`matrix(${z.viewport.transform.join(",")})`;z.div.style.transform=T,z.div.hidden=!1}}c.XfaLayer=M},(wI,c,$)=>{Object.defineProperty(c,"__esModule",{value:!0}),c.TextLayerRenderTask=void 0,c.renderTextLayer=Y;var h=$(1),M=$(8);const _=1e5,z=30,T=.8,r=new Map,Z=/^\s+$/g;function p(a,i){const I=r.get(a);if(I)return I;i.save(),i.font=`${z}px ${a}`;const g=i.measureText("");let o=g.fontBoundingBoxAscent,X=Math.abs(g.fontBoundingBoxDescent);if(o){i.restore();const N=o/(o+X);return r.set(a,N),N}i.strokeStyle="red",i.clearRect(0,0,z,z),i.strokeText("g",0,0);let b=i.getImageData(0,0,z,z).data;X=0;for(let N=b.length-1-3;N>=0;N-=4)if(b[N]>0){X=Math.ceil(N/4/z);break}i.clearRect(0,0,z,z),i.strokeText("A",0,z),b=i.getImageData(0,0,z,z).data,o=0;for(let N=0,F=b.length;N<F;N+=4)if(b[N]>0){o=z-Math.floor(N/4/z);break}if(i.restore(),o){const N=o/(o+X);return r.set(a,N),N}return r.set(a,T),T}function j(a,i,I,g){const o=document.createElement("span"),X=a._enhanceTextSelection?{angle:0,canvasWidth:0,hasText:i.str!=="",hasEOL:i.hasEOL,originalTransform:null,paddingBottom:0,paddingLeft:0,paddingRight:0,paddingTop:0,scale:1,fontSize:0}:{angle:0,canvasWidth:0,hasText:i.str!=="",hasEOL:i.hasEOL,fontSize:0};a._textDivs.push(o);const b=h.Util.transform(a._viewport.transform,i.transform);let N=Math.atan2(b[1],b[0]);const F=I[i.fontName];F.vertical&&(N+=Math.PI/2);const hI=Math.hypot(b[2],b[3]),YI=hI*p(F.fontFamily,g);let nI,gI;N===0?(nI=b[4],gI=b[5]-YI):(nI=b[4]+YI*Math.sin(N),gI=b[5]-YI*Math.cos(N)),o.style.left=`${nI}px`,o.style.top=`${gI}px`,o.style.fontSize=`${hI}px`,o.style.fontFamily=F.fontFamily,X.fontSize=hI,o.setAttribute("role","presentation"),o.textContent=i.str,o.dir=i.dir,a._fontInspectorEnabled&&(o.dataset.fontName=i.fontName),N!==0&&(X.angle=N*(180/Math.PI));let U=!1;if(i.str.length>1||a._enhanceTextSelection&&Z.test(i.str))U=!0;else if(i.str!==" "&&i.transform[0]!==i.transform[3]){const II=Math.abs(i.transform[0]),q=Math.abs(i.transform[3]);II!==q&&Math.max(II,q)/Math.min(II,q)>1.5&&(U=!0)}if(U&&(F.vertical?X.canvasWidth=i.height*a._viewport.scale:X.canvasWidth=i.width*a._viewport.scale),a._textDivProperties.set(o,X),a._textContentStream&&a._layoutText(o),a._enhanceTextSelection&&X.hasText){let II=1,q=0;N!==0&&(II=Math.cos(N),q=Math.sin(N));const mI=(F.vertical?i.height:i.width)*a._viewport.scale,NI=hI;let BI,J;N!==0?(BI=[II,q,-q,II,nI,gI],J=h.Util.getAxialAlignedBoundingBox([0,0,mI,NI],BI)):J=[nI,gI,nI+mI,gI+NI],a._bounds.push({left:J[0],top:J[1],right:J[2],bottom:J[3],div:o,size:[mI,NI],m:BI})}}function D(a){if(a._canceled)return;const i=a._textDivs,I=a._capability,g=i.length;if(g>_){a._renderingDone=!0,I.resolve();return}if(!a._textContentStream)for(let o=0;o<g;o++)a._layoutText(i[o]);a._renderingDone=!0,I.resolve()}function m(a,i,I){let g=0;for(let o=0;o<I;o++){const X=a[i++];X>0&&(g=g?Math.min(X,g):X)}return g}function d(a){const i=a._bounds,I=a._viewport,g=C(I.width,I.height,i);for(let o=0;o<g.length;o++){const X=i[o].div,b=a._textDivProperties.get(X);if(b.angle===0){b.paddingLeft=i[o].left-g[o].left,b.paddingTop=i[o].top-g[o].top,b.paddingRight=g[o].right-i[o].right,b.paddingBottom=g[o].bottom-i[o].bottom,a._textDivProperties.set(X,b);continue}const N=g[o],F=i[o],hI=F.m,YI=hI[0],nI=hI[1],gI=[[0,0],[0,F.size[1]],[F.size[0],0],F.size],U=new Float64Array(64);for(let q=0,mI=gI.length;q<mI;q++){const NI=h.Util.applyTransform(gI[q],hI);U[q+0]=YI&&(N.left-NI[0])/YI,U[q+4]=nI&&(N.top-NI[1])/nI,U[q+8]=YI&&(N.right-NI[0])/YI,U[q+12]=nI&&(N.bottom-NI[1])/nI,U[q+16]=nI&&(N.left-NI[0])/-nI,U[q+20]=YI&&(N.top-NI[1])/YI,U[q+24]=nI&&(N.right-NI[0])/-nI,U[q+28]=YI&&(N.bottom-NI[1])/YI,U[q+32]=YI&&(N.left-NI[0])/-YI,U[q+36]=nI&&(N.top-NI[1])/-nI,U[q+40]=YI&&(N.right-NI[0])/-YI,U[q+44]=nI&&(N.bottom-NI[1])/-nI,U[q+48]=nI&&(N.left-NI[0])/nI,U[q+52]=YI&&(N.top-NI[1])/-YI,U[q+56]=nI&&(N.right-NI[0])/nI,U[q+60]=YI&&(N.bottom-NI[1])/-YI}const II=1+Math.min(Math.abs(YI),Math.abs(nI));b.paddingLeft=m(U,32,16)/II,b.paddingTop=m(U,48,16)/II,b.paddingRight=m(U,0,16)/II,b.paddingBottom=m(U,16,16)/II,a._textDivProperties.set(X,b)}}function C(a,i,I){const g=I.map(function(X,b){return{x1:X.left,y1:X.top,x2:X.right,y2:X.bottom,index:b,x1New:void 0,x2New:void 0}});l(a,g);const o=new Array(I.length);for(const X of g){const b=X.index;o[b]={left:X.x1New,top:0,right:X.x2New,bottom:0}}I.map(function(X,b){const N=o[b],F=g[b];F.x1=X.top,F.y1=a-N.right,F.x2=X.bottom,F.y2=a-N.left,F.index=b,F.x1New=void 0,F.x2New=void 0}),l(i,g);for(const X of g){const b=X.index;o[b].top=X.x1New,o[b].bottom=X.x2New}return o}function l(a,i){i.sort(function(g,o){return g.x1-o.x1||g.index-o.index});const I=[{start:-1/0,end:1/0,boundary:{x1:-1/0,y1:-1/0,x2:0,y2:1/0,index:-1,x1New:0,x2New:0}}];for(const g of i){let o=0;for(;o<I.length&&I[o].end<=g.y1;)o++;let X=I.length-1;for(;X>=0&&I[X].start>=g.y2;)X--;let b,N,F,hI,YI=-1/0;for(F=o;F<=X;F++){b=I[F],N=b.boundary;let U;N.x2>g.x1?U=N.index>g.index?N.x1New:g.x1:N.x2New===void 0?U=(N.x2+g.x1)/2:U=N.x2New,U>YI&&(YI=U)}for(g.x1New=YI,F=o;F<=X;F++)b=I[F],N=b.boundary,N.x2New===void 0?N.x2>g.x1?N.index>g.index&&(N.x2New=N.x2):N.x2New=YI:N.x2New>YI&&(N.x2New=Math.max(YI,N.x2));const nI=[];let gI=null;for(F=o;F<=X;F++){b=I[F],N=b.boundary;const U=N.x2>g.x2?N:g;gI===U?nI.at(-1).end=b.end:(nI.push({start:b.start,end:b.end,boundary:U}),gI=U)}for(I[o].start<g.y1&&(nI[0].start=g.y1,nI.unshift({start:I[o].start,end:g.y1,boundary:I[o].boundary})),g.y2<I[X].end&&(nI.at(-1).end=g.y2,nI.push({start:g.y2,end:I[X].end,boundary:I[X].boundary})),F=o;F<=X;F++){if(b=I[F],N=b.boundary,N.x2New!==void 0)continue;let U=!1;for(hI=o-1;!U&&hI>=0&&I[hI].start>=N.y1;hI--)U=I[hI].boundary===N;for(hI=X+1;!U&&hI<I.length&&I[hI].end<=N.y2;hI++)U=I[hI].boundary===N;for(hI=0;!U&&hI<nI.length;hI++)U=nI[hI].boundary===N;U||(N.x2New=YI)}Array.prototype.splice.apply(I,[o,X-o+1,...nI])}for(const g of I){const o=g.boundary;o.x2New===void 0&&(o.x2New=Math.max(a,o.x2))}}class B{constructor({textContent:i,textContentStream:I,container:g,viewport:o,textDivs:X,textContentItemsStr:b,enhanceTextSelection:N}){var F;N&&(0,M.deprecated)("The `enhanceTextSelection` functionality will be removed in the future."),this._textContent=i,this._textContentStream=I,this._container=g,this._document=g.ownerDocument,this._viewport=o,this._textDivs=X||[],this._textContentItemsStr=b||[],this._enhanceTextSelection=!!N,this._fontInspectorEnabled=!!((F=globalThis.FontInspector)!=null&&F.enabled),this._reader=null,this._layoutTextLastFontSize=null,this._layoutTextLastFontFamily=null,this._layoutTextCtx=null,this._textDivProperties=new WeakMap,this._renderingDone=!1,this._canceled=!1,this._capability=(0,h.createPromiseCapability)(),this._renderTimer=null,this._bounds=[],this._devicePixelRatio=globalThis.devicePixelRatio||1,this._capability.promise.finally(()=>{this._enhanceTextSelection||(this._textDivProperties=null),this._layoutTextCtx&&(this._layoutTextCtx.canvas.width=0,this._layoutTextCtx.canvas.height=0,this._layoutTextCtx=null)}).catch(()=>{})}get promise(){return this._capability.promise}cancel(){this._canceled=!0,this._reader&&(this._reader.cancel(new h.AbortException("TextLayer task cancelled.")).catch(()=>{}),this._reader=null),this._renderTimer!==null&&(clearTimeout(this._renderTimer),this._renderTimer=null),this._capability.reject(new Error("TextLayer task cancelled."))}_processItems(i,I){for(let g=0,o=i.length;g<o;g++){if(i[g].str===void 0){if(i[g].type==="beginMarkedContentProps"||i[g].type==="beginMarkedContent"){const X=this._container;this._container=document.createElement("span"),this._container.classList.add("markedContent"),i[g].id!==null&&this._container.setAttribute("id",`${i[g].id}`),X.append(this._container)}else i[g].type==="endMarkedContent"&&(this._container=this._container.parentNode);continue}this._textContentItemsStr.push(i[g].str),j(this,i[g],I,this._layoutTextCtx)}}_layoutText(i){const I=this._textDivProperties.get(i);let g="";if(I.canvasWidth!==0&&I.hasText){const{fontFamily:o}=i.style,{fontSize:X}=I;(X!==this._layoutTextLastFontSize||o!==this._layoutTextLastFontFamily)&&(this._layoutTextCtx.font=`${X*this._devicePixelRatio}px ${o}`,this._layoutTextLastFontSize=X,this._layoutTextLastFontFamily=o);const{width:b}=this._layoutTextCtx.measureText(i.textContent);if(b>0){const N=this._devicePixelRatio*I.canvasWidth/b;this._enhanceTextSelection&&(I.scale=N),g=`scaleX(${N})`}}if(I.angle!==0&&(g=`rotate(${I.angle}deg) ${g}`),g.length>0&&(this._enhanceTextSelection&&(I.originalTransform=g),i.style.transform=g),I.hasText&&this._container.append(i),I.hasEOL){const o=document.createElement("br");o.setAttribute("role","presentation"),this._container.append(o)}}_render(i=0){const I=(0,h.createPromiseCapability)();let g=Object.create(null);const o=this._document.createElement("canvas");if(o.height=o.width=z,this._layoutTextCtx=o.getContext("2d",{alpha:!1}),this._textContent){const X=this._textContent.items,b=this._textContent.styles;this._processItems(X,b),I.resolve()}else if(this._textContentStream){const X=()=>{this._reader.read().then(({value:b,done:N})=>{if(N){I.resolve();return}Object.assign(g,b.styles),this._processItems(b.items,g),X()},I.reject)};this._reader=this._textContentStream.getReader(),X()}else throw new Error('Neither "textContent" nor "textContentStream" parameters specified.');I.promise.then(()=>{g=null,i?this._renderTimer=setTimeout(()=>{D(this),this._renderTimer=null},i):D(this)},this._capability.reject)}expandTextDivs(i=!1){if(!this._enhanceTextSelection||!this._renderingDone)return;this._bounds!==null&&(d(this),this._bounds=null);const I=[],g=[];for(let o=0,X=this._textDivs.length;o<X;o++){const b=this._textDivs[o],N=this._textDivProperties.get(b);N.hasText&&(i?(I.length=0,g.length=0,N.originalTransform&&I.push(N.originalTransform),N.paddingTop>0?(g.push(`${N.paddingTop}px`),I.push(`translateY(${-N.paddingTop}px)`)):g.push(0),N.paddingRight>0?g.push(`${N.paddingRight/N.scale}px`):g.push(0),N.paddingBottom>0?g.push(`${N.paddingBottom}px`):g.push(0),N.paddingLeft>0?(g.push(`${N.paddingLeft/N.scale}px`),I.push(`translateX(${-N.paddingLeft/N.scale}px)`)):g.push(0),b.style.padding=g.join(" "),I.length&&(b.style.transform=I.join(" "))):(b.style.padding=null,b.style.transform=N.originalTransform))}}}c.TextLayerRenderTask=B;function Y(a){const i=new B({textContent:a.textContent,textContentStream:a.textContentStream,container:a.container,viewport:a.viewport,textDivs:a.textDivs,textContentItemsStr:a.textContentItemsStr,enhanceTextSelection:a.enhanceTextSelection});return i._render(a.timeout),i}},(wI,c,$)=>{Object.defineProperty(c,"__esModule",{value:!0}),c.SVGGraphics=void 0;var h=$(8),M=$(1),_=$(3);let z=class{constructor(){(0,M.unreachable)("Not implemented: SVGGraphics")}};c.SVGGraphics=z;{let T=function(I){let g=[];const o=[];for(const X of I){if(X.fn==="save"){g.push({fnId:92,fn:"group",items:[]}),o.push(g),g=g.at(-1).items;continue}X.fn==="restore"?g=o.pop():g.push(X)}return g},r=function(I){if(Number.isInteger(I))return I.toString();const g=I.toFixed(10);let o=g.length-1;if(g[o]!=="0")return g;do o--;while(g[o]==="0");return g.substring(0,g[o]==="."?o:o+1)},Z=function(I){if(I[4]===0&&I[5]===0){if(I[1]===0&&I[2]===0)return I[0]===1&&I[3]===1?"":`scale(${r(I[0])} ${r(I[3])})`;if(I[0]===I[3]&&I[1]===-I[2]){const g=Math.acos(I[0])*180/Math.PI;return`rotate(${r(g)})`}}else if(I[0]===1&&I[1]===0&&I[2]===0&&I[3]===1)return`translate(${r(I[4])} ${r(I[5])})`;return`matrix(${r(I[0])} ${r(I[1])} ${r(I[2])} ${r(I[3])} ${r(I[4])} ${r(I[5])})`};const p={fontStyle:"normal",fontWeight:"normal",fillColor:"#000000"},j="http://www.w3.org/XML/1998/namespace",D="http://www.w3.org/1999/xlink",m=["butt","round","square"],d=["miter","round","bevel"],C=function(I,g="",o=!1){if(URL.createObjectURL&&typeof Blob<"u"&&!o)return URL.createObjectURL(new Blob([I],{type:g}));const X="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=";let b=`data:${g};base64,`;for(let N=0,F=I.length;N<F;N+=3){const hI=I[N]&255,YI=I[N+1]&255,nI=I[N+2]&255,gI=hI>>2,U=(hI&3)<<4|YI>>4,II=N+1<F?(YI&15)<<2|nI>>6:64,q=N+2<F?nI&63:64;b+=X[gI]+X[U]+X[II]+X[q]}return b},l=function(){const I=new Uint8Array([137,80,78,71,13,10,26,10]),g=12,o=new Int32Array(256);for(let nI=0;nI<256;nI++){let gI=nI;for(let U=0;U<8;U++)gI&1?gI=3988292384^gI>>1&2147483647:gI=gI>>1&2147483647;o[nI]=gI}function X(nI,gI,U){let II=-1;for(let q=gI;q<U;q++){const mI=(II^nI[q])&255,NI=o[mI];II=II>>>8^NI}return II^-1}function b(nI,gI,U,II){let q=II;const mI=gI.length;U[q]=mI>>24&255,U[q+1]=mI>>16&255,U[q+2]=mI>>8&255,U[q+3]=mI&255,q+=4,U[q]=nI.charCodeAt(0)&255,U[q+1]=nI.charCodeAt(1)&255,U[q+2]=nI.charCodeAt(2)&255,U[q+3]=nI.charCodeAt(3)&255,q+=4,U.set(gI,q),q+=gI.length;const NI=X(U,II+4,q);U[q]=NI>>24&255,U[q+1]=NI>>16&255,U[q+2]=NI>>8&255,U[q+3]=NI&255}function N(nI,gI,U){let II=1,q=0;for(let mI=gI;mI<U;++mI)II=(II+(nI[mI]&255))%65521,q=(q+II)%65521;return q<<16|II}function F(nI){if(!_.isNodeJS)return hI(nI);try{let gI;parseInt(process.versions.node)>=8?gI=nI:gI=Buffer.from(nI);const U=require$$5.deflateSync(gI,{level:9});return U instanceof Uint8Array?U:new Uint8Array(U)}catch(gI){(0,M.warn)("Not compressing PNG because zlib.deflateSync is unavailable: "+gI)}return hI(nI)}function hI(nI){let gI=nI.length;const U=65535,II=Math.ceil(gI/U),q=new Uint8Array(2+gI+II*5+4);let mI=0;q[mI++]=120,q[mI++]=156;let NI=0;for(;gI>U;)q[mI++]=0,q[mI++]=255,q[mI++]=255,q[mI++]=0,q[mI++]=0,q.set(nI.subarray(NI,NI+U),mI),mI+=U,NI+=U,gI-=U;q[mI++]=1,q[mI++]=gI&255,q[mI++]=gI>>8&255,q[mI++]=~gI&65535&255,q[mI++]=(~gI&65535)>>8&255,q.set(nI.subarray(NI),mI),mI+=nI.length-NI;const BI=N(nI,0,nI.length);return q[mI++]=BI>>24&255,q[mI++]=BI>>16&255,q[mI++]=BI>>8&255,q[mI++]=BI&255,q}function YI(nI,gI,U,II){const q=nI.width,mI=nI.height;let NI,BI,J;const e=nI.data;switch(gI){case M.ImageKind.GRAYSCALE_1BPP:BI=0,NI=1,J=q+7>>3;break;case M.ImageKind.RGB_24BPP:BI=2,NI=8,J=q*3;break;case M.ImageKind.RGBA_32BPP:BI=6,NI=8,J=q*4;break;default:throw new Error("invalid format")}const w=new Uint8Array((1+J)*mI);let x=0,E=0;for(let W=0;W<mI;++W)w[x++]=0,w.set(e.subarray(E,E+J),x),E+=J,x+=J;if(gI===M.ImageKind.GRAYSCALE_1BPP&&II){x=0;for(let W=0;W<mI;W++){x++;for(let L=0;L<J;L++)w[x++]^=255}}const P=new Uint8Array([q>>24&255,q>>16&255,q>>8&255,q&255,mI>>24&255,mI>>16&255,mI>>8&255,mI&255,NI,BI,0,0,0]),iI=F(w),aI=I.length+g*3+P.length+iI.length,eI=new Uint8Array(aI);let A=0;return eI.set(I,A),A+=I.length,b("IHDR",P,eI,A),A+=g+P.length,b("IDATA",iI,eI,A),A+=g+iI.length,b("IEND",new Uint8Array(0),eI,A),C(eI,"image/png",U)}return function(nI,gI,U){const II=nI.kind===void 0?M.ImageKind.GRAYSCALE_1BPP:nI.kind;return YI(nI,II,gI,U)}}();class B{constructor(){this.fontSizeScale=1,this.fontWeight=p.fontWeight,this.fontSize=0,this.textMatrix=M.IDENTITY_MATRIX,this.fontMatrix=M.FONT_IDENTITY_MATRIX,this.leading=0,this.textRenderingMode=M.TextRenderingMode.FILL,this.textMatrixScale=1,this.x=0,this.y=0,this.lineX=0,this.lineY=0,this.charSpacing=0,this.wordSpacing=0,this.textHScale=1,this.textRise=0,this.fillColor=p.fillColor,this.strokeColor="#000000",this.fillAlpha=1,this.strokeAlpha=1,this.lineWidth=1,this.lineJoin="",this.lineCap="",this.miterLimit=0,this.dashArray=[],this.dashPhase=0,this.dependencies=[],this.activeClipUrl=null,this.clipGroup=null,this.maskId=""}clone(){return Object.create(this)}setCurrentPoint(g,o){this.x=g,this.y=o}}let Y=0,a=0,i=0;c.SVGGraphics=z=class{constructor(I,g,o=!1){(0,h.deprecated)("The SVG back-end is no longer maintained and *may* be removed in the future."),this.svgFactory=new h.DOMSVGFactory,this.current=new B,this.transformMatrix=M.IDENTITY_MATRIX,this.transformStack=[],this.extraStack=[],this.commonObjs=I,this.objs=g,this.pendingClip=null,this.pendingEOFill=!1,this.embedFonts=!1,this.embeddedFonts=Object.create(null),this.cssStyle=null,this.forceDataSchema=!!o,this._operatorIdMapping=[];for(const X in M.OPS)this._operatorIdMapping[M.OPS[X]]=X}save(){this.transformStack.push(this.transformMatrix);const I=this.current;this.extraStack.push(I),this.current=I.clone()}restore(){this.transformMatrix=this.transformStack.pop(),this.current=this.extraStack.pop(),this.pendingClip=null,this.tgrp=null}group(I){this.save(),this.executeOpTree(I),this.restore()}loadDependencies(I){const g=I.fnArray,o=I.argsArray;for(let X=0,b=g.length;X<b;X++)if(g[X]===M.OPS.dependency)for(const N of o[X]){const F=N.startsWith("g_")?this.commonObjs:this.objs,hI=new Promise(YI=>{F.get(N,YI)});this.current.dependencies.push(hI)}return Promise.all(this.current.dependencies)}transform(I,g,o,X,b,N){const F=[I,g,o,X,b,N];this.transformMatrix=M.Util.transform(this.transformMatrix,F),this.tgrp=null}getSVG(I,g){this.viewport=g;const o=this._initialize(g);return this.loadDependencies(I).then(()=>(this.transformMatrix=M.IDENTITY_MATRIX,this.executeOpTree(this.convertOpList(I)),o))}convertOpList(I){const g=this._operatorIdMapping,o=I.argsArray,X=I.fnArray,b=[];for(let N=0,F=X.length;N<F;N++){const hI=X[N];b.push({fnId:hI,fn:g[hI],args:o[N]})}return T(b)}executeOpTree(I){for(const g of I){const o=g.fn,X=g.fnId,b=g.args;switch(X|0){case M.OPS.beginText:this.beginText();break;case M.OPS.dependency:break;case M.OPS.setLeading:this.setLeading(b);break;case M.OPS.setLeadingMoveText:this.setLeadingMoveText(b[0],b[1]);break;case M.OPS.setFont:this.setFont(b);break;case M.OPS.showText:this.showText(b[0]);break;case M.OPS.showSpacedText:this.showText(b[0]);break;case M.OPS.endText:this.endText();break;case M.OPS.moveText:this.moveText(b[0],b[1]);break;case M.OPS.setCharSpacing:this.setCharSpacing(b[0]);break;case M.OPS.setWordSpacing:this.setWordSpacing(b[0]);break;case M.OPS.setHScale:this.setHScale(b[0]);break;case M.OPS.setTextMatrix:this.setTextMatrix(b[0],b[1],b[2],b[3],b[4],b[5]);break;case M.OPS.setTextRise:this.setTextRise(b[0]);break;case M.OPS.setTextRenderingMode:this.setTextRenderingMode(b[0]);break;case M.OPS.setLineWidth:this.setLineWidth(b[0]);break;case M.OPS.setLineJoin:this.setLineJoin(b[0]);break;case M.OPS.setLineCap:this.setLineCap(b[0]);break;case M.OPS.setMiterLimit:this.setMiterLimit(b[0]);break;case M.OPS.setFillRGBColor:this.setFillRGBColor(b[0],b[1],b[2]);break;case M.OPS.setStrokeRGBColor:this.setStrokeRGBColor(b[0],b[1],b[2]);break;case M.OPS.setStrokeColorN:this.setStrokeColorN(b);break;case M.OPS.setFillColorN:this.setFillColorN(b);break;case M.OPS.shadingFill:this.shadingFill(b[0]);break;case M.OPS.setDash:this.setDash(b[0],b[1]);break;case M.OPS.setRenderingIntent:this.setRenderingIntent(b[0]);break;case M.OPS.setFlatness:this.setFlatness(b[0]);break;case M.OPS.setGState:this.setGState(b[0]);break;case M.OPS.fill:this.fill();break;case M.OPS.eoFill:this.eoFill();break;case M.OPS.stroke:this.stroke();break;case M.OPS.fillStroke:this.fillStroke();break;case M.OPS.eoFillStroke:this.eoFillStroke();break;case M.OPS.clip:this.clip("nonzero");break;case M.OPS.eoClip:this.clip("evenodd");break;case M.OPS.paintSolidColorImageMask:this.paintSolidColorImageMask();break;case M.OPS.paintImageXObject:this.paintImageXObject(b[0]);break;case M.OPS.paintInlineImageXObject:this.paintInlineImageXObject(b[0]);break;case M.OPS.paintImageMaskXObject:this.paintImageMaskXObject(b[0]);break;case M.OPS.paintFormXObjectBegin:this.paintFormXObjectBegin(b[0],b[1]);break;case M.OPS.paintFormXObjectEnd:this.paintFormXObjectEnd();break;case M.OPS.closePath:this.closePath();break;case M.OPS.closeStroke:this.closeStroke();break;case M.OPS.closeFillStroke:this.closeFillStroke();break;case M.OPS.closeEOFillStroke:this.closeEOFillStroke();break;case M.OPS.nextLine:this.nextLine();break;case M.OPS.transform:this.transform(b[0],b[1],b[2],b[3],b[4],b[5]);break;case M.OPS.constructPath:this.constructPath(b[0],b[1]);break;case M.OPS.endPath:this.endPath();break;case 92:this.group(g.items);break;default:(0,M.warn)(`Unimplemented operator ${o}`);break}}}setWordSpacing(I){this.current.wordSpacing=I}setCharSpacing(I){this.current.charSpacing=I}nextLine(){this.moveText(0,this.current.leading)}setTextMatrix(I,g,o,X,b,N){const F=this.current;F.textMatrix=F.lineMatrix=[I,g,o,X,b,N],F.textMatrixScale=Math.hypot(I,g),F.x=F.lineX=0,F.y=F.lineY=0,F.xcoords=[],F.ycoords=[],F.tspan=this.svgFactory.createElement("svg:tspan"),F.tspan.setAttributeNS(null,"font-family",F.fontFamily),F.tspan.setAttributeNS(null,"font-size",`${r(F.fontSize)}px`),F.tspan.setAttributeNS(null,"y",r(-F.y)),F.txtElement=this.svgFactory.createElement("svg:text"),F.txtElement.append(F.tspan)}beginText(){const I=this.current;I.x=I.lineX=0,I.y=I.lineY=0,I.textMatrix=M.IDENTITY_MATRIX,I.lineMatrix=M.IDENTITY_MATRIX,I.textMatrixScale=1,I.tspan=this.svgFactory.createElement("svg:tspan"),I.txtElement=this.svgFactory.createElement("svg:text"),I.txtgrp=this.svgFactory.createElement("svg:g"),I.xcoords=[],I.ycoords=[]}moveText(I,g){const o=this.current;o.x=o.lineX+=I,o.y=o.lineY+=g,o.xcoords=[],o.ycoords=[],o.tspan=this.svgFactory.createElement("svg:tspan"),o.tspan.setAttributeNS(null,"font-family",o.fontFamily),o.tspan.setAttributeNS(null,"font-size",`${r(o.fontSize)}px`),o.tspan.setAttributeNS(null,"y",r(-o.y))}showText(I){const g=this.current,o=g.font,X=g.fontSize;if(X===0)return;const b=g.fontSizeScale,N=g.charSpacing,F=g.wordSpacing,hI=g.fontDirection,YI=g.textHScale*hI,nI=o.vertical,gI=nI?1:-1,U=o.defaultVMetrics,II=X*g.fontMatrix[0];let q=0;for(const BI of I){if(BI===null){q+=hI*F;continue}else if(typeof BI=="number"){q+=gI*BI*X/1e3;continue}const J=(BI.isSpace?F:0)+N,e=BI.fontChar;let w,x,E=BI.width;if(nI){let iI;const aI=BI.vmetric||U;iI=BI.vmetric?aI[1]:E*.5,iI=-iI*II;const eI=aI[2]*II;E=aI?-aI[0]:E,w=iI/b,x=(q+eI)/b}else w=q/b,x=0;(BI.isInFont||o.missingFile)&&(g.xcoords.push(g.x+w),nI&&g.ycoords.push(-g.y+x),g.tspan.textContent+=e);let P;nI?P=E*II-J*hI:P=E*II+J*hI,q+=P}g.tspan.setAttributeNS(null,"x",g.xcoords.map(r).join(" ")),nI?g.tspan.setAttributeNS(null,"y",g.ycoords.map(r).join(" ")):g.tspan.setAttributeNS(null,"y",r(-g.y)),nI?g.y-=q:g.x+=q*YI,g.tspan.setAttributeNS(null,"font-family",g.fontFamily),g.tspan.setAttributeNS(null,"font-size",`${r(g.fontSize)}px`),g.fontStyle!==p.fontStyle&&g.tspan.setAttributeNS(null,"font-style",g.fontStyle),g.fontWeight!==p.fontWeight&&g.tspan.setAttributeNS(null,"font-weight",g.fontWeight);const mI=g.textRenderingMode&M.TextRenderingMode.FILL_STROKE_MASK;if(mI===M.TextRenderingMode.FILL||mI===M.TextRenderingMode.FILL_STROKE?(g.fillColor!==p.fillColor&&g.tspan.setAttributeNS(null,"fill",g.fillColor),g.fillAlpha<1&&g.tspan.setAttributeNS(null,"fill-opacity",g.fillAlpha)):g.textRenderingMode===M.TextRenderingMode.ADD_TO_PATH?g.tspan.setAttributeNS(null,"fill","transparent"):g.tspan.setAttributeNS(null,"fill","none"),mI===M.TextRenderingMode.STROKE||mI===M.TextRenderingMode.FILL_STROKE){const BI=1/(g.textMatrixScale||1);this._setStrokeAttributes(g.tspan,BI)}let NI=g.textMatrix;g.textRise!==0&&(NI=NI.slice(),NI[5]+=g.textRise),g.txtElement.setAttributeNS(null,"transform",`${Z(NI)} scale(${r(YI)}, -1)`),g.txtElement.setAttributeNS(j,"xml:space","preserve"),g.txtElement.append(g.tspan),g.txtgrp.append(g.txtElement),this._ensureTransformGroup().append(g.txtElement)}setLeadingMoveText(I,g){this.setLeading(-g),this.moveText(I,g)}addFontStyle(I){if(!I.data)throw new Error('addFontStyle: No font data available, ensure that the "fontExtraProperties" API parameter is set.');this.cssStyle||(this.cssStyle=this.svgFactory.createElement("svg:style"),this.cssStyle.setAttributeNS(null,"type","text/css"),this.defs.append(this.cssStyle));const g=C(I.data,I.mimetype,this.forceDataSchema);this.cssStyle.textContent+=`@font-face { font-family: "${I.loadedName}"; src: url(${g}); }
`}setFont(I){const g=this.current,o=this.commonObjs.get(I[0]);let X=I[1];g.font=o,this.embedFonts&&!o.missingFile&&!this.embeddedFonts[o.loadedName]&&(this.addFontStyle(o),this.embeddedFonts[o.loadedName]=o),g.fontMatrix=o.fontMatrix||M.FONT_IDENTITY_MATRIX;let b="normal";o.black?b="900":o.bold&&(b="bold");const N=o.italic?"italic":"normal";X<0?(X=-X,g.fontDirection=-1):g.fontDirection=1,g.fontSize=X,g.fontFamily=o.loadedName,g.fontWeight=b,g.fontStyle=N,g.tspan=this.svgFactory.createElement("svg:tspan"),g.tspan.setAttributeNS(null,"y",r(-g.y)),g.xcoords=[],g.ycoords=[]}endText(){var I;const g=this.current;g.textRenderingMode&M.TextRenderingMode.ADD_TO_PATH_FLAG&&(I=g.txtElement)!=null&&I.hasChildNodes()&&(g.element=g.txtElement,this.clip("nonzero"),this.endPath())}setLineWidth(I){I>0&&(this.current.lineWidth=I)}setLineCap(I){this.current.lineCap=m[I]}setLineJoin(I){this.current.lineJoin=d[I]}setMiterLimit(I){this.current.miterLimit=I}setStrokeAlpha(I){this.current.strokeAlpha=I}setStrokeRGBColor(I,g,o){this.current.strokeColor=M.Util.makeHexColor(I,g,o)}setFillAlpha(I){this.current.fillAlpha=I}setFillRGBColor(I,g,o){this.current.fillColor=M.Util.makeHexColor(I,g,o),this.current.tspan=this.svgFactory.createElement("svg:tspan"),this.current.xcoords=[],this.current.ycoords=[]}setStrokeColorN(I){this.current.strokeColor=this._makeColorN_Pattern(I)}setFillColorN(I){this.current.fillColor=this._makeColorN_Pattern(I)}shadingFill(I){const g=this.viewport.width,o=this.viewport.height,X=M.Util.inverseTransform(this.transformMatrix),b=M.Util.applyTransform([0,0],X),N=M.Util.applyTransform([0,o],X),F=M.Util.applyTransform([g,0],X),hI=M.Util.applyTransform([g,o],X),YI=Math.min(b[0],N[0],F[0],hI[0]),nI=Math.min(b[1],N[1],F[1],hI[1]),gI=Math.max(b[0],N[0],F[0],hI[0]),U=Math.max(b[1],N[1],F[1],hI[1]),II=this.svgFactory.createElement("svg:rect");II.setAttributeNS(null,"x",YI),II.setAttributeNS(null,"y",nI),II.setAttributeNS(null,"width",gI-YI),II.setAttributeNS(null,"height",U-nI),II.setAttributeNS(null,"fill",this._makeShadingPattern(I)),this.current.fillAlpha<1&&II.setAttributeNS(null,"fill-opacity",this.current.fillAlpha),this._ensureTransformGroup().append(II)}_makeColorN_Pattern(I){return I[0]==="TilingPattern"?this._makeTilingPattern(I):this._makeShadingPattern(I)}_makeTilingPattern(I){const g=I[1],o=I[2],X=I[3]||M.IDENTITY_MATRIX,[b,N,F,hI]=I[4],YI=I[5],nI=I[6],gI=I[7],U=`shading${i++}`,[II,q,mI,NI]=M.Util.normalizeRect([...M.Util.applyTransform([b,N],X),...M.Util.applyTransform([F,hI],X)]),[BI,J]=M.Util.singularValueDecompose2dScale(X),e=YI*BI,w=nI*J,x=this.svgFactory.createElement("svg:pattern");x.setAttributeNS(null,"id",U),x.setAttributeNS(null,"patternUnits","userSpaceOnUse"),x.setAttributeNS(null,"width",e),x.setAttributeNS(null,"height",w),x.setAttributeNS(null,"x",`${II}`),x.setAttributeNS(null,"y",`${q}`);const E=this.svg,P=this.transformMatrix,iI=this.current.fillColor,aI=this.current.strokeColor,eI=this.svgFactory.create(mI-II,NI-q);if(this.svg=eI,this.transformMatrix=X,gI===2){const A=M.Util.makeHexColor(...g);this.current.fillColor=A,this.current.strokeColor=A}return this.executeOpTree(this.convertOpList(o)),this.svg=E,this.transformMatrix=P,this.current.fillColor=iI,this.current.strokeColor=aI,x.append(eI.childNodes[0]),this.defs.append(x),`url(#${U})`}_makeShadingPattern(I){switch(typeof I=="string"&&(I=this.objs.get(I)),I[0]){case"RadialAxial":const g=`shading${i++}`,o=I[3];let X;switch(I[1]){case"axial":const b=I[4],N=I[5];X=this.svgFactory.createElement("svg:linearGradient"),X.setAttributeNS(null,"id",g),X.setAttributeNS(null,"gradientUnits","userSpaceOnUse"),X.setAttributeNS(null,"x1",b[0]),X.setAttributeNS(null,"y1",b[1]),X.setAttributeNS(null,"x2",N[0]),X.setAttributeNS(null,"y2",N[1]);break;case"radial":const F=I[4],hI=I[5],YI=I[6],nI=I[7];X=this.svgFactory.createElement("svg:radialGradient"),X.setAttributeNS(null,"id",g),X.setAttributeNS(null,"gradientUnits","userSpaceOnUse"),X.setAttributeNS(null,"cx",hI[0]),X.setAttributeNS(null,"cy",hI[1]),X.setAttributeNS(null,"r",nI),X.setAttributeNS(null,"fx",F[0]),X.setAttributeNS(null,"fy",F[1]),X.setAttributeNS(null,"fr",YI);break;default:throw new Error(`Unknown RadialAxial type: ${I[1]}`)}for(const b of o){const N=this.svgFactory.createElement("svg:stop");N.setAttributeNS(null,"offset",b[0]),N.setAttributeNS(null,"stop-color",b[1]),X.append(N)}return this.defs.append(X),`url(#${g})`;case"Mesh":return(0,M.warn)("Unimplemented pattern Mesh"),null;case"Dummy":return"hotpink";default:throw new Error(`Unknown IR type: ${I[0]}`)}}setDash(I,g){this.current.dashArray=I,this.current.dashPhase=g}constructPath(I,g){const o=this.current;let X=o.x,b=o.y,N=[],F=0;for(const hI of I)switch(hI|0){case M.OPS.rectangle:X=g[F++],b=g[F++];const YI=g[F++],nI=g[F++],gI=X+YI,U=b+nI;N.push("M",r(X),r(b),"L",r(gI),r(b),"L",r(gI),r(U),"L",r(X),r(U),"Z");break;case M.OPS.moveTo:X=g[F++],b=g[F++],N.push("M",r(X),r(b));break;case M.OPS.lineTo:X=g[F++],b=g[F++],N.push("L",r(X),r(b));break;case M.OPS.curveTo:X=g[F+4],b=g[F+5],N.push("C",r(g[F]),r(g[F+1]),r(g[F+2]),r(g[F+3]),r(X),r(b)),F+=6;break;case M.OPS.curveTo2:N.push("C",r(X),r(b),r(g[F]),r(g[F+1]),r(g[F+2]),r(g[F+3])),X=g[F+2],b=g[F+3],F+=4;break;case M.OPS.curveTo3:X=g[F+2],b=g[F+3],N.push("C",r(g[F]),r(g[F+1]),r(X),r(b),r(X),r(b)),F+=4;break;case M.OPS.closePath:N.push("Z");break}N=N.join(" "),o.path&&I.length>0&&I[0]!==M.OPS.rectangle&&I[0]!==M.OPS.moveTo?N=o.path.getAttributeNS(null,"d")+N:(o.path=this.svgFactory.createElement("svg:path"),this._ensureTransformGroup().append(o.path)),o.path.setAttributeNS(null,"d",N),o.path.setAttributeNS(null,"fill","none"),o.element=o.path,o.setCurrentPoint(X,b)}endPath(){const I=this.current;if(I.path=null,!this.pendingClip)return;if(!I.element){this.pendingClip=null;return}const g=`clippath${Y++}`,o=this.svgFactory.createElement("svg:clipPath");o.setAttributeNS(null,"id",g),o.setAttributeNS(null,"transform",Z(this.transformMatrix));const X=I.element.cloneNode(!0);if(this.pendingClip==="evenodd"?X.setAttributeNS(null,"clip-rule","evenodd"):X.setAttributeNS(null,"clip-rule","nonzero"),this.pendingClip=null,o.append(X),this.defs.append(o),I.activeClipUrl){I.clipGroup=null;for(const b of this.extraStack)b.clipGroup=null;o.setAttributeNS(null,"clip-path",I.activeClipUrl)}I.activeClipUrl=`url(#${g})`,this.tgrp=null}clip(I){this.pendingClip=I}closePath(){const I=this.current;if(I.path){const g=`${I.path.getAttributeNS(null,"d")}Z`;I.path.setAttributeNS(null,"d",g)}}setLeading(I){this.current.leading=-I}setTextRise(I){this.current.textRise=I}setTextRenderingMode(I){this.current.textRenderingMode=I}setHScale(I){this.current.textHScale=I/100}setRenderingIntent(I){}setFlatness(I){}setGState(I){for(const[g,o]of I)switch(g){case"LW":this.setLineWidth(o);break;case"LC":this.setLineCap(o);break;case"LJ":this.setLineJoin(o);break;case"ML":this.setMiterLimit(o);break;case"D":this.setDash(o[0],o[1]);break;case"RI":this.setRenderingIntent(o);break;case"FL":this.setFlatness(o);break;case"Font":this.setFont(o);break;case"CA":this.setStrokeAlpha(o);break;case"ca":this.setFillAlpha(o);break;default:(0,M.warn)(`Unimplemented graphic state operator ${g}`);break}}fill(){const I=this.current;I.element&&(I.element.setAttributeNS(null,"fill",I.fillColor),I.element.setAttributeNS(null,"fill-opacity",I.fillAlpha),this.endPath())}stroke(){const I=this.current;I.element&&(this._setStrokeAttributes(I.element),I.element.setAttributeNS(null,"fill","none"),this.endPath())}_setStrokeAttributes(I,g=1){const o=this.current;let X=o.dashArray;g!==1&&X.length>0&&(X=X.map(function(b){return g*b})),I.setAttributeNS(null,"stroke",o.strokeColor),I.setAttributeNS(null,"stroke-opacity",o.strokeAlpha),I.setAttributeNS(null,"stroke-miterlimit",r(o.miterLimit)),I.setAttributeNS(null,"stroke-linecap",o.lineCap),I.setAttributeNS(null,"stroke-linejoin",o.lineJoin),I.setAttributeNS(null,"stroke-width",r(g*o.lineWidth)+"px"),I.setAttributeNS(null,"stroke-dasharray",X.map(r).join(" ")),I.setAttributeNS(null,"stroke-dashoffset",r(g*o.dashPhase)+"px")}eoFill(){this.current.element&&this.current.element.setAttributeNS(null,"fill-rule","evenodd"),this.fill()}fillStroke(){this.stroke(),this.fill()}eoFillStroke(){this.current.element&&this.current.element.setAttributeNS(null,"fill-rule","evenodd"),this.fillStroke()}closeStroke(){this.closePath(),this.stroke()}closeFillStroke(){this.closePath(),this.fillStroke()}closeEOFillStroke(){this.closePath(),this.eoFillStroke()}paintSolidColorImageMask(){const I=this.svgFactory.createElement("svg:rect");I.setAttributeNS(null,"x","0"),I.setAttributeNS(null,"y","0"),I.setAttributeNS(null,"width","1px"),I.setAttributeNS(null,"height","1px"),I.setAttributeNS(null,"fill",this.current.fillColor),this._ensureTransformGroup().append(I)}paintImageXObject(I){const g=I.startsWith("g_")?this.commonObjs.get(I):this.objs.get(I);if(!g){(0,M.warn)(`Dependent image with object ID ${I} is not ready yet`);return}this.paintInlineImageXObject(g)}paintInlineImageXObject(I,g){const o=I.width,X=I.height,b=l(I,this.forceDataSchema,!!g),N=this.svgFactory.createElement("svg:rect");N.setAttributeNS(null,"x","0"),N.setAttributeNS(null,"y","0"),N.setAttributeNS(null,"width",r(o)),N.setAttributeNS(null,"height",r(X)),this.current.element=N,this.clip("nonzero");const F=this.svgFactory.createElement("svg:image");F.setAttributeNS(D,"xlink:href",b),F.setAttributeNS(null,"x","0"),F.setAttributeNS(null,"y",r(-X)),F.setAttributeNS(null,"width",r(o)+"px"),F.setAttributeNS(null,"height",r(X)+"px"),F.setAttributeNS(null,"transform",`scale(${r(1/o)} ${r(-1/X)})`),g?g.append(F):this._ensureTransformGroup().append(F)}paintImageMaskXObject(I){const g=this.current,o=I.width,X=I.height,b=g.fillColor;g.maskId=`mask${a++}`;const N=this.svgFactory.createElement("svg:mask");N.setAttributeNS(null,"id",g.maskId);const F=this.svgFactory.createElement("svg:rect");F.setAttributeNS(null,"x","0"),F.setAttributeNS(null,"y","0"),F.setAttributeNS(null,"width",r(o)),F.setAttributeNS(null,"height",r(X)),F.setAttributeNS(null,"fill",b),F.setAttributeNS(null,"mask",`url(#${g.maskId})`),this.defs.append(N),this._ensureTransformGroup().append(F),this.paintInlineImageXObject(I,N)}paintFormXObjectBegin(I,g){if(Array.isArray(I)&&I.length===6&&this.transform(I[0],I[1],I[2],I[3],I[4],I[5]),g){const o=g[2]-g[0],X=g[3]-g[1],b=this.svgFactory.createElement("svg:rect");b.setAttributeNS(null,"x",g[0]),b.setAttributeNS(null,"y",g[1]),b.setAttributeNS(null,"width",r(o)),b.setAttributeNS(null,"height",r(X)),this.current.element=b,this.clip("nonzero"),this.endPath()}}paintFormXObjectEnd(){}_initialize(I){const g=this.svgFactory.create(I.width,I.height),o=this.svgFactory.createElement("svg:defs");g.append(o),this.defs=o;const X=this.svgFactory.createElement("svg:g");return X.setAttributeNS(null,"transform",Z(I.transform)),g.append(X),this.svg=X,g}_ensureClipGroup(){if(!this.current.clipGroup){const I=this.svgFactory.createElement("svg:g");I.setAttributeNS(null,"clip-path",this.current.activeClipUrl),this.svg.append(I),this.current.clipGroup=I}return this.current.clipGroup}_ensureTransformGroup(){return this.tgrp||(this.tgrp=this.svgFactory.createElement("svg:g"),this.tgrp.setAttributeNS(null,"transform",Z(this.transformMatrix)),this.current.activeClipUrl?this._ensureClipGroup().append(this.tgrp):this.svg.append(this.tgrp)),this.tgrp}}}},(wI,c,$)=>{Object.defineProperty(c,"__esModule",{value:!0}),c.PDFNodeStream=void 0;var h=$(1),M=$(33);const _=require$$5,z=require$$5,T=require$$5,r=require$$5,Z=/^file:\/\/\/[a-zA-Z]:\//;function p(a){const i=r.parse(a);return i.protocol==="file:"||i.host?i:/^[a-z]:[/\\]/i.test(a)?r.parse(`file:///${a}`):(i.host||(i.protocol="file:"),i)}class j{constructor(i){this.source=i,this.url=p(i.url),this.isHttp=this.url.protocol==="http:"||this.url.protocol==="https:",this.isFsUrl=this.url.protocol==="file:",this.httpHeaders=this.isHttp&&i.httpHeaders||{},this._fullRequestReader=null,this._rangeRequestReaders=[]}get _progressiveDataLength(){var i;return((i=this._fullRequestReader)==null?void 0:i._loaded)??0}getFullReader(){return(0,h.assert)(!this._fullRequestReader,"PDFNodeStream.getFullReader can only be called once."),this._fullRequestReader=this.isFsUrl?new B(this):new C(this),this._fullRequestReader}getRangeReader(i,I){if(I<=this._progressiveDataLength)return null;const g=this.isFsUrl?new Y(this,i,I):new l(this,i,I);return this._rangeRequestReaders.push(g),g}cancelAllRequests(i){this._fullRequestReader&&this._fullRequestReader.cancel(i);for(const I of this._rangeRequestReaders.slice(0))I.cancel(i)}}c.PDFNodeStream=j;class D{constructor(i){this._url=i.url,this._done=!1,this._storedError=null,this.onProgress=null;const I=i.source;this._contentLength=I.length,this._loaded=0,this._filename=null,this._disableRange=I.disableRange||!1,this._rangeChunkSize=I.rangeChunkSize,!this._rangeChunkSize&&!this._disableRange&&(this._disableRange=!0),this._isStreamingSupported=!I.disableStream,this._isRangeSupported=!I.disableRange,this._readableStream=null,this._readCapability=(0,h.createPromiseCapability)(),this._headersCapability=(0,h.createPromiseCapability)()}get headersReady(){return this._headersCapability.promise}get filename(){return this._filename}get contentLength(){return this._contentLength}get isRangeSupported(){return this._isRangeSupported}get isStreamingSupported(){return this._isStreamingSupported}async read(){if(await this._readCapability.promise,this._done)return{value:void 0,done:!0};if(this._storedError)throw this._storedError;const i=this._readableStream.read();return i===null?(this._readCapability=(0,h.createPromiseCapability)(),this.read()):(this._loaded+=i.length,this.onProgress&&this.onProgress({loaded:this._loaded,total:this._contentLength}),{value:new Uint8Array(i).buffer,done:!1})}cancel(i){if(!this._readableStream){this._error(i);return}this._readableStream.destroy(i)}_error(i){this._storedError=i,this._readCapability.resolve()}_setReadableStream(i){this._readableStream=i,i.on("readable",()=>{this._readCapability.resolve()}),i.on("end",()=>{i.destroy(),this._done=!0,this._readCapability.resolve()}),i.on("error",I=>{this._error(I)}),!this._isStreamingSupported&&this._isRangeSupported&&this._error(new h.AbortException("streaming is disabled")),this._storedError&&this._readableStream.destroy(this._storedError)}}class m{constructor(i){this._url=i.url,this._done=!1,this._storedError=null,this.onProgress=null,this._loaded=0,this._readableStream=null,this._readCapability=(0,h.createPromiseCapability)();const I=i.source;this._isStreamingSupported=!I.disableStream}get isStreamingSupported(){return this._isStreamingSupported}async read(){if(await this._readCapability.promise,this._done)return{value:void 0,done:!0};if(this._storedError)throw this._storedError;const i=this._readableStream.read();return i===null?(this._readCapability=(0,h.createPromiseCapability)(),this.read()):(this._loaded+=i.length,this.onProgress&&this.onProgress({loaded:this._loaded}),{value:new Uint8Array(i).buffer,done:!1})}cancel(i){if(!this._readableStream){this._error(i);return}this._readableStream.destroy(i)}_error(i){this._storedError=i,this._readCapability.resolve()}_setReadableStream(i){this._readableStream=i,i.on("readable",()=>{this._readCapability.resolve()}),i.on("end",()=>{i.destroy(),this._done=!0,this._readCapability.resolve()}),i.on("error",I=>{this._error(I)}),this._storedError&&this._readableStream.destroy(this._storedError)}}function d(a,i){return{protocol:a.protocol,auth:a.auth,host:a.hostname,port:a.port,path:a.path,method:"GET",headers:i}}class C extends D{constructor(i){super(i);const I=g=>{if(g.statusCode===404){const N=new h.MissingPDFException(`Missing PDF "${this._url}".`);this._storedError=N,this._headersCapability.reject(N);return}this._headersCapability.resolve(),this._setReadableStream(g);const o=N=>this._readableStream.headers[N.toLowerCase()],{allowRangeRequests:X,suggestedLength:b}=(0,M.validateRangeRequestCapabilities)({getResponseHeader:o,isHttp:i.isHttp,rangeChunkSize:this._rangeChunkSize,disableRange:this._disableRange});this._isRangeSupported=X,this._contentLength=b||this._contentLength,this._filename=(0,M.extractFilenameFromHeader)(o)};this._request=null,this._url.protocol==="http:"?this._request=z.request(d(this._url,i.httpHeaders),I):this._request=T.request(d(this._url,i.httpHeaders),I),this._request.on("error",g=>{this._storedError=g,this._headersCapability.reject(g)}),this._request.end()}}class l extends m{constructor(i,I,g){super(i),this._httpHeaders={};for(const X in i.httpHeaders){const b=i.httpHeaders[X];typeof b>"u"||(this._httpHeaders[X]=b)}this._httpHeaders.Range=`bytes=${I}-${g-1}`;const o=X=>{if(X.statusCode===404){const b=new h.MissingPDFException(`Missing PDF "${this._url}".`);this._storedError=b;return}this._setReadableStream(X)};this._request=null,this._url.protocol==="http:"?this._request=z.request(d(this._url,this._httpHeaders),o):this._request=T.request(d(this._url,this._httpHeaders),o),this._request.on("error",X=>{this._storedError=X}),this._request.end()}}class B extends D{constructor(i){super(i);let I=decodeURIComponent(this._url.path);Z.test(this._url.href)&&(I=I.replace(/^\//,"")),_.lstat(I,(g,o)=>{if(g){g.code==="ENOENT"&&(g=new h.MissingPDFException(`Missing PDF "${I}".`)),this._storedError=g,this._headersCapability.reject(g);return}this._contentLength=o.size,this._setReadableStream(_.createReadStream(I)),this._headersCapability.resolve()})}}class Y extends m{constructor(i,I,g){super(i);let o=decodeURIComponent(this._url.path);Z.test(this._url.href)&&(o=o.replace(/^\//,"")),this._setReadableStream(_.createReadStream(o,{start:I,end:g-1}))}}},(wI,c,$)=>{Object.defineProperty(c,"__esModule",{value:!0}),c.createResponseStatusError=r,c.extractFilenameFromHeader=T,c.validateRangeRequestCapabilities=z,c.validateResponseStatus=Z;var h=$(1),M=$(34),_=$(8);function z({getResponseHeader:p,isHttp:j,rangeChunkSize:D,disableRange:m}){const d={allowRangeRequests:!1,suggestedLength:void 0},C=parseInt(p("Content-Length"),10);return!Number.isInteger(C)||(d.suggestedLength=C,C<=2*D)||m||!j||p("Accept-Ranges")!=="bytes"||(p("Content-Encoding")||"identity")!=="identity"||(d.allowRangeRequests=!0),d}function T(p){const j=p("Content-Disposition");if(j){let D=(0,M.getFilenameFromContentDispositionHeader)(j);if(D.includes("%"))try{D=decodeURIComponent(D)}catch{}if((0,_.isPdfFile)(D))return D}return null}function r(p,j){return p===404||p===0&&j.startsWith("file:")?new h.MissingPDFException('Missing PDF "'+j+'".'):new h.UnexpectedResponseException(`Unexpected server response (${p}) while retrieving PDF "${j}".`,p)}function Z(p){return p===200||p===206}},(wI,c,$)=>{Object.defineProperty(c,"__esModule",{value:!0}),c.getFilenameFromContentDispositionHeader=M;var h=$(1);function M(_){let z=!0,T=r("filename\\*","i").exec(_);if(T){T=T[1];let C=D(T);return C=unescape(C),C=m(C),C=d(C),p(C)}if(T=j(_),T){const C=d(T);return p(C)}if(T=r("filename","i").exec(_),T){T=T[1];let C=D(T);return C=d(C),p(C)}function r(C,l){return new RegExp("(?:^|;)\\s*"+C+'\\s*=\\s*([^";\\s][^;\\s]*|"(?:[^"\\\\]|\\\\"?)+"?)',l)}function Z(C,l){if(C){if(!/^[\x00-\xFF]+$/.test(l))return l;try{const B=new TextDecoder(C,{fatal:!0}),Y=(0,h.stringToBytes)(l);l=B.decode(Y),z=!1}catch{}}return l}function p(C){return z&&/[\x80-\xff]/.test(C)&&(C=Z("utf-8",C),z&&(C=Z("iso-8859-1",C))),C}function j(C){const l=[];let B;const Y=r("filename\\*((?!0\\d)\\d+)(\\*?)","ig");for(;(B=Y.exec(C))!==null;){let[,i,I,g]=B;if(i=parseInt(i,10),i in l){if(i===0)break;continue}l[i]=[I,g]}const a=[];for(let i=0;i<l.length&&i in l;++i){let[I,g]=l[i];g=D(g),I&&(g=unescape(g),i===0&&(g=m(g))),a.push(g)}return a.join("")}function D(C){if(C.startsWith('"')){const l=C.slice(1).split('\\"');for(let B=0;B<l.length;++B){const Y=l[B].indexOf('"');Y!==-1&&(l[B]=l[B].slice(0,Y),l.length=B+1),l[B]=l[B].replace(/\\(.)/g,"$1")}C=l.join('"')}return C}function m(C){const l=C.indexOf("'");if(l===-1)return C;const B=C.slice(0,l),Y=C.slice(l+1).replace(/^[^']*'/,"");return Z(B,Y)}function d(C){return!C.startsWith("=?")||/[\x00-\x19\x80-\xff]/.test(C)?C:C.replace(/=\?([\w-]*)\?([QqBb])\?((?:[^?]|\?(?!=))*)\?=/g,function(l,B,Y,a){if(Y==="q"||Y==="Q")return a=a.replace(/_/g," "),a=a.replace(/=([0-9a-fA-F]{2})/g,function(i,I){return String.fromCharCode(parseInt(I,16))}),Z(B,a);try{a=atob(a)}catch{}return Z(B,a)})}return""}},(wI,c,$)=>{Object.defineProperty(c,"__esModule",{value:!0}),c.PDFNetworkStream=void 0;var h=$(1),M=$(33);const _=200,z=206;function T(D){const m=D.response;return typeof m!="string"?m:(0,h.stringToBytes)(m).buffer}class r{constructor(m,d={}){this.url=m,this.isHttp=/^https?:/i.test(m),this.httpHeaders=this.isHttp&&d.httpHeaders||Object.create(null),this.withCredentials=d.withCredentials||!1,this.getXhr=d.getXhr||function(){return new XMLHttpRequest},this.currXhrId=0,this.pendingRequests=Object.create(null)}requestRange(m,d,C){const l={begin:m,end:d};for(const B in C)l[B]=C[B];return this.request(l)}requestFull(m){return this.request(m)}request(m){const d=this.getXhr(),C=this.currXhrId++,l=this.pendingRequests[C]={xhr:d};d.open("GET",this.url),d.withCredentials=this.withCredentials;for(const B in this.httpHeaders){const Y=this.httpHeaders[B];typeof Y>"u"||d.setRequestHeader(B,Y)}return this.isHttp&&"begin"in m&&"end"in m?(d.setRequestHeader("Range",`bytes=${m.begin}-${m.end-1}`),l.expectedStatus=z):l.expectedStatus=_,d.responseType="arraybuffer",m.onError&&(d.onerror=function(B){m.onError(d.status)}),d.onreadystatechange=this.onStateChange.bind(this,C),d.onprogress=this.onProgress.bind(this,C),l.onHeadersReceived=m.onHeadersReceived,l.onDone=m.onDone,l.onError=m.onError,l.onProgress=m.onProgress,d.send(null),C}onProgress(m,d){var C;const l=this.pendingRequests[m];l&&((C=l.onProgress)==null||C.call(l,d))}onStateChange(m,d){var C,l,B;const Y=this.pendingRequests[m];if(!Y)return;const a=Y.xhr;if(a.readyState>=2&&Y.onHeadersReceived&&(Y.onHeadersReceived(),delete Y.onHeadersReceived),a.readyState!==4||!(m in this.pendingRequests))return;if(delete this.pendingRequests[m],a.status===0&&this.isHttp){(C=Y.onError)==null||C.call(Y,a.status);return}const i=a.status||_;if(!(i===_&&Y.expectedStatus===z)&&i!==Y.expectedStatus){(l=Y.onError)==null||l.call(Y,a.status);return}const I=T(a);if(i===z){const g=a.getResponseHeader("Content-Range"),o=/bytes (\d+)-(\d+)\/(\d+)/.exec(g);Y.onDone({begin:parseInt(o[1],10),chunk:I})}else I?Y.onDone({begin:0,chunk:I}):(B=Y.onError)==null||B.call(Y,a.status)}getRequestXhr(m){return this.pendingRequests[m].xhr}isPendingRequest(m){return m in this.pendingRequests}abortRequest(m){const d=this.pendingRequests[m].xhr;delete this.pendingRequests[m],d.abort()}}class Z{constructor(m){this._source=m,this._manager=new r(m.url,{httpHeaders:m.httpHeaders,withCredentials:m.withCredentials}),this._rangeChunkSize=m.rangeChunkSize,this._fullRequestReader=null,this._rangeRequestReaders=[]}_onRangeRequestReaderClosed(m){const d=this._rangeRequestReaders.indexOf(m);d>=0&&this._rangeRequestReaders.splice(d,1)}getFullReader(){return(0,h.assert)(!this._fullRequestReader,"PDFNetworkStream.getFullReader can only be called once."),this._fullRequestReader=new p(this._manager,this._source),this._fullRequestReader}getRangeReader(m,d){const C=new j(this._manager,m,d);return C.onClosed=this._onRangeRequestReaderClosed.bind(this),this._rangeRequestReaders.push(C),C}cancelAllRequests(m){var d;(d=this._fullRequestReader)==null||d.cancel(m);for(const C of this._rangeRequestReaders.slice(0))C.cancel(m)}}c.PDFNetworkStream=Z;class p{constructor(m,d){this._manager=m;const C={onHeadersReceived:this._onHeadersReceived.bind(this),onDone:this._onDone.bind(this),onError:this._onError.bind(this),onProgress:this._onProgress.bind(this)};this._url=d.url,this._fullRequestId=m.requestFull(C),this._headersReceivedCapability=(0,h.createPromiseCapability)(),this._disableRange=d.disableRange||!1,this._contentLength=d.length,this._rangeChunkSize=d.rangeChunkSize,!this._rangeChunkSize&&!this._disableRange&&(this._disableRange=!0),this._isStreamingSupported=!1,this._isRangeSupported=!1,this._cachedChunks=[],this._requests=[],this._done=!1,this._storedError=void 0,this._filename=null,this.onProgress=null}_onHeadersReceived(){const m=this._fullRequestId,d=this._manager.getRequestXhr(m),C=Y=>d.getResponseHeader(Y),{allowRangeRequests:l,suggestedLength:B}=(0,M.validateRangeRequestCapabilities)({getResponseHeader:C,isHttp:this._manager.isHttp,rangeChunkSize:this._rangeChunkSize,disableRange:this._disableRange});l&&(this._isRangeSupported=!0),this._contentLength=B||this._contentLength,this._filename=(0,M.extractFilenameFromHeader)(C),this._isRangeSupported&&this._manager.abortRequest(m),this._headersReceivedCapability.resolve()}_onDone(m){if(m&&(this._requests.length>0?this._requests.shift().resolve({value:m.chunk,done:!1}):this._cachedChunks.push(m.chunk)),this._done=!0,!(this._cachedChunks.length>0)){for(const d of this._requests)d.resolve({value:void 0,done:!0});this._requests.length=0}}_onError(m){this._storedError=(0,M.createResponseStatusError)(m,this._url),this._headersReceivedCapability.reject(this._storedError);for(const d of this._requests)d.reject(this._storedError);this._requests.length=0,this._cachedChunks.length=0}_onProgress(m){var d;(d=this.onProgress)==null||d.call(this,{loaded:m.loaded,total:m.lengthComputable?m.total:this._contentLength})}get filename(){return this._filename}get isRangeSupported(){return this._isRangeSupported}get isStreamingSupported(){return this._isStreamingSupported}get contentLength(){return this._contentLength}get headersReady(){return this._headersReceivedCapability.promise}async read(){if(this._storedError)throw this._storedError;if(this._cachedChunks.length>0)return{value:this._cachedChunks.shift(),done:!1};if(this._done)return{value:void 0,done:!0};const m=(0,h.createPromiseCapability)();return this._requests.push(m),m.promise}cancel(m){this._done=!0,this._headersReceivedCapability.reject(m);for(const d of this._requests)d.resolve({value:void 0,done:!0});this._requests.length=0,this._manager.isPendingRequest(this._fullRequestId)&&this._manager.abortRequest(this._fullRequestId),this._fullRequestReader=null}}class j{constructor(m,d,C){this._manager=m;const l={onDone:this._onDone.bind(this),onError:this._onError.bind(this),onProgress:this._onProgress.bind(this)};this._url=m.url,this._requestId=m.requestRange(d,C,l),this._requests=[],this._queuedChunk=null,this._done=!1,this._storedError=void 0,this.onProgress=null,this.onClosed=null}_close(){var m;(m=this.onClosed)==null||m.call(this,this)}_onDone(m){const d=m.chunk;this._requests.length>0?this._requests.shift().resolve({value:d,done:!1}):this._queuedChunk=d,this._done=!0;for(const C of this._requests)C.resolve({value:void 0,done:!0});this._requests.length=0,this._close()}_onError(m){this._storedError=(0,M.createResponseStatusError)(m,this._url);for(const d of this._requests)d.reject(this._storedError);this._requests.length=0,this._queuedChunk=null}_onProgress(m){var d;this.isStreamingSupported||(d=this.onProgress)==null||d.call(this,{loaded:m.loaded})}get isStreamingSupported(){return!1}async read(){if(this._storedError)throw this._storedError;if(this._queuedChunk!==null){const d=this._queuedChunk;return this._queuedChunk=null,{value:d,done:!1}}if(this._done)return{value:void 0,done:!0};const m=(0,h.createPromiseCapability)();return this._requests.push(m),m.promise}cancel(m){this._done=!0;for(const d of this._requests)d.resolve({value:void 0,done:!0});this._requests.length=0,this._manager.isPendingRequest(this._requestId)&&this._manager.abortRequest(this._requestId),this._close()}}},(wI,c,$)=>{Object.defineProperty(c,"__esModule",{value:!0}),c.PDFFetchStream=void 0;var h=$(1),M=$(33);function _(p,j,D){return{method:"GET",headers:p,signal:D.signal,mode:"cors",credentials:j?"include":"same-origin",redirect:"follow"}}function z(p){const j=new Headers;for(const D in p){const m=p[D];typeof m>"u"||j.append(D,m)}return j}class T{constructor(j){this.source=j,this.isHttp=/^https?:/i.test(j.url),this.httpHeaders=this.isHttp&&j.httpHeaders||{},this._fullRequestReader=null,this._rangeRequestReaders=[]}get _progressiveDataLength(){var j;return((j=this._fullRequestReader)==null?void 0:j._loaded)??0}getFullReader(){return(0,h.assert)(!this._fullRequestReader,"PDFFetchStream.getFullReader can only be called once."),this._fullRequestReader=new r(this),this._fullRequestReader}getRangeReader(j,D){if(D<=this._progressiveDataLength)return null;const m=new Z(this,j,D);return this._rangeRequestReaders.push(m),m}cancelAllRequests(j){this._fullRequestReader&&this._fullRequestReader.cancel(j);for(const D of this._rangeRequestReaders.slice(0))D.cancel(j)}}c.PDFFetchStream=T;class r{constructor(j){this._stream=j,this._reader=null,this._loaded=0,this._filename=null;const D=j.source;this._withCredentials=D.withCredentials||!1,this._contentLength=D.length,this._headersCapability=(0,h.createPromiseCapability)(),this._disableRange=D.disableRange||!1,this._rangeChunkSize=D.rangeChunkSize,!this._rangeChunkSize&&!this._disableRange&&(this._disableRange=!0),this._abortController=new AbortController,this._isStreamingSupported=!D.disableStream,this._isRangeSupported=!D.disableRange,this._headers=z(this._stream.httpHeaders);const m=D.url;fetch(m,_(this._headers,this._withCredentials,this._abortController)).then(d=>{if(!(0,M.validateResponseStatus)(d.status))throw(0,M.createResponseStatusError)(d.status,m);this._reader=d.body.getReader(),this._headersCapability.resolve();const C=Y=>d.headers.get(Y),{allowRangeRequests:l,suggestedLength:B}=(0,M.validateRangeRequestCapabilities)({getResponseHeader:C,isHttp:this._stream.isHttp,rangeChunkSize:this._rangeChunkSize,disableRange:this._disableRange});this._isRangeSupported=l,this._contentLength=B||this._contentLength,this._filename=(0,M.extractFilenameFromHeader)(C),!this._isStreamingSupported&&this._isRangeSupported&&this.cancel(new h.AbortException("Streaming is disabled."))}).catch(this._headersCapability.reject),this.onProgress=null}get headersReady(){return this._headersCapability.promise}get filename(){return this._filename}get contentLength(){return this._contentLength}get isRangeSupported(){return this._isRangeSupported}get isStreamingSupported(){return this._isStreamingSupported}async read(){await this._headersCapability.promise;const{value:j,done:D}=await this._reader.read();return D?{value:j,done:D}:(this._loaded+=j.byteLength,this.onProgress&&this.onProgress({loaded:this._loaded,total:this._contentLength}),{value:new Uint8Array(j).buffer,done:!1})}cancel(j){this._reader&&this._reader.cancel(j),this._abortController.abort()}}class Z{constructor(j,D,m){this._stream=j,this._reader=null,this._loaded=0;const d=j.source;this._withCredentials=d.withCredentials||!1,this._readCapability=(0,h.createPromiseCapability)(),this._isStreamingSupported=!d.disableStream,this._abortController=new AbortController,this._headers=z(this._stream.httpHeaders),this._headers.append("Range",`bytes=${D}-${m-1}`);const C=d.url;fetch(C,_(this._headers,this._withCredentials,this._abortController)).then(l=>{if(!(0,M.validateResponseStatus)(l.status))throw(0,M.createResponseStatusError)(l.status,C);this._readCapability.resolve(),this._reader=l.body.getReader()}).catch(this._readCapability.reject),this.onProgress=null}get isStreamingSupported(){return this._isStreamingSupported}async read(){await this._readCapability.promise;const{value:j,done:D}=await this._reader.read();return D?{value:j,done:D}:(this._loaded+=j.byteLength,this.onProgress&&this.onProgress({loaded:this._loaded}),{value:new Uint8Array(j).buffer,done:!1})}cancel(j){this._reader&&this._reader.cancel(j),this._abortController.abort()}}}],__webpack_module_cache__={};function __w_pdfjs_require__(wI){var c=__webpack_module_cache__[wI];if(c!==void 0)return c.exports;var $=__webpack_module_cache__[wI]={exports:{}};return __webpack_modules__[wI]($,$.exports,__w_pdfjs_require__),$.exports}var __webpack_exports__={};return(()=>{var wI=__webpack_exports__;Object.defineProperty(wI,"__esModule",{value:!0}),Object.defineProperty(wI,"AnnotationEditorLayer",{enumerable:!0,get:function(){return M.AnnotationEditorLayer}}),Object.defineProperty(wI,"AnnotationEditorParamsType",{enumerable:!0,get:function(){return c.AnnotationEditorParamsType}}),Object.defineProperty(wI,"AnnotationEditorType",{enumerable:!0,get:function(){return c.AnnotationEditorType}}),Object.defineProperty(wI,"AnnotationEditorUIManager",{enumerable:!0,get:function(){return _.AnnotationEditorUIManager}}),Object.defineProperty(wI,"AnnotationLayer",{enumerable:!0,get:function(){return z.AnnotationLayer}}),Object.defineProperty(wI,"AnnotationMode",{enumerable:!0,get:function(){return c.AnnotationMode}}),Object.defineProperty(wI,"CMapCompressionType",{enumerable:!0,get:function(){return c.CMapCompressionType}}),Object.defineProperty(wI,"GlobalWorkerOptions",{enumerable:!0,get:function(){return T.GlobalWorkerOptions}}),Object.defineProperty(wI,"InvalidPDFException",{enumerable:!0,get:function(){return c.InvalidPDFException}}),Object.defineProperty(wI,"LoopbackPort",{enumerable:!0,get:function(){return $.LoopbackPort}}),Object.defineProperty(wI,"MissingPDFException",{enumerable:!0,get:function(){return c.MissingPDFException}}),Object.defineProperty(wI,"OPS",{enumerable:!0,get:function(){return c.OPS}}),Object.defineProperty(wI,"PDFDataRangeTransport",{enumerable:!0,get:function(){return $.PDFDataRangeTransport}}),Object.defineProperty(wI,"PDFDateString",{enumerable:!0,get:function(){return h.PDFDateString}}),Object.defineProperty(wI,"PDFWorker",{enumerable:!0,get:function(){return $.PDFWorker}}),Object.defineProperty(wI,"PasswordResponses",{enumerable:!0,get:function(){return c.PasswordResponses}}),Object.defineProperty(wI,"PermissionFlag",{enumerable:!0,get:function(){return c.PermissionFlag}}),Object.defineProperty(wI,"PixelsPerInch",{enumerable:!0,get:function(){return h.PixelsPerInch}}),Object.defineProperty(wI,"RenderingCancelledException",{enumerable:!0,get:function(){return h.RenderingCancelledException}}),Object.defineProperty(wI,"SVGGraphics",{enumerable:!0,get:function(){return p.SVGGraphics}}),Object.defineProperty(wI,"UNSUPPORTED_FEATURES",{enumerable:!0,get:function(){return c.UNSUPPORTED_FEATURES}}),Object.defineProperty(wI,"UnexpectedResponseException",{enumerable:!0,get:function(){return c.UnexpectedResponseException}}),Object.defineProperty(wI,"Util",{enumerable:!0,get:function(){return c.Util}}),Object.defineProperty(wI,"VerbosityLevel",{enumerable:!0,get:function(){return c.VerbosityLevel}}),Object.defineProperty(wI,"XfaLayer",{enumerable:!0,get:function(){return j.XfaLayer}}),Object.defineProperty(wI,"build",{enumerable:!0,get:function(){return $.build}}),Object.defineProperty(wI,"createPromiseCapability",{enumerable:!0,get:function(){return c.createPromiseCapability}}),Object.defineProperty(wI,"createValidAbsoluteUrl",{enumerable:!0,get:function(){return c.createValidAbsoluteUrl}}),Object.defineProperty(wI,"getDocument",{enumerable:!0,get:function(){return $.getDocument}}),Object.defineProperty(wI,"getFilenameFromUrl",{enumerable:!0,get:function(){return h.getFilenameFromUrl}}),Object.defineProperty(wI,"getPdfFilenameFromUrl",{enumerable:!0,get:function(){return h.getPdfFilenameFromUrl}}),Object.defineProperty(wI,"getXfaPageViewport",{enumerable:!0,get:function(){return h.getXfaPageViewport}}),Object.defineProperty(wI,"isPdfFile",{enumerable:!0,get:function(){return h.isPdfFile}}),Object.defineProperty(wI,"loadScript",{enumerable:!0,get:function(){return h.loadScript}}),Object.defineProperty(wI,"renderTextLayer",{enumerable:!0,get:function(){return Z.renderTextLayer}}),Object.defineProperty(wI,"shadow",{enumerable:!0,get:function(){return c.shadow}}),Object.defineProperty(wI,"version",{enumerable:!0,get:function(){return $.version}});var c=__w_pdfjs_require__(1),$=__w_pdfjs_require__(4),h=__w_pdfjs_require__(8),M=__w_pdfjs_require__(22),_=__w_pdfjs_require__(7),z=__w_pdfjs_require__(27),T=__w_pdfjs_require__(15),r=__w_pdfjs_require__(3),Z=__w_pdfjs_require__(30),p=__w_pdfjs_require__(31),j=__w_pdfjs_require__(29);if(r.isNodeJS){const{PDFNodeStream:D}=__w_pdfjs_require__(32);(0,$.setPDFNetworkStreamFactory)(m=>new D(m))}else{const{PDFNetworkStream:D}=__w_pdfjs_require__(35),{PDFFetchStream:m}=__w_pdfjs_require__(36);(0,$.setPDFNetworkStreamFactory)(d=>(0,h.isValidFetchUrl)(d.url)?new m(d):new D(d))}})(),__webpack_exports__})())}(pdf)),pdf.exports}(function(wI,c){(function($,h){wI.exports=h()})(globalThis,()=>(()=>{var $=[,(z,T,r)=>{Object.defineProperty(T,"__esModule",{value:!0}),T.DefaultXfaLayerFactory=T.DefaultTextLayerFactory=T.DefaultStructTreeLayerFactory=T.DefaultAnnotationLayerFactory=T.DefaultAnnotationEditorLayerFactory=void 0;var Z=r(2),p=r(5),j=r(4),D=r(6),m=r(8),d=r(9),C=r(10);class l{createAnnotationLayerBuilder({pageDiv:g,pdfPage:o,annotationStorage:X=null,imageResourcesPath:b="",renderForms:N=!0,l10n:F=j.NullL10n,enableScripting:hI=!1,hasJSActionsPromise:YI=null,mouseState:nI=null,fieldObjectsPromise:gI=null,annotationCanvasMap:U=null,accessibilityManager:II=null}){return new p.AnnotationLayerBuilder({pageDiv:g,pdfPage:o,imageResourcesPath:b,renderForms:N,linkService:new D.SimpleLinkService,l10n:F,annotationStorage:X,enableScripting:hI,hasJSActionsPromise:YI,fieldObjectsPromise:gI,mouseState:nI,annotationCanvasMap:U,accessibilityManager:II})}}T.DefaultAnnotationLayerFactory=l;class B{createAnnotationEditorLayerBuilder({uiManager:g=null,pageDiv:o,pdfPage:X,accessibilityManager:b=null,l10n:N,annotationStorage:F=null}){return new Z.AnnotationEditorLayerBuilder({uiManager:g,pageDiv:o,pdfPage:X,accessibilityManager:b,l10n:N,annotationStorage:F})}}T.DefaultAnnotationEditorLayerFactory=B;class Y{createStructTreeLayerBuilder({pdfPage:g}){return new m.StructTreeLayerBuilder({pdfPage:g})}}T.DefaultStructTreeLayerFactory=Y;class a{createTextLayerBuilder({textLayerDiv:g,pageIndex:o,viewport:X,enhanceTextSelection:b=!1,eventBus:N,highlighter:F,accessibilityManager:hI=null}){return new d.TextLayerBuilder({textLayerDiv:g,pageIndex:o,viewport:X,enhanceTextSelection:b,eventBus:N,highlighter:F,accessibilityManager:hI})}}T.DefaultTextLayerFactory=a;class i{createXfaLayerBuilder({pageDiv:g,pdfPage:o,annotationStorage:X=null}){return new C.XfaLayerBuilder({pageDiv:g,pdfPage:o,annotationStorage:X,linkService:new D.SimpleLinkService})}}T.DefaultXfaLayerFactory=i},(z,T,r)=>{var Z;Object.defineProperty(T,"__esModule",{value:!0}),T.AnnotationEditorLayerBuilder=void 0;var p=r(3),j=r(4);class D{constructor(d){GI(this,Z,void 0),this.pageDiv=d.pageDiv,this.pdfPage=d.pdfPage,this.annotationStorage=d.annotationStorage||null,this.accessibilityManager=d.accessibilityManager,this.l10n=d.l10n||j.NullL10n,this.annotationEditorLayer=null,this.div=null,this._cancelled=!1,XI(this,Z,d.uiManager)}async render(d,C="display"){if(C!=="display"||this._cancelled)return;const l=d.clone({dontFlip:!0});if(this.div){this.annotationEditorLayer.update({viewport:l}),this.show();return}this.div=document.createElement("div"),this.div.className="annotationEditorLayer",this.div.tabIndex=0,this.pageDiv.append(this.div),this.annotationEditorLayer=new p.AnnotationEditorLayer({uiManager:R(this,Z),div:this.div,annotationStorage:this.annotationStorage,accessibilityManager:this.accessibilityManager,pageIndex:this.pdfPage._pageIndex,l10n:this.l10n,viewport:l});const B={viewport:l,div:this.div,annotations:null,intent:C};this.annotationEditorLayer.render(B)}cancel(){this._cancelled=!0,this.destroy()}hide(){this.div&&(this.div.hidden=!0)}show(){this.div&&(this.div.hidden=!1)}destroy(){this.div&&(this.pageDiv=null,this.annotationEditorLayer.destroy(),this.div.remove())}}Z=new WeakMap,T.AnnotationEditorLayerBuilder=D},z=>{let T;typeof window<"u"&&window["pdfjs-dist/build/pdf"]?T=window["pdfjs-dist/build/pdf"]:T=requirePdf(),z.exports=T},(z,T)=>{Object.defineProperty(T,"__esModule",{value:!0}),T.NullL10n=void 0,T.fixupLangCode=j,T.getL10nFallback=Z;const r={of_pages:"of {{pagesCount}}",page_of_pages:"({{pageNumber}} of {{pagesCount}})",document_properties_kb:"{{size_kb}} KB ({{size_b}} bytes)",document_properties_mb:"{{size_mb}} MB ({{size_b}} bytes)",document_properties_date_string:"{{date}}, {{time}}",document_properties_page_size_unit_inches:"in",document_properties_page_size_unit_millimeters:"mm",document_properties_page_size_orientation_portrait:"portrait",document_properties_page_size_orientation_landscape:"landscape",document_properties_page_size_name_a3:"A3",document_properties_page_size_name_a4:"A4",document_properties_page_size_name_letter:"Letter",document_properties_page_size_name_legal:"Legal",document_properties_page_size_dimension_string:"{{width}} × {{height}} {{unit}} ({{orientation}})",document_properties_page_size_dimension_name_string:"{{width}} × {{height}} {{unit}} ({{name}}, {{orientation}})",document_properties_linearized_yes:"Yes",document_properties_linearized_no:"No",print_progress_percent:"{{progress}}%","toggle_sidebar.title":"Toggle Sidebar","toggle_sidebar_notification2.title":"Toggle Sidebar (document contains outline/attachments/layers)",additional_layers:"Additional Layers",page_landmark:"Page {{page}}",thumb_page_title:"Page {{page}}",thumb_page_canvas:"Thumbnail of Page {{page}}",find_reached_top:"Reached top of document, continued from bottom",find_reached_bottom:"Reached end of document, continued from top","find_match_count[one]":"{{current}} of {{total}} match","find_match_count[other]":"{{current}} of {{total}} matches","find_match_count_limit[one]":"More than {{limit}} match","find_match_count_limit[other]":"More than {{limit}} matches",find_not_found:"Phrase not found",error_version_info:"PDF.js v{{version}} (build: {{build}})",error_message:"Message: {{message}}",error_stack:"Stack: {{stack}}",error_file:"File: {{file}}",error_line:"Line: {{line}}",rendering_error:"An error occurred while rendering the page.",page_scale_width:"Page Width",page_scale_fit:"Page Fit",page_scale_auto:"Automatic Zoom",page_scale_actual:"Actual Size",page_scale_percent:"{{scale}}%",loading:"Loading…",loading_error:"An error occurred while loading the PDF.",invalid_file_error:"Invalid or corrupted PDF file.",missing_file_error:"Missing PDF file.",unexpected_response_error:"Unexpected server response.",printing_not_supported:"Warning: Printing is not fully supported by this browser.",printing_not_ready:"Warning: The PDF is not fully loaded for printing.",web_fonts_disabled:"Web fonts are disabled: unable to use embedded PDF fonts.",free_text_default_content:"Enter text…",editor_free_text_aria_label:"FreeText Editor",editor_ink_aria_label:"Ink Editor",editor_ink_canvas_aria_label:"User-created image"};function Z(d,C){switch(d){case"find_match_count":d=`find_match_count[${C.total===1?"one":"other"}]`;break;case"find_match_count_limit":d=`find_match_count_limit[${C.limit===1?"one":"other"}]`;break}return r[d]||""}const p={en:"en-US",es:"es-ES",fy:"fy-NL",ga:"ga-IE",gu:"gu-IN",hi:"hi-IN",hy:"hy-AM",nb:"nb-NO",ne:"ne-NP",nn:"nn-NO",pa:"pa-IN",pt:"pt-PT",sv:"sv-SE",zh:"zh-CN"};function j(d){return p[d==null?void 0:d.toLowerCase()]||d}function D(d,C){return C?d.replace(/\{\{\s*(\w+)\s*\}\}/g,(l,B)=>B in C?C[B]:"{{"+B+"}}"):d}const m={async getLanguage(){return"en-us"},async getDirection(){return"ltr"},async get(d,C=null,l=Z(d,C)){return D(l,C)},async translate(d){}};T.NullL10n=m},(z,T,r)=>{Object.defineProperty(T,"__esModule",{value:!0}),T.AnnotationLayerBuilder=void 0;var Z=r(3),p=r(4);class j{constructor({pageDiv:m,pdfPage:d,linkService:C,downloadManager:l,annotationStorage:B=null,imageResourcesPath:Y="",renderForms:a=!0,l10n:i=p.NullL10n,enableScripting:I=!1,hasJSActionsPromise:g=null,fieldObjectsPromise:o=null,mouseState:X=null,annotationCanvasMap:b=null,accessibilityManager:N=null}){this.pageDiv=m,this.pdfPage=d,this.linkService=C,this.downloadManager=l,this.imageResourcesPath=Y,this.renderForms=a,this.l10n=i,this.annotationStorage=B,this.enableScripting=I,this._hasJSActionsPromise=g,this._fieldObjectsPromise=o,this._mouseState=X,this._annotationCanvasMap=b,this._accessibilityManager=N,this.div=null,this._cancelled=!1}async render(m,d="display"){const[C,l=!1,B=null]=await Promise.all([this.pdfPage.getAnnotations({intent:d}),this._hasJSActionsPromise,this._fieldObjectsPromise]);if(this._cancelled||C.length===0)return;const Y={viewport:m.clone({dontFlip:!0}),div:this.div,annotations:C,page:this.pdfPage,imageResourcesPath:this.imageResourcesPath,renderForms:this.renderForms,linkService:this.linkService,downloadManager:this.downloadManager,annotationStorage:this.annotationStorage,enableScripting:this.enableScripting,hasJSActions:l,fieldObjects:B,mouseState:this._mouseState,annotationCanvasMap:this._annotationCanvasMap,accessibilityManager:this._accessibilityManager};this.div?Z.AnnotationLayer.update(Y):(this.div=document.createElement("div"),this.div.className="annotationLayer",this.pageDiv.append(this.div),Y.div=this.div,Z.AnnotationLayer.render(Y),this.l10n.translate(this.div))}cancel(){this._cancelled=!0}hide(){this.div&&(this.div.hidden=!0)}}T.AnnotationLayerBuilder=j},(z,T,r)=>{var Z,p,j,D,m;Object.defineProperty(T,"__esModule",{value:!0}),T.SimpleLinkService=T.PDFLinkService=T.LinkTarget=void 0;var d=r(7);const C="noopener noreferrer nofollow",l={NONE:0,SELF:1,BLANK:2,PARENT:3,TOP:4};T.LinkTarget=l;function B(I,{url:g,target:o,rel:X,enabled:b=!0}={}){if(!g||typeof g!="string")throw new Error('A valid "url" parameter must provided.');const N=(0,d.removeNullCharacters)(g);b?I.href=I.title=N:(I.href="",I.title=`Disabled: ${N}`,I.onclick=()=>!1);let F="";switch(o){case l.NONE:break;case l.SELF:F="_self";break;case l.BLANK:F="_blank";break;case l.PARENT:F="_parent";break;case l.TOP:F="_top";break}I.target=F,I.rel=typeof X=="string"?X:C}const Y=class{constructor({eventBus:I,externalLinkTarget:g=null,externalLinkRel:o=null,ignoreDestinationZoom:X=!1}={}){GI(this,p),GI(this,Z,new Map),this.eventBus=I,this.externalLinkTarget=g,this.externalLinkRel=o,this.externalLinkEnabled=!0,this._ignoreDestinationZoom=X,this.baseUrl=null,this.pdfDocument=null,this.pdfViewer=null,this.pdfHistory=null}setDocument(I,g=null){this.baseUrl=g,this.pdfDocument=I,R(this,Z).clear()}setViewer(I){this.pdfViewer=I}setHistory(I){this.pdfHistory=I}get pagesCount(){return this.pdfDocument?this.pdfDocument.numPages:0}get page(){return this.pdfViewer.currentPageNumber}set page(I){this.pdfViewer.currentPageNumber=I}get rotation(){return this.pdfViewer.pagesRotation}set rotation(I){this.pdfViewer.pagesRotation=I}async goToDestination(I){if(!this.pdfDocument)return;let g,o;if(typeof I=="string"?(g=I,o=await this.pdfDocument.getDestination(I)):(g=null,o=await I),!Array.isArray(o)){console.error(`PDFLinkService.goToDestination: "${o}" is not a valid destination array, for dest="${I}".`);return}bI(this,p,j).call(this,I,g,o)}goToPage(I){if(!this.pdfDocument)return;const g=typeof I=="string"&&this.pdfViewer.pageLabelToPageNumber(I)||I|0;if(!(Number.isInteger(g)&&g>0&&g<=this.pagesCount)){console.error(`PDFLinkService.goToPage: "${I}" is not a valid page.`);return}this.pdfHistory&&(this.pdfHistory.pushCurrentPosition(),this.pdfHistory.pushPage(g)),this.pdfViewer.scrollPageIntoView({pageNumber:g})}addLinkAttributes(I,g,o=!1){B(I,{url:g,target:o?l.BLANK:this.externalLinkTarget,rel:this.externalLinkRel,enabled:this.externalLinkEnabled})}getDestinationHash(I){if(typeof I=="string"){if(I.length>0)return this.getAnchorUrl("#"+escape(I))}else if(Array.isArray(I)){const g=JSON.stringify(I);if(g.length>0)return this.getAnchorUrl("#"+escape(g))}return this.getAnchorUrl("")}getAnchorUrl(I){return(this.baseUrl||"")+I}setHash(I){var g;if(!this.pdfDocument)return;let o,X;if(I.includes("=")){const b=(0,d.parseQueryString)(I);if(b.has("search")&&this.eventBus.dispatch("findfromurlhash",{source:this,query:b.get("search").replace(/"/g,""),phraseSearch:b.get("phrase")==="true"}),b.has("page")&&(o=b.get("page")|0||1),b.has("zoom")){const N=b.get("zoom").split(","),F=N[0],hI=parseFloat(F);F.includes("Fit")?F==="Fit"||F==="FitB"?X=[null,{name:F}]:F==="FitH"||F==="FitBH"||F==="FitV"||F==="FitBV"?X=[null,{name:F},N.length>1?N[1]|0:null]:F==="FitR"?N.length!==5?console.error('PDFLinkService.setHash: Not enough parameters for "FitR".'):X=[null,{name:F},N[1]|0,N[2]|0,N[3]|0,N[4]|0]:console.error(`PDFLinkService.setHash: "${F}" is not a valid zoom value.`):X=[null,{name:"XYZ"},N.length>1?N[1]|0:null,N.length>2?N[2]|0:null,hI?hI/100:F]}X?this.pdfViewer.scrollPageIntoView({pageNumber:o||this.page,destArray:X,allowNegativeOffset:!0}):o&&(this.page=o),b.has("pagemode")&&this.eventBus.dispatch("pagemode",{source:this,mode:b.get("pagemode")}),b.has("nameddest")&&this.goToDestination(b.get("nameddest"))}else{X=unescape(I);try{X=JSON.parse(X),Array.isArray(X)||(X=X.toString())}catch{}if(typeof X=="string"||bI(g=Y,D,m).call(g,X)){this.goToDestination(X);return}console.error(`PDFLinkService.setHash: "${unescape(I)}" is not a valid destination.`)}}executeNamedAction(I){var g,o;switch(I){case"GoBack":(g=this.pdfHistory)==null||g.back();break;case"GoForward":(o=this.pdfHistory)==null||o.forward();break;case"NextPage":this.pdfViewer.nextPage();break;case"PrevPage":this.pdfViewer.previousPage();break;case"LastPage":this.page=this.pagesCount;break;case"FirstPage":this.page=1;break}this.eventBus.dispatch("namedaction",{source:this,action:I})}cachePageRef(I,g){if(!g)return;const o=g.gen===0?`${g.num}R`:`${g.num}R${g.gen}`;R(this,Z).set(o,I)}_cachedPageNumber(I){if(!I)return null;const g=I.gen===0?`${I.num}R`:`${I.num}R${I.gen}`;return R(this,Z).get(g)||null}isPageVisible(I){return this.pdfViewer.isPageVisible(I)}isPageCached(I){return this.pdfViewer.isPageCached(I)}};let a=Y;Z=new WeakMap,p=new WeakSet,j=function(I,g=null,o){const X=o[0];let b;if(typeof X=="object"&&X!==null){if(b=this._cachedPageNumber(X),!b){this.pdfDocument.getPageIndex(X).then(N=>{this.cachePageRef(N+1,X),bI(this,p,j).call(this,I,g,o)}).catch(()=>{console.error(`PDFLinkService.#goToDestinationHelper: "${X}" is not a valid page reference, for dest="${I}".`)});return}}else if(Number.isInteger(X))b=X+1;else{console.error(`PDFLinkService.#goToDestinationHelper: "${X}" is not a valid destination reference, for dest="${I}".`);return}if(!b||b<1||b>this.pagesCount){console.error(`PDFLinkService.#goToDestinationHelper: "${b}" is not a valid page number, for dest="${I}".`);return}this.pdfHistory&&(this.pdfHistory.pushCurrentPosition(),this.pdfHistory.push({namedDest:g,explicitDest:o,pageNumber:b})),this.pdfViewer.scrollPageIntoView({pageNumber:b,destArray:o,ignoreDestinationZoom:this._ignoreDestinationZoom})},D=new WeakSet,m=function(I){if(!Array.isArray(I))return!1;const g=I.length;if(g<2)return!1;const o=I[0];if(!(typeof o=="object"&&Number.isInteger(o.num)&&Number.isInteger(o.gen))&&!(Number.isInteger(o)&&o>=0))return!1;const X=I[1];if(!(typeof X=="object"&&typeof X.name=="string"))return!1;let b=!0;switch(X.name){case"XYZ":if(g!==5)return!1;break;case"Fit":case"FitB":return g===2;case"FitH":case"FitBH":case"FitV":case"FitBV":if(g!==3)return!1;break;case"FitR":if(g!==6)return!1;b=!1;break;default:return!1}for(let N=2;N<g;N++){const F=I[N];if(!(typeof F=="number"||b&&F===null))return!1}return!0},GI(a,D),T.PDFLinkService=a;class i{constructor(){this.externalLinkEnabled=!0}get pagesCount(){return 0}get page(){return 0}set page(g){}get rotation(){return 0}set rotation(g){}async goToDestination(g){}goToPage(g){}addLinkAttributes(g,o,X=!1){B(g,{url:o,enabled:this.externalLinkEnabled})}getDestinationHash(g){return"#"}getAnchorUrl(g){return"#"}setHash(g){}executeNamedAction(g){}cachePageRef(g,o){}isPageVisible(g){return!0}isPageCached(g){return!0}}T.SimpleLinkService=i},(z,T)=>{var r,Z,p;Object.defineProperty(T,"__esModule",{value:!0}),T.animationStarted=T.VERTICAL_PADDING=T.UNKNOWN_SCALE=T.TextLayerMode=T.SpreadMode=T.SidebarView=T.ScrollMode=T.SCROLLBAR_PADDING=T.RenderingStates=T.RendererType=T.ProgressBar=T.PresentationModeState=T.OutputScale=T.MIN_SCALE=T.MAX_SCALE=T.MAX_AUTO_SCALE=T.DEFAULT_SCALE_VALUE=T.DEFAULT_SCALE_DELTA=T.DEFAULT_SCALE=T.AutoPrintRegExp=void 0,T.apiPageLayoutToViewerModes=uI,T.apiPageModeToSidebarView=MI,T.approximateFraction=NI,T.backtrackBeforeAllVisibleElements=e,T.binarySearchFirstItem=mI,T.docStyle=void 0,T.getActiveOrFocusedElement=lI,T.getPageSizeInches=J,T.getVisibleElements=w,T.isPortraitOrientation=A,T.isValidRotation=iI,T.isValidScrollMode=aI,T.isValidSpreadMode=eI,T.noContextMenuHandler=x,T.normalizeWheelEventDelta=P,T.normalizeWheelEventDirection=E,T.parseQueryString=gI,T.removeNullCharacters=q,T.roundToDivide=BI,T.scrollIntoView=YI,T.watchScroll=nI;const j="auto";T.DEFAULT_SCALE_VALUE=j;const D=1;T.DEFAULT_SCALE=D;const m=1.1;T.DEFAULT_SCALE_DELTA=m;const d=.1;T.MIN_SCALE=d;const C=10;T.MAX_SCALE=C;const l=0;T.UNKNOWN_SCALE=l;const B=1.25;T.MAX_AUTO_SCALE=B;const Y=40;T.SCROLLBAR_PADDING=Y;const a=5;T.VERTICAL_PADDING=a;const i={INITIAL:0,RUNNING:1,PAUSED:2,FINISHED:3};T.RenderingStates=i;const I={UNKNOWN:0,NORMAL:1,CHANGING:2,FULLSCREEN:3};T.PresentationModeState=I;const g={UNKNOWN:-1,NONE:0,THUMBS:1,OUTLINE:2,ATTACHMENTS:3,LAYERS:4};T.SidebarView=g;const o={CANVAS:"canvas",SVG:"svg"};T.RendererType=o;const X={DISABLE:0,ENABLE:1,ENABLE_ENHANCE:2};T.TextLayerMode=X;const b={UNKNOWN:-1,VERTICAL:0,HORIZONTAL:1,WRAPPED:2,PAGE:3};T.ScrollMode=b;const N={UNKNOWN:-1,NONE:0,ODD:1,EVEN:2};T.SpreadMode=N;const F=/\bprint\s*\(/;T.AutoPrintRegExp=F;class hI{constructor(){const WI=window.devicePixelRatio||1;this.sx=WI,this.sy=WI}get scaled(){return this.sx!==1||this.sy!==1}}T.OutputScale=hI;function YI(ZI,WI,tI=!1){let O=ZI.offsetParent;if(!O){console.error("offsetParent is not set -- cannot scroll");return}let f=ZI.offsetTop+ZI.clientTop,v=ZI.offsetLeft+ZI.clientLeft;for(;O.clientHeight===O.scrollHeight&&O.clientWidth===O.scrollWidth||tI&&(O.classList.contains("markedContent")||getComputedStyle(O).overflow==="hidden");)if(f+=O.offsetTop,v+=O.offsetLeft,O=O.offsetParent,!O)return;WI&&(WI.top!==void 0&&(f+=WI.top),WI.left!==void 0&&(v+=WI.left,O.scrollLeft=v)),O.scrollTop=f}function nI(ZI,WI){const tI=function(v){f||(f=window.requestAnimationFrame(function(){f=null;const RI=ZI.scrollLeft,pI=O.lastX;RI!==pI&&(O.right=RI>pI),O.lastX=RI;const DI=ZI.scrollTop,FI=O.lastY;DI!==FI&&(O.down=DI>FI),O.lastY=DI,WI(O)}))},O={right:!0,down:!0,lastX:ZI.scrollLeft,lastY:ZI.scrollTop,_eventHandler:tI};let f=null;return ZI.addEventListener("scroll",tI,!0),O}function gI(ZI){const WI=new Map;for(const[tI,O]of new URLSearchParams(ZI))WI.set(tI.toLowerCase(),O);return WI}const U=/\x00/g,II=/[\x01-\x1F]/g;function q(ZI,WI=!1){return typeof ZI!="string"?(console.error("The argument must be a string."),ZI):(WI&&(ZI=ZI.replace(II," ")),ZI.replace(U,""))}function mI(ZI,WI,tI=0){let O=tI,f=ZI.length-1;if(f<0||!WI(ZI[f]))return ZI.length;if(WI(ZI[O]))return O;for(;O<f;){const v=O+f>>1,RI=ZI[v];WI(RI)?f=v:O=v+1}return O}function NI(ZI){if(Math.floor(ZI)===ZI)return[ZI,1];const WI=1/ZI,tI=8;if(WI>tI)return[1,tI];if(Math.floor(WI)===WI)return[1,WI];const O=ZI>1?WI:ZI;let f=0,v=1,RI=1,pI=1;for(;;){const FI=f+RI,TI=v+pI;if(TI>tI)break;O<=FI/TI?(RI=FI,pI=TI):(f=FI,v=TI)}let DI;return O-f/v<RI/pI-O?DI=O===ZI?[f,v]:[v,f]:DI=O===ZI?[RI,pI]:[pI,RI],DI}function BI(ZI,WI){const tI=ZI%WI;return tI===0?ZI:Math.round(ZI-tI+WI)}function J({view:ZI,userUnit:WI,rotate:tI}){const[O,f,v,RI]=ZI,pI=tI%180!==0,DI=(v-O)/72*WI,FI=(RI-f)/72*WI;return{width:pI?FI:DI,height:pI?DI:FI}}function e(ZI,WI,tI){if(ZI<2)return ZI;let O=WI[ZI].div,f=O.offsetTop+O.clientTop;f>=tI&&(O=WI[ZI-1].div,f=O.offsetTop+O.clientTop);for(let v=ZI-2;v>=0&&(O=WI[v].div,!(O.offsetTop+O.clientTop+O.clientHeight<=f));--v)ZI=v;return ZI}function w({scrollEl:ZI,views:WI,sortByVisibility:tI=!1,horizontal:O=!1,rtl:f=!1}){const v=ZI.scrollTop,RI=v+ZI.clientHeight,pI=ZI.scrollLeft,DI=pI+ZI.clientWidth;function FI(HI){const cI=HI.div;return cI.offsetTop+cI.clientTop+cI.clientHeight>v}function TI(HI){const cI=HI.div,CI=cI.offsetLeft+cI.clientLeft,AI=CI+cI.clientWidth;return f?CI<DI:AI>pI}const vI=[],fI=new Set,PI=WI.length;let EI=mI(WI,O?TI:FI);EI>0&&EI<PI&&!O&&(EI=e(EI,WI,v));let SI=O?DI:-1;for(let HI=EI;HI<PI;HI++){const cI=WI[HI],CI=cI.div,AI=CI.offsetLeft+CI.clientLeft,KI=CI.offsetTop+CI.clientTop,LI=CI.clientWidth,rI=CI.clientHeight,kI=AI+LI,xI=KI+rI;if(SI===-1)xI>=RI&&(SI=xI);else if((O?AI:KI)>SI)break;if(xI<=v||KI>=RI||kI<=pI||AI>=DI)continue;const _I=Math.max(0,v-KI)+Math.max(0,xI-RI),$I=Math.max(0,pI-AI)+Math.max(0,kI-DI),OI=(rI-_I)/rI,gg=(LI-$I)/LI,Ig=OI*gg*100|0;vI.push({id:cI.id,x:AI,y:KI,view:cI,percent:Ig,widthPercent:gg*100|0}),fI.add(cI.id)}const JI=vI[0],yI=vI.at(-1);return tI&&vI.sort(function(HI,cI){const CI=HI.percent-cI.percent;return Math.abs(CI)>.001?-CI:HI.id-cI.id}),{first:JI,last:yI,views:vI,ids:fI}}function x(ZI){ZI.preventDefault()}function E(ZI){let WI=Math.hypot(ZI.deltaX,ZI.deltaY);const tI=Math.atan2(ZI.deltaY,ZI.deltaX);return-.25*Math.PI<tI&&tI<.75*Math.PI&&(WI=-WI),WI}function P(ZI){let WI=E(ZI);const tI=0,O=1,f=30,v=30;return ZI.deltaMode===tI?WI/=f*v:ZI.deltaMode===O&&(WI/=v),WI}function iI(ZI){return Number.isInteger(ZI)&&ZI%90===0}function aI(ZI){return Number.isInteger(ZI)&&Object.values(b).includes(ZI)&&ZI!==b.UNKNOWN}function eI(ZI){return Number.isInteger(ZI)&&Object.values(N).includes(ZI)&&ZI!==N.UNKNOWN}function A(ZI){return ZI.width<=ZI.height}const W=new Promise(function(ZI){window.requestAnimationFrame(ZI)});T.animationStarted=W;const L=document.documentElement.style;T.docStyle=L;function S(ZI,WI,tI){return Math.min(Math.max(ZI,WI),tI)}class Q{constructor(WI){if(GI(this,r,null),GI(this,Z,0),GI(this,p,!0),arguments.length>1)throw new Error("ProgressBar no longer accepts any additional options, please use CSS rules to modify its appearance instead.");const tI=document.getElementById(WI);XI(this,r,tI.classList)}get percent(){return R(this,Z)}set percent(WI){if(XI(this,Z,S(WI,0,100)),isNaN(WI)){R(this,r).add("indeterminate");return}R(this,r).remove("indeterminate"),L.setProperty("--progressBar-percent",`${R(this,Z)}%`)}setWidth(WI){if(!WI)return;const tI=WI.parentNode.offsetWidth-WI.offsetWidth;tI>0&&L.setProperty("--progressBar-end-offset",`${tI}px`)}hide(){R(this,p)&&(XI(this,p,!1),R(this,r).add("hidden"))}show(){R(this,p)||(XI(this,p,!0),R(this,r).remove("hidden"))}}r=new WeakMap,Z=new WeakMap,p=new WeakMap,T.ProgressBar=Q;function lI(){let ZI=document,WI=ZI.activeElement||ZI.querySelector(":focus");for(;WI!=null&&WI.shadowRoot;)ZI=WI.shadowRoot,WI=ZI.activeElement||ZI.querySelector(":focus");return WI}function uI(ZI){let WI=b.VERTICAL,tI=N.NONE;switch(ZI){case"SinglePage":WI=b.PAGE;break;case"OneColumn":break;case"TwoPageLeft":WI=b.PAGE;case"TwoColumnLeft":tI=N.ODD;break;case"TwoPageRight":WI=b.PAGE;case"TwoColumnRight":tI=N.EVEN;break}return{scrollMode:WI,spreadMode:tI}}function MI(ZI){switch(ZI){case"UseNone":return g.NONE;case"UseThumbs":return g.THUMBS;case"UseOutlines":return g.OUTLINE;case"UseAttachments":return g.ATTACHMENTS;case"UseOC":return g.LAYERS}return g.NONE}},(z,T)=>{Object.defineProperty(T,"__esModule",{value:!0}),T.StructTreeLayerBuilder=void 0;const r={Document:null,DocumentFragment:null,Part:"group",Sect:"group",Div:"group",Aside:"note",NonStruct:"none",P:null,H:"heading",Title:null,FENote:"note",Sub:"group",Lbl:null,Span:null,Em:null,Strong:null,Link:"link",Annot:"note",Form:"form",Ruby:null,RB:null,RT:null,RP:null,Warichu:null,WT:null,WP:null,L:"list",LI:"listitem",LBody:null,Table:"table",TR:"row",TH:"columnheader",TD:"cell",THead:"columnheader",TBody:null,TFoot:null,Caption:null,Figure:"figure",Formula:null,Artifact:null},Z=/^H(\d+)$/;class p{constructor({pdfPage:D}){this.pdfPage=D}render(D){return this._walk(D)}_setAttributes(D,m){D.alt!==void 0&&m.setAttribute("aria-label",D.alt),D.id!==void 0&&m.setAttribute("aria-owns",D.id),D.lang!==void 0&&m.setAttribute("lang",D.lang)}_walk(D){if(!D)return null;const m=document.createElement("span");if("role"in D){const{role:d}=D,C=d.match(Z);C?(m.setAttribute("role","heading"),m.setAttribute("aria-level",C[1])):r[d]&&m.setAttribute("role",r[d])}if(this._setAttributes(D,m),D.children)if(D.children.length===1&&"id"in D.children[0])this._setAttributes(D.children[0],m);else for(const d of D.children)m.append(this._walk(d));return m}}T.StructTreeLayerBuilder=p},(z,T,r)=>{Object.defineProperty(T,"__esModule",{value:!0}),T.TextLayerBuilder=void 0;var Z=r(3);const p=300;class j{constructor({textLayerDiv:m,eventBus:d,pageIndex:C,viewport:l,highlighter:B=null,enhanceTextSelection:Y=!1,accessibilityManager:a=null}){this.textLayerDiv=m,this.eventBus=d,this.textContent=null,this.textContentItemsStr=[],this.textContentStream=null,this.renderingDone=!1,this.pageNumber=C+1,this.viewport=l,this.textDivs=[],this.textLayerRenderTask=null,this.highlighter=B,this.enhanceTextSelection=Y,this.accessibilityManager=a,this._bindMouse()}_finishRendering(){if(this.renderingDone=!0,!this.enhanceTextSelection){const m=document.createElement("div");m.className="endOfContent",this.textLayerDiv.append(m)}this.eventBus.dispatch("textlayerrendered",{source:this,pageNumber:this.pageNumber,numTextDivs:this.textDivs.length})}render(m=0){var d,C;if(!(this.textContent||this.textContentStream)||this.renderingDone)return;this.cancel(),this.textDivs.length=0,(d=this.highlighter)==null||d.setTextMapping(this.textDivs,this.textContentItemsStr),(C=this.accessibilityManager)==null||C.setTextMapping(this.textDivs);const l=document.createDocumentFragment();this.textLayerRenderTask=(0,Z.renderTextLayer)({textContent:this.textContent,textContentStream:this.textContentStream,container:l,viewport:this.viewport,textDivs:this.textDivs,textContentItemsStr:this.textContentItemsStr,timeout:m,enhanceTextSelection:this.enhanceTextSelection}),this.textLayerRenderTask.promise.then(()=>{var B,Y;this.textLayerDiv.append(l),this._finishRendering(),(B=this.highlighter)==null||B.enable(),(Y=this.accessibilityManager)==null||Y.enable()},function(B){})}cancel(){var m,d;this.textLayerRenderTask&&(this.textLayerRenderTask.cancel(),this.textLayerRenderTask=null),(m=this.highlighter)==null||m.disable(),(d=this.accessibilityManager)==null||d.disable()}setTextContentStream(m){this.cancel(),this.textContentStream=m}setTextContent(m){this.cancel(),this.textContent=m}_bindMouse(){const m=this.textLayerDiv;let d=null;m.addEventListener("mousedown",C=>{if(this.enhanceTextSelection&&this.textLayerRenderTask){this.textLayerRenderTask.expandTextDivs(!0),d&&(clearTimeout(d),d=null);return}const l=m.querySelector(".endOfContent");if(!l)return;let B=C.target!==m;if(B=B&&window.getComputedStyle(l).getPropertyValue("-moz-user-select")!=="none",B){const Y=m.getBoundingClientRect(),a=Math.max(0,(C.pageY-Y.top)/Y.height);l.style.top=(a*100).toFixed(2)+"%"}l.classList.add("active")}),m.addEventListener("mouseup",()=>{if(this.enhanceTextSelection&&this.textLayerRenderTask){d=setTimeout(()=>{this.textLayerRenderTask&&this.textLayerRenderTask.expandTextDivs(!1),d=null},p);return}const C=m.querySelector(".endOfContent");C&&(C.style.top="",C.classList.remove("active"))})}}T.TextLayerBuilder=j},(z,T,r)=>{Object.defineProperty(T,"__esModule",{value:!0}),T.XfaLayerBuilder=void 0;var Z=r(3);class p{constructor({pageDiv:D,pdfPage:m,annotationStorage:d=null,linkService:C,xfaHtml:l=null}){this.pageDiv=D,this.pdfPage=m,this.annotationStorage=d,this.linkService=C,this.xfaHtml=l,this.div=null,this._cancelled=!1}render(D,m="display"){if(m==="print"){const d={viewport:D.clone({dontFlip:!0}),div:this.div,xfaHtml:this.xfaHtml,annotationStorage:this.annotationStorage,linkService:this.linkService,intent:m},C=document.createElement("div");this.pageDiv.append(C),d.div=C;const l=Z.XfaLayer.render(d);return Promise.resolve(l)}return this.pdfPage.getXfa().then(d=>{if(this._cancelled||!d)return{textDivs:[]};const C={viewport:D.clone({dontFlip:!0}),div:this.div,xfaHtml:d,annotationStorage:this.annotationStorage,linkService:this.linkService,intent:m};return this.div?Z.XfaLayer.update(C):(this.div=document.createElement("div"),this.pageDiv.append(this.div),C.div=this.div,Z.XfaLayer.render(C))}).catch(d=>{console.error(d)})}cancel(){this._cancelled=!0}hide(){this.div&&(this.div.hidden=!0)}}T.XfaLayerBuilder=p},(z,T,r)=>{Object.defineProperty(T,"__esModule",{value:!0}),T.PDFViewer=T.PDFSinglePageViewer=void 0;var Z=r(7),p=r(12);class j extends p.BaseViewer{}T.PDFViewer=j;class D extends p.BaseViewer{_resetView(){super._resetView(),this._scrollMode=Z.ScrollMode.PAGE,this._spreadMode=Z.SpreadMode.NONE}set scrollMode(d){}_updateScrollMode(){}set spreadMode(d){}_updateSpreadMode(){}}T.PDFSinglePageViewer=D},(z,T,r)=>{var Z,p,j,D,m,d,C,l,B,Y,a,i,I,g,o,X,b,N,F,hI,YI,nI,gI,U,II,q,mI,NI,BI,J;Object.defineProperty(T,"__esModule",{value:!0}),T.PagesCountLimit=T.PDFPageViewBuffer=T.BaseViewer=void 0;var e=r(3),w=r(7),x=r(2),E=r(5),P=r(4),iI=r(13),aI=r(16),eI=r(6),A=r(8),W=r(17),L=r(9),S=r(10);const Q=10,lI="enablePermissions",uI={FORCE_SCROLL_MODE_PAGE:15e3,FORCE_LAZY_PAGE_INIT:7500,PAUSE_EAGER_PAGE_INIT:250};T.PagesCountLimit=uI;function MI(O){return Object.values(e.AnnotationEditorType).includes(O)&&O!==e.AnnotationEditorType.DISABLE}class ZI{constructor(f){GI(this,j),GI(this,Z,new Set),GI(this,p,0),XI(this,p,f)}push(f){const v=R(this,Z);v.has(f)&&v.delete(f),v.add(f),v.size>R(this,p)&&bI(this,j,D).call(this)}resize(f,v=null){XI(this,p,f);const RI=R(this,Z);if(v){const pI=RI.size;let DI=1;for(const FI of RI)if(v.has(FI.id)&&(RI.delete(FI),RI.add(FI)),++DI>pI)break}for(;RI.size>R(this,p);)bI(this,j,D).call(this)}has(f){return R(this,Z).has(f)}[Symbol.iterator](){return R(this,Z).keys()}}Z=new WeakMap,p=new WeakMap,j=new WeakSet,D=function(){const O=R(this,Z).keys().next().value;O==null||O.destroy(),R(this,Z).delete(O)},T.PDFPageViewBuffer=ZI;const WI=class{constructor(O){GI(this,I),GI(this,o),GI(this,b),GI(this,F),GI(this,YI),GI(this,gI),GI(this,II),GI(this,mI),GI(this,BI),GI(this,m,null),GI(this,d,e.AnnotationEditorType.DISABLE),GI(this,C,null),GI(this,l,e.AnnotationMode.ENABLE_FORMS),GI(this,B,!1),GI(this,Y,0),GI(this,a,null),GI(this,i,null);var f,v;if(this.constructor===WI)throw new Error("Cannot initialize BaseViewer.");const RI="2.16.105";if(e.version!==RI)throw new Error(`The API version "${e.version}" does not match the Viewer version "${RI}".`);if(this.container=O.container,this.viewer=O.viewer||O.container.firstElementChild,!(((f=this.container)==null?void 0:f.tagName.toUpperCase())==="DIV"&&((v=this.viewer)==null?void 0:v.tagName.toUpperCase())==="DIV"))throw new Error("Invalid `container` and/or `viewer` option.");if(this.container.offsetParent&&getComputedStyle(this.container).position!=="absolute")throw new Error("The `container` must be absolutely positioned.");this.eventBus=O.eventBus,this.linkService=O.linkService||new eI.SimpleLinkService,this.downloadManager=O.downloadManager||null,this.findController=O.findController||null,this._scriptingManager=O.scriptingManager||null,this.removePageBorders=O.removePageBorders||!1,this.textLayerMode=O.textLayerMode??w.TextLayerMode.ENABLE,XI(this,l,O.annotationMode??e.AnnotationMode.ENABLE_FORMS),XI(this,d,O.annotationEditorMode??e.AnnotationEditorType.DISABLE),this.imageResourcesPath=O.imageResourcesPath||"",this.enablePrintAutoRotate=O.enablePrintAutoRotate||!1,this.renderer=O.renderer||w.RendererType.CANVAS,this.useOnlyCssZoom=O.useOnlyCssZoom||!1,this.maxCanvasPixels=O.maxCanvasPixels,this.l10n=O.l10n||P.NullL10n,XI(this,B,O.enablePermissions||!1),this.pageColors=O.pageColors||null,this.pageColors&&!(CSS.supports("color",this.pageColors.background)&&CSS.supports("color",this.pageColors.foreground))&&((this.pageColors.background||this.pageColors.foreground)&&console.warn("BaseViewer: Ignoring `pageColors`-option, since the browser doesn't support the values used."),this.pageColors=null),this.defaultRenderingQueue=!O.renderingQueue,this.defaultRenderingQueue?(this.renderingQueue=new aI.PDFRenderingQueue,this.renderingQueue.setViewer(this)):this.renderingQueue=O.renderingQueue,this.scroll=(0,w.watchScroll)(this.container,this._scrollUpdate.bind(this)),this.presentationModeState=w.PresentationModeState.UNKNOWN,this._onBeforeDraw=this._onAfterDraw=null,this._resetView(),this.removePageBorders&&this.viewer.classList.add("removePageBorders"),this.updateContainerHeightCss()}get pagesCount(){return this._pages.length}getPageView(O){return this._pages[O]}get pageViewsReady(){return this._pagesCapability.settled?this._pages.every(function(O){return O==null?void 0:O.pdfPage}):!1}get renderForms(){return R(this,l)===e.AnnotationMode.ENABLE_FORMS}get enableScripting(){return!!this._scriptingManager}get currentPageNumber(){return this._currentPageNumber}set currentPageNumber(O){if(!Number.isInteger(O))throw new Error("Invalid page number.");this.pdfDocument&&(this._setCurrentPageNumber(O,!0)||console.error(`currentPageNumber: "${O}" is not a valid page.`))}_setCurrentPageNumber(O,f=!1){var v;if(this._currentPageNumber===O)return f&&bI(this,gI,U).call(this),!0;if(!(0<O&&O<=this.pagesCount))return!1;const RI=this._currentPageNumber;return this._currentPageNumber=O,this.eventBus.dispatch("pagechanging",{source:this,pageNumber:O,pageLabel:((v=this._pageLabels)==null?void 0:v[O-1])??null,previous:RI}),f&&bI(this,gI,U).call(this),!0}get currentPageLabel(){var O;return((O=this._pageLabels)==null?void 0:O[this._currentPageNumber-1])??null}set currentPageLabel(O){if(!this.pdfDocument)return;let f=O|0;if(this._pageLabels){const v=this._pageLabels.indexOf(O);v>=0&&(f=v+1)}this._setCurrentPageNumber(f,!0)||console.error(`currentPageLabel: "${O}" is not a valid page.`)}get currentScale(){return this._currentScale!==w.UNKNOWN_SCALE?this._currentScale:w.DEFAULT_SCALE}set currentScale(O){if(isNaN(O))throw new Error("Invalid numeric scale.");this.pdfDocument&&this._setScale(O,!1)}get currentScaleValue(){return this._currentScaleValue}set currentScaleValue(O){this.pdfDocument&&this._setScale(O,!1)}get pagesRotation(){return this._pagesRotation}set pagesRotation(O){if(!(0,w.isValidRotation)(O))throw new Error("Invalid pages rotation angle.");if(!this.pdfDocument||(O%=360,O<0&&(O+=360),this._pagesRotation===O))return;this._pagesRotation=O;const f=this._currentPageNumber,v={rotation:O};for(const RI of this._pages)RI.update(v);this._currentScaleValue&&this._setScale(this._currentScaleValue,!0),this.eventBus.dispatch("rotationchanging",{source:this,pagesRotation:O,pageNumber:f}),this.defaultRenderingQueue&&this.update()}get firstPagePromise(){return this.pdfDocument?this._firstPageCapability.promise:null}get onePageRendered(){return this.pdfDocument?this._onePageRenderedCapability.promise:null}get pagesPromise(){return this.pdfDocument?this._pagesCapability.promise:null}setDocument(O){if(this.pdfDocument&&(this.eventBus.dispatch("pagesdestroy",{source:this}),this._cancelRendering(),this._resetView(),this.findController&&this.findController.setDocument(null),this._scriptingManager&&this._scriptingManager.setDocument(null),R(this,C)&&(R(this,C).destroy(),XI(this,C,null))),this.pdfDocument=O,!O)return;const f=O.isPureXfa,v=O.numPages,RI=O.getPage(1),pI=O.getOptionalContentConfig(),DI=R(this,B)?O.getPermissions():Promise.resolve();if(v>uI.FORCE_SCROLL_MODE_PAGE){console.warn("Forcing PAGE-scrolling for performance reasons, given the length of the document.");const FI=this._scrollMode=w.ScrollMode.PAGE;this.eventBus.dispatch("scrollmodechanged",{source:this,mode:FI})}this._pagesCapability.promise.then(()=>{this.eventBus.dispatch("pagesloaded",{source:this,pagesCount:v})},()=>{}),this._onBeforeDraw=FI=>{const TI=this._pages[FI.pageNumber-1];TI&&R(this,m).push(TI)},this.eventBus._on("pagerender",this._onBeforeDraw),this._onAfterDraw=FI=>{FI.cssTransform||this._onePageRenderedCapability.settled||(this._onePageRenderedCapability.resolve({timestamp:FI.timestamp}),this.eventBus._off("pagerendered",this._onAfterDraw),this._onAfterDraw=null,R(this,i)&&(document.removeEventListener("visibilitychange",R(this,i)),XI(this,i,null)))},this.eventBus._on("pagerendered",this._onAfterDraw),Promise.all([RI,DI]).then(([FI,TI])=>{if(O!==this.pdfDocument)return;this._firstPageCapability.resolve(FI),this._optionalContentConfigPromise=pI;const{annotationEditorMode:vI,annotationMode:fI,textLayerMode:PI}=bI(this,I,g).call(this,TI);if(vI!==e.AnnotationEditorType.DISABLE){const KI=vI;f?console.warn("Warning: XFA-editing is not implemented."):MI(KI)?(XI(this,C,new e.AnnotationEditorUIManager(this.container,this.eventBus)),KI!==e.AnnotationEditorType.NONE&&R(this,C).updateMode(KI)):console.error(`Invalid AnnotationEditor mode: ${KI}`)}const EI=this._scrollMode===w.ScrollMode.PAGE?null:this.viewer,SI=this.currentScale,JI=FI.getViewport({scale:SI*e.PixelsPerInch.PDF_TO_CSS_UNITS}),yI=PI!==w.TextLayerMode.DISABLE&&!f?this:null,HI=fI!==e.AnnotationMode.DISABLE?this:null,cI=f?this:null,CI=R(this,C)?this:null;for(let KI=1;KI<=v;++KI){const LI=new iI.PDFPageView({container:EI,eventBus:this.eventBus,id:KI,scale:SI,defaultViewport:JI.clone(),optionalContentConfigPromise:pI,renderingQueue:this.renderingQueue,textLayerFactory:yI,textLayerMode:PI,annotationLayerFactory:HI,annotationMode:fI,xfaLayerFactory:cI,annotationEditorLayerFactory:CI,textHighlighterFactory:this,structTreeLayerFactory:this,imageResourcesPath:this.imageResourcesPath,renderer:this.renderer,useOnlyCssZoom:this.useOnlyCssZoom,maxCanvasPixels:this.maxCanvasPixels,pageColors:this.pageColors,l10n:this.l10n});this._pages.push(LI)}const AI=this._pages[0];AI&&(AI.setPdfPage(FI),this.linkService.cachePageRef(1,FI.ref)),this._scrollMode===w.ScrollMode.PAGE?bI(this,b,N).call(this):this._spreadMode!==w.SpreadMode.NONE&&this._updateSpreadMode(),bI(this,o,X).call(this).then(async()=>{if(this.findController&&this.findController.setDocument(O),this._scriptingManager&&this._scriptingManager.setDocument(O),R(this,C)&&this.eventBus.dispatch("annotationeditormodechanged",{source:this,mode:R(this,d)}),O.loadingParams.disableAutoFetch||v>uI.FORCE_LAZY_PAGE_INIT){this._pagesCapability.resolve();return}let KI=v-1;if(KI<=0){this._pagesCapability.resolve();return}for(let LI=2;LI<=v;++LI){const rI=O.getPage(LI).then(kI=>{const xI=this._pages[LI-1];xI.pdfPage||xI.setPdfPage(kI),this.linkService.cachePageRef(LI,kI.ref),--KI===0&&this._pagesCapability.resolve()},kI=>{console.error(`Unable to get page ${LI} to initialize viewer`,kI),--KI===0&&this._pagesCapability.resolve()});LI%uI.PAUSE_EAGER_PAGE_INIT===0&&await rI}}),this.eventBus.dispatch("pagesinit",{source:this}),O.getMetadata().then(({info:KI})=>{O===this.pdfDocument&&KI.Language&&(this.viewer.lang=KI.Language)}),this.defaultRenderingQueue&&this.update()}).catch(FI=>{console.error("Unable to initialize viewer",FI),this._pagesCapability.reject(FI)})}setPageLabels(O){var f;if(this.pdfDocument){O?Array.isArray(O)&&this.pdfDocument.numPages===O.length?this._pageLabels=O:(this._pageLabels=null,console.error("setPageLabels: Invalid page labels.")):this._pageLabels=null;for(let v=0,RI=this._pages.length;v<RI;v++)this._pages[v].setPageLabel(((f=this._pageLabels)==null?void 0:f[v])??null)}}_resetView(){this._pages=[],this._currentPageNumber=1,this._currentScale=w.UNKNOWN_SCALE,this._currentScaleValue=null,this._pageLabels=null,XI(this,m,new ZI(Q)),this._location=null,this._pagesRotation=0,this._optionalContentConfigPromise=null,this._firstPageCapability=(0,e.createPromiseCapability)(),this._onePageRenderedCapability=(0,e.createPromiseCapability)(),this._pagesCapability=(0,e.createPromiseCapability)(),this._scrollMode=w.ScrollMode.VERTICAL,this._previousScrollMode=w.ScrollMode.UNKNOWN,this._spreadMode=w.SpreadMode.NONE,XI(this,a,{previousPageNumber:1,scrollDown:!0,pages:[]}),this._onBeforeDraw&&(this.eventBus._off("pagerender",this._onBeforeDraw),this._onBeforeDraw=null),this._onAfterDraw&&(this.eventBus._off("pagerendered",this._onAfterDraw),this._onAfterDraw=null),R(this,i)&&(document.removeEventListener("visibilitychange",R(this,i)),XI(this,i,null)),this.viewer.textContent="",this._updateScrollMode(),this.viewer.removeAttribute("lang"),this.viewer.classList.remove(lI)}_scrollUpdate(){this.pagesCount!==0&&this.update()}_setScaleUpdatePages(O,f,v=!1,RI=!1){if(this._currentScaleValue=f.toString(),bI(this,YI,nI).call(this,O)){RI&&this.eventBus.dispatch("scalechanging",{source:this,scale:O,presetValue:f});return}w.docStyle.setProperty("--scale-factor",O*e.PixelsPerInch.PDF_TO_CSS_UNITS);const pI={scale:O};for(const DI of this._pages)DI.update(pI);if(this._currentScale=O,!v){let DI=this._currentPageNumber,FI;this._location&&!(this.isInPresentationMode||this.isChangingPresentationMode)&&(DI=this._location.pageNumber,FI=[null,{name:"XYZ"},this._location.left,this._location.top,null]),this.scrollPageIntoView({pageNumber:DI,destArray:FI,allowNegativeOffset:!0})}this.eventBus.dispatch("scalechanging",{source:this,scale:O,presetValue:RI?f:void 0}),this.defaultRenderingQueue&&this.update(),this.updateContainerHeightCss()}get _pageWidthScaleFactor(){return this._spreadMode!==w.SpreadMode.NONE&&this._scrollMode!==w.ScrollMode.HORIZONTAL?2:1}_setScale(O,f=!1){let v=parseFloat(O);if(v>0)this._setScaleUpdatePages(v,O,f,!1);else{const RI=this._pages[this._currentPageNumber-1];if(!RI)return;let pI=w.SCROLLBAR_PADDING,DI=w.VERTICAL_PADDING;this.isInPresentationMode?pI=DI=4:this.removePageBorders?pI=DI=0:this._scrollMode===w.ScrollMode.HORIZONTAL&&([pI,DI]=[DI,pI]);const FI=(this.container.clientWidth-pI)/RI.width*RI.scale/this._pageWidthScaleFactor,TI=(this.container.clientHeight-DI)/RI.height*RI.scale;switch(O){case"page-actual":v=1;break;case"page-width":v=FI;break;case"page-height":v=TI;break;case"page-fit":v=Math.min(FI,TI);break;case"auto":const vI=(0,w.isPortraitOrientation)(RI)?FI:Math.min(TI,FI);v=Math.min(w.MAX_AUTO_SCALE,vI);break;default:console.error(`_setScale: "${O}" is an unknown zoom value.`);return}this._setScaleUpdatePages(v,O,f,!0)}}pageLabelToPageNumber(O){if(!this._pageLabels)return null;const f=this._pageLabels.indexOf(O);return f<0?null:f+1}scrollPageIntoView({pageNumber:O,destArray:f=null,allowNegativeOffset:v=!1,ignoreDestinationZoom:RI=!1}){if(!this.pdfDocument)return;const pI=Number.isInteger(O)&&this._pages[O-1];if(!pI){console.error(`scrollPageIntoView: "${O}" is not a valid pageNumber parameter.`);return}if(this.isInPresentationMode||!f){this._setCurrentPageNumber(O,!0);return}let DI=0,FI=0,TI=0,vI=0,fI,PI;const EI=pI.rotation%180!==0,SI=(EI?pI.height:pI.width)/pI.scale/e.PixelsPerInch.PDF_TO_CSS_UNITS,JI=(EI?pI.width:pI.height)/pI.scale/e.PixelsPerInch.PDF_TO_CSS_UNITS;let yI=0;switch(f[1].name){case"XYZ":DI=f[2],FI=f[3],yI=f[4],DI=DI!==null?DI:0,FI=FI!==null?FI:JI;break;case"Fit":case"FitB":yI="page-fit";break;case"FitH":case"FitBH":FI=f[2],yI="page-width",FI===null&&this._location?(DI=this._location.left,FI=this._location.top):(typeof FI!="number"||FI<0)&&(FI=JI);break;case"FitV":case"FitBV":DI=f[2],TI=SI,vI=JI,yI="page-height";break;case"FitR":DI=f[2],FI=f[3],TI=f[4]-DI,vI=f[5]-FI;const AI=this.removePageBorders?0:w.SCROLLBAR_PADDING,KI=this.removePageBorders?0:w.VERTICAL_PADDING;fI=(this.container.clientWidth-AI)/TI/e.PixelsPerInch.PDF_TO_CSS_UNITS,PI=(this.container.clientHeight-KI)/vI/e.PixelsPerInch.PDF_TO_CSS_UNITS,yI=Math.min(Math.abs(fI),Math.abs(PI));break;default:console.error(`scrollPageIntoView: "${f[1].name}" is not a valid destination type.`);return}if(RI||(yI&&yI!==this._currentScale?this.currentScaleValue=yI:this._currentScale===w.UNKNOWN_SCALE&&(this.currentScaleValue=w.DEFAULT_SCALE_VALUE)),yI==="page-fit"&&!f[4]){bI(this,F,hI).call(this,pI);return}const HI=[pI.viewport.convertToViewportPoint(DI,FI),pI.viewport.convertToViewportPoint(DI+TI,FI+vI)];let cI=Math.min(HI[0][0],HI[1][0]),CI=Math.min(HI[0][1],HI[1][1]);v||(cI=Math.max(cI,0),CI=Math.max(CI,0)),bI(this,F,hI).call(this,pI,{left:cI,top:CI})}_updateLocation(O){const f=this._currentScale,v=this._currentScaleValue,RI=parseFloat(v)===f?Math.round(f*1e4)/100:v,pI=O.id,DI=this._pages[pI-1],FI=this.container,TI=DI.getPagePoint(FI.scrollLeft-O.x,FI.scrollTop-O.y),vI=Math.round(TI[0]),fI=Math.round(TI[1]);let PI=`#page=${pI}`;this.isInPresentationMode||(PI+=`&zoom=${RI},${vI},${fI}`),this._location={pageNumber:pI,scale:RI,top:fI,left:vI,rotation:this._pagesRotation,pdfOpenParams:PI}}update(){const O=this._getVisiblePages(),f=O.views,v=f.length;if(v===0)return;const RI=Math.max(Q,2*v+1);R(this,m).resize(RI,O.ids),this.renderingQueue.renderHighestPriority(O);const pI=this._spreadMode===w.SpreadMode.NONE&&(this._scrollMode===w.ScrollMode.PAGE||this._scrollMode===w.ScrollMode.VERTICAL),DI=this._currentPageNumber;let FI=!1;for(const TI of f){if(TI.percent<100)break;if(TI.id===DI&&pI){FI=!0;break}}this._setCurrentPageNumber(FI?DI:f[0].id),this._updateLocation(O.first),this.eventBus.dispatch("updateviewarea",{source:this,location:this._location})}containsElement(O){return this.container.contains(O)}focus(){this.container.focus()}get _isContainerRtl(){return getComputedStyle(this.container).direction==="rtl"}get isInPresentationMode(){return this.presentationModeState===w.PresentationModeState.FULLSCREEN}get isChangingPresentationMode(){return this.presentationModeState===w.PresentationModeState.CHANGING}get isHorizontalScrollbarEnabled(){return this.isInPresentationMode?!1:this.container.scrollWidth>this.container.clientWidth}get isVerticalScrollbarEnabled(){return this.isInPresentationMode?!1:this.container.scrollHeight>this.container.clientHeight}_getVisiblePages(){const O=this._scrollMode===w.ScrollMode.PAGE?R(this,a).pages:this._pages,f=this._scrollMode===w.ScrollMode.HORIZONTAL,v=f&&this._isContainerRtl;return(0,w.getVisibleElements)({scrollEl:this.container,views:O,sortByVisibility:!0,horizontal:f,rtl:v})}isPageVisible(O){return this.pdfDocument?Number.isInteger(O)&&O>0&&O<=this.pagesCount?this._getVisiblePages().ids.has(O):(console.error(`isPageVisible: "${O}" is not a valid page.`),!1):!1}isPageCached(O){if(!this.pdfDocument)return!1;if(!(Number.isInteger(O)&&O>0&&O<=this.pagesCount))return console.error(`isPageCached: "${O}" is not a valid page.`),!1;const f=this._pages[O-1];return R(this,m).has(f)}cleanup(){for(const O of this._pages)O.renderingState!==w.RenderingStates.FINISHED&&O.reset()}_cancelRendering(){for(const O of this._pages)O.cancelRendering()}forceRendering(O){const f=O||this._getVisiblePages(),v=bI(this,mI,NI).call(this,f),RI=this._spreadMode!==w.SpreadMode.NONE&&this._scrollMode!==w.ScrollMode.HORIZONTAL,pI=this.renderingQueue.getHighestPriority(f,this._pages,v,RI);return bI(this,BI,J).call(this,f.ids),pI?(bI(this,II,q).call(this,pI).then(()=>{this.renderingQueue.renderView(pI)}),!0):!1}createTextLayerBuilder({textLayerDiv:O,pageIndex:f,viewport:v,enhanceTextSelection:RI=!1,eventBus:pI,highlighter:DI,accessibilityManager:FI=null}){return new L.TextLayerBuilder({textLayerDiv:O,eventBus:pI,pageIndex:f,viewport:v,enhanceTextSelection:this.isInPresentationMode?!1:RI,highlighter:DI,accessibilityManager:FI})}createTextHighlighter({pageIndex:O,eventBus:f}){return new W.TextHighlighter({eventBus:f,pageIndex:O,findController:this.isInPresentationMode?null:this.findController})}createAnnotationLayerBuilder({pageDiv:O,pdfPage:f,annotationStorage:v=(SI=>(SI=this.pdfDocument)==null?void 0:SI.annotationStorage)(),imageResourcesPath:RI="",renderForms:pI=!0,l10n:DI=P.NullL10n,enableScripting:FI=this.enableScripting,hasJSActionsPromise:TI=(SI=>(SI=this.pdfDocument)==null?void 0:SI.hasJSActions())(),mouseState:vI=(SI=>(SI=this._scriptingManager)==null?void 0:SI.mouseState)(),fieldObjectsPromise:fI=(SI=>(SI=this.pdfDocument)==null?void 0:SI.getFieldObjects())(),annotationCanvasMap:PI=null,accessibilityManager:EI=null}){return new E.AnnotationLayerBuilder({pageDiv:O,pdfPage:f,annotationStorage:v,imageResourcesPath:RI,renderForms:pI,linkService:this.linkService,downloadManager:this.downloadManager,l10n:DI,enableScripting:FI,hasJSActionsPromise:TI,mouseState:vI,fieldObjectsPromise:fI,annotationCanvasMap:PI,accessibilityManager:EI})}createAnnotationEditorLayerBuilder({uiManager:O=R(this,C),pageDiv:f,pdfPage:v,accessibilityManager:RI=null,l10n:pI,annotationStorage:DI=(FI=>(FI=this.pdfDocument)==null?void 0:FI.annotationStorage)()}){return new x.AnnotationEditorLayerBuilder({uiManager:O,pageDiv:f,pdfPage:v,annotationStorage:DI,accessibilityManager:RI,l10n:pI})}createXfaLayerBuilder({pageDiv:O,pdfPage:f,annotationStorage:v=(RI=>(RI=this.pdfDocument)==null?void 0:RI.annotationStorage)()}){return new S.XfaLayerBuilder({pageDiv:O,pdfPage:f,annotationStorage:v,linkService:this.linkService})}createStructTreeLayerBuilder({pdfPage:O}){return new A.StructTreeLayerBuilder({pdfPage:O})}get hasEqualPageSizes(){const O=this._pages[0];for(let f=1,v=this._pages.length;f<v;++f){const RI=this._pages[f];if(RI.width!==O.width||RI.height!==O.height)return!1}return!0}getPagesOverview(){return this._pages.map(O=>{const f=O.pdfPage.getViewport({scale:1});return!this.enablePrintAutoRotate||(0,w.isPortraitOrientation)(f)?{width:f.width,height:f.height,rotation:f.rotation}:{width:f.height,height:f.width,rotation:(f.rotation-90)%360}})}get optionalContentConfigPromise(){return this.pdfDocument?this._optionalContentConfigPromise?this._optionalContentConfigPromise:(console.error("optionalContentConfigPromise: Not initialized yet."),this.pdfDocument.getOptionalContentConfig()):Promise.resolve(null)}set optionalContentConfigPromise(O){if(!(O instanceof Promise))throw new Error(`Invalid optionalContentConfigPromise: ${O}`);if(!this.pdfDocument||!this._optionalContentConfigPromise)return;this._optionalContentConfigPromise=O;const f={optionalContentConfigPromise:O};for(const v of this._pages)v.update(f);this.update(),this.eventBus.dispatch("optionalcontentconfigchanged",{source:this,promise:O})}get scrollMode(){return this._scrollMode}set scrollMode(O){if(this._scrollMode!==O){if(!(0,w.isValidScrollMode)(O))throw new Error(`Invalid scroll mode: ${O}`);this.pagesCount>uI.FORCE_SCROLL_MODE_PAGE||(this._previousScrollMode=this._scrollMode,this._scrollMode=O,this.eventBus.dispatch("scrollmodechanged",{source:this,mode:O}),this._updateScrollMode(this._currentPageNumber))}}_updateScrollMode(O=null){const f=this._scrollMode,v=this.viewer;v.classList.toggle("scrollHorizontal",f===w.ScrollMode.HORIZONTAL),v.classList.toggle("scrollWrapped",f===w.ScrollMode.WRAPPED),!(!this.pdfDocument||!O)&&(f===w.ScrollMode.PAGE?bI(this,b,N).call(this):this._previousScrollMode===w.ScrollMode.PAGE&&this._updateSpreadMode(),this._currentScaleValue&&isNaN(this._currentScaleValue)&&this._setScale(this._currentScaleValue,!0),this._setCurrentPageNumber(O,!0),this.update())}get spreadMode(){return this._spreadMode}set spreadMode(O){if(this._spreadMode!==O){if(!(0,w.isValidSpreadMode)(O))throw new Error(`Invalid spread mode: ${O}`);this._spreadMode=O,this.eventBus.dispatch("spreadmodechanged",{source:this,mode:O}),this._updateSpreadMode(this._currentPageNumber)}}_updateSpreadMode(O=null){if(!this.pdfDocument)return;const f=this.viewer,v=this._pages;if(this._scrollMode===w.ScrollMode.PAGE)bI(this,b,N).call(this);else if(f.textContent="",this._spreadMode===w.SpreadMode.NONE)for(const RI of this._pages)f.append(RI.div);else{const RI=this._spreadMode-1;let pI=null;for(let DI=0,FI=v.length;DI<FI;++DI)pI===null?(pI=document.createElement("div"),pI.className="spread",f.append(pI)):DI%2===RI&&(pI=pI.cloneNode(!1),f.append(pI)),pI.append(v[DI].div)}O&&(this._currentScaleValue&&isNaN(this._currentScaleValue)&&this._setScale(this._currentScaleValue,!0),this._setCurrentPageNumber(O,!0),this.update())}_getPageAdvance(O,f=!1){switch(this._scrollMode){case w.ScrollMode.WRAPPED:{const{views:v}=this._getVisiblePages(),RI=new Map;for(const{id:pI,y:DI,percent:FI,widthPercent:TI}of v){if(FI===0||TI<100)continue;let vI=RI.get(DI);vI||RI.set(DI,vI||(vI=[])),vI.push(pI)}for(const pI of RI.values()){const DI=pI.indexOf(O);if(DI===-1)continue;const FI=pI.length;if(FI===1)break;if(f)for(let TI=DI-1,vI=0;TI>=vI;TI--){const fI=pI[TI],PI=pI[TI+1]-1;if(fI<PI)return O-PI}else for(let TI=DI+1,vI=FI;TI<vI;TI++){const fI=pI[TI],PI=pI[TI-1]+1;if(fI>PI)return PI-O}if(f){const TI=pI[0];if(TI<O)return O-TI+1}else{const TI=pI[FI-1];if(TI>O)return TI-O+1}break}break}case w.ScrollMode.HORIZONTAL:break;case w.ScrollMode.PAGE:case w.ScrollMode.VERTICAL:{if(this._spreadMode===w.SpreadMode.NONE)break;const v=this._spreadMode-1;if(f&&O%2!==v||!f&&O%2===v)break;const{views:RI}=this._getVisiblePages(),pI=f?O-1:O+1;for(const{id:DI,percent:FI,widthPercent:TI}of RI)if(DI===pI){if(FI>0&&TI===100)return 2;break}break}}return 1}nextPage(){const O=this._currentPageNumber,f=this.pagesCount;if(O>=f)return!1;const v=this._getPageAdvance(O,!1)||1;return this.currentPageNumber=Math.min(O+v,f),!0}previousPage(){const O=this._currentPageNumber;if(O<=1)return!1;const f=this._getPageAdvance(O,!0)||1;return this.currentPageNumber=Math.max(O-f,1),!0}increaseScale(O=1){let f=this._currentScale;do f=(f*w.DEFAULT_SCALE_DELTA).toFixed(2),f=Math.ceil(f*10)/10,f=Math.min(w.MAX_SCALE,f);while(--O>0&&f<w.MAX_SCALE);this.currentScaleValue=f}decreaseScale(O=1){let f=this._currentScale;do f=(f/w.DEFAULT_SCALE_DELTA).toFixed(2),f=Math.floor(f*10)/10,f=Math.max(w.MIN_SCALE,f);while(--O>0&&f>w.MIN_SCALE);this.currentScaleValue=f}updateContainerHeightCss(){const O=this.container.clientHeight;O!==R(this,Y)&&(XI(this,Y,O),w.docStyle.setProperty("--viewer-container-height",`${O}px`))}get annotationEditorMode(){return R(this,C)?R(this,d):e.AnnotationEditorType.DISABLE}set annotationEditorMode(O){if(!R(this,C))throw new Error("The AnnotationEditor is not enabled.");if(R(this,d)!==O){if(!MI(O))throw new Error(`Invalid AnnotationEditor mode: ${O}`);this.pdfDocument&&(XI(this,d,O),this.eventBus.dispatch("annotationeditormodechanged",{source:this,mode:O}),R(this,C).updateMode(O))}}set annotationEditorParams({type:O,value:f}){if(!R(this,C))throw new Error("The AnnotationEditor is not enabled.");R(this,C).updateParams(O,f)}refresh(){if(!this.pdfDocument)return;const O={};for(const f of this._pages)f.update(O);this.update()}};let tI=WI;m=new WeakMap,d=new WeakMap,C=new WeakMap,l=new WeakMap,B=new WeakMap,Y=new WeakMap,a=new WeakMap,i=new WeakMap,I=new WeakSet,g=function(O){const f={annotationEditorMode:R(this,d),annotationMode:R(this,l),textLayerMode:this.textLayerMode};return O&&(O.includes(e.PermissionFlag.COPY)||this.viewer.classList.add(lI),O.includes(e.PermissionFlag.MODIFY_CONTENTS)||(f.annotationEditorMode=e.AnnotationEditorType.DISABLE),!O.includes(e.PermissionFlag.MODIFY_ANNOTATIONS)&&!O.includes(e.PermissionFlag.FILL_INTERACTIVE_FORMS)&&R(this,l)===e.AnnotationMode.ENABLE_FORMS&&(f.annotationMode=e.AnnotationMode.ENABLE)),f},o=new WeakSet,X=function(){if(document.visibilityState==="hidden"||!this.container.offsetParent||this._getVisiblePages().views.length===0)return Promise.resolve();const O=new Promise(f=>{XI(this,i,()=>{document.visibilityState==="hidden"&&(f(),document.removeEventListener("visibilitychange",R(this,i)),XI(this,i,null))}),document.addEventListener("visibilitychange",R(this,i))});return Promise.race([this._onePageRenderedCapability.promise,O])},b=new WeakSet,N=function(){if(this._scrollMode!==w.ScrollMode.PAGE)throw new Error("#ensurePageViewVisible: Invalid scrollMode value.");const O=this._currentPageNumber,f=R(this,a),v=this.viewer;if(v.textContent="",f.pages.length=0,this._spreadMode===w.SpreadMode.NONE&&!this.isInPresentationMode){const RI=this._pages[O-1];v.append(RI.div),f.pages.push(RI)}else{const RI=new Set,pI=this._spreadMode-1;pI===-1?RI.add(O-1):O%2!==pI?(RI.add(O-1),RI.add(O)):(RI.add(O-2),RI.add(O-1));const DI=document.createElement("div");if(DI.className="spread",this.isInPresentationMode){const FI=document.createElement("div");FI.className="dummyPage",DI.append(FI)}for(const FI of RI){const TI=this._pages[FI];TI&&(DI.append(TI.div),f.pages.push(TI))}v.append(DI)}f.scrollDown=O>=f.previousPageNumber,f.previousPageNumber=O},F=new WeakSet,hI=function(O,f=null){const{div:v,id:RI}=O;if(this._scrollMode===w.ScrollMode.PAGE&&(this._setCurrentPageNumber(RI),bI(this,b,N).call(this),this.update()),!f&&!this.isInPresentationMode){const pI=v.offsetLeft+v.clientLeft,DI=pI+v.clientWidth,{scrollLeft:FI,clientWidth:TI}=this.container;(this._scrollMode===w.ScrollMode.HORIZONTAL||pI<FI||DI>FI+TI)&&(f={left:0,top:0})}(0,w.scrollIntoView)(v,f)},YI=new WeakSet,nI=function(O){return O===this._currentScale||Math.abs(O-this._currentScale)<1e-15},gI=new WeakSet,U=function(){const O=this._pages[this._currentPageNumber-1];this.isInPresentationMode&&this._setScale(this._currentScaleValue,!0),bI(this,F,hI).call(this,O)},II=new WeakSet,q=async function(O){var f,v;if(O.pdfPage)return O.pdfPage;try{const RI=await this.pdfDocument.getPage(O.id);return O.pdfPage||O.setPdfPage(RI),(v=(f=this.linkService)._cachedPageNumber)!=null&&v.call(f,RI.ref)||this.linkService.cachePageRef(O.id,RI.ref),RI}catch(RI){return console.error("Unable to get page for page view",RI),null}},mI=new WeakSet,NI=function(O){var f,v;if(((f=O.first)==null?void 0:f.id)===1)return!0;if(((v=O.last)==null?void 0:v.id)===this.pagesCount)return!1;switch(this._scrollMode){case w.ScrollMode.PAGE:return R(this,a).scrollDown;case w.ScrollMode.HORIZONTAL:return this.scroll.right}return this.scroll.down},BI=new WeakSet,J=function(O){for(const f of O){const v=this._pages[f-1];v==null||v.toggleLoadingIconSpinner(!0)}for(const f of R(this,m))O.has(f.id)||f.toggleLoadingIconSpinner(!1)},T.BaseViewer=tI},(z,T,r)=>{var Z,p;Object.defineProperty(T,"__esModule",{value:!0}),T.PDFPageView=void 0;var j=r(3),D=r(7),m=r(14),d=r(4),C=r(15);const l=m.compatibilityParams.maxCanvasPixels||16777216;class B{constructor(a){GI(this,Z,j.AnnotationMode.ENABLE_FORMS),GI(this,p,{initialOptionalContent:!0,regularAnnotations:!0});var i,I;const g=a.container,o=a.defaultViewport;this.id=a.id,this.renderingId="page"+this.id,this.pdfPage=null,this.pageLabel=null,this.rotation=0,this.scale=a.scale||D.DEFAULT_SCALE,this.viewport=o,this.pdfPageRotate=o.rotation,this._optionalContentConfigPromise=a.optionalContentConfigPromise||null,this.hasRestrictedScaling=!1,this.textLayerMode=a.textLayerMode??D.TextLayerMode.ENABLE,XI(this,Z,a.annotationMode??j.AnnotationMode.ENABLE_FORMS),this.imageResourcesPath=a.imageResourcesPath||"",this.useOnlyCssZoom=a.useOnlyCssZoom||!1,this.maxCanvasPixels=a.maxCanvasPixels||l,this.pageColors=a.pageColors||null,this.eventBus=a.eventBus,this.renderingQueue=a.renderingQueue,this.textLayerFactory=a.textLayerFactory,this.annotationLayerFactory=a.annotationLayerFactory,this.annotationEditorLayerFactory=a.annotationEditorLayerFactory,this.xfaLayerFactory=a.xfaLayerFactory,this.textHighlighter=(i=a.textHighlighterFactory)==null?void 0:i.createTextHighlighter({pageIndex:this.id-1,eventBus:this.eventBus}),this.structTreeLayerFactory=a.structTreeLayerFactory,this.renderer=a.renderer||D.RendererType.CANVAS,this.l10n=a.l10n||d.NullL10n,this.paintTask=null,this.paintedViewportMap=new WeakMap,this.renderingState=D.RenderingStates.INITIAL,this.resume=null,this._renderError=null,this._isStandalone=!((I=this.renderingQueue)!=null&&I.hasViewer()),this._annotationCanvasMap=null,this.annotationLayer=null,this.annotationEditorLayer=null,this.textLayer=null,this.zoomLayer=null,this.xfaLayer=null,this.structTreeLayer=null;const X=document.createElement("div");if(X.className="page",X.style.width=Math.floor(this.viewport.width)+"px",X.style.height=Math.floor(this.viewport.height)+"px",X.setAttribute("data-page-number",this.id),X.setAttribute("role","region"),this.l10n.get("page_landmark",{page:this.id}).then(b=>{X.setAttribute("aria-label",b)}),this.div=X,g==null||g.append(X),this._isStandalone){const{optionalContentConfigPromise:b}=a;b&&b.then(N=>{b===this._optionalContentConfigPromise&&(R(this,p).initialOptionalContent=N.hasInitialVisibility)})}}setPdfPage(a){this.pdfPage=a,this.pdfPageRotate=a.rotate;const i=(this.rotation+this.pdfPageRotate)%360;this.viewport=a.getViewport({scale:this.scale*j.PixelsPerInch.PDF_TO_CSS_UNITS,rotation:i}),this.reset()}destroy(){this.reset(),this.pdfPage&&this.pdfPage.cleanup()}async _renderAnnotationLayer(){let a=null;try{await this.annotationLayer.render(this.viewport,"display")}catch(i){console.error(`_renderAnnotationLayer: "${i}".`),a=i}finally{this.eventBus.dispatch("annotationlayerrendered",{source:this,pageNumber:this.id,error:a})}}async _renderAnnotationEditorLayer(){let a=null;try{await this.annotationEditorLayer.render(this.viewport,"display")}catch(i){console.error(`_renderAnnotationEditorLayer: "${i}".`),a=i}finally{this.eventBus.dispatch("annotationeditorlayerrendered",{source:this,pageNumber:this.id,error:a})}}async _renderXfaLayer(){let a=null;try{const i=await this.xfaLayer.render(this.viewport,"display");this.textHighlighter&&this._buildXfaTextContentItems(i.textDivs)}catch(i){console.error(`_renderXfaLayer: "${i}".`),a=i}finally{this.eventBus.dispatch("xfalayerrendered",{source:this,pageNumber:this.id,error:a})}}async _buildXfaTextContentItems(a){const i=await this.pdfPage.getTextContent(),I=[];for(const g of i.items)I.push(g.str);this.textHighlighter.setTextMapping(a,I),this.textHighlighter.enable()}_resetZoomLayer(a=!1){if(!this.zoomLayer)return;const i=this.zoomLayer.firstChild;this.paintedViewportMap.delete(i),i.width=0,i.height=0,a&&this.zoomLayer.remove(),this.zoomLayer=null}reset({keepZoomLayer:a=!1,keepAnnotationLayer:i=!1,keepAnnotationEditorLayer:I=!1,keepXfaLayer:g=!1}={}){var o,X,b,N;this.cancelRendering({keepAnnotationLayer:i,keepAnnotationEditorLayer:I,keepXfaLayer:g}),this.renderingState=D.RenderingStates.INITIAL;const F=this.div;F.style.width=Math.floor(this.viewport.width)+"px",F.style.height=Math.floor(this.viewport.height)+"px";const hI=F.childNodes,YI=a&&this.zoomLayer||null,nI=i&&((o=this.annotationLayer)==null?void 0:o.div)||null,gI=I&&((X=this.annotationEditorLayer)==null?void 0:X.div)||null,U=g&&((b=this.xfaLayer)==null?void 0:b.div)||null;for(let II=hI.length-1;II>=0;II--){const q=hI[II];switch(q){case YI:case nI:case gI:case U:continue}q.remove()}F.removeAttribute("data-loaded"),nI&&this.annotationLayer.hide(),gI?this.annotationEditorLayer.hide():(N=this.annotationEditorLayer)==null||N.destroy(),U&&this.xfaLayer.hide(),YI||(this.canvas&&(this.paintedViewportMap.delete(this.canvas),this.canvas.width=0,this.canvas.height=0,delete this.canvas),this._resetZoomLayer()),this.svg&&(this.paintedViewportMap.delete(this.svg),delete this.svg),this.loadingIconDiv=document.createElement("div"),this.loadingIconDiv.className="loadingIcon notVisible",this._isStandalone&&this.toggleLoadingIconSpinner(!0),this.loadingIconDiv.setAttribute("role","img"),this.l10n.get("loading").then(II=>{var q;(q=this.loadingIconDiv)==null||q.setAttribute("aria-label",II)}),F.append(this.loadingIconDiv)}update({scale:a=0,rotation:i=null,optionalContentConfigPromise:I=null}){this.scale=a||this.scale,typeof i=="number"&&(this.rotation=i),I instanceof Promise&&(this._optionalContentConfigPromise=I,I.then(X=>{I===this._optionalContentConfigPromise&&(R(this,p).initialOptionalContent=X.hasInitialVisibility)}));const g=(this.rotation+this.pdfPageRotate)%360;if(this.viewport=this.viewport.clone({scale:this.scale*j.PixelsPerInch.PDF_TO_CSS_UNITS,rotation:g}),this._isStandalone&&D.docStyle.setProperty("--scale-factor",this.viewport.scale),this.svg){this.cssTransform({target:this.svg,redrawAnnotationLayer:!0,redrawAnnotationEditorLayer:!0,redrawXfaLayer:!0}),this.eventBus.dispatch("pagerendered",{source:this,pageNumber:this.id,cssTransform:!0,timestamp:performance.now(),error:this._renderError});return}let o=!1;if(this.canvas&&this.maxCanvasPixels>0){const X=this.outputScale;(Math.floor(this.viewport.width)*X.sx|0)*(Math.floor(this.viewport.height)*X.sy|0)>this.maxCanvasPixels&&(o=!0)}if(this.canvas){if(this.useOnlyCssZoom||this.hasRestrictedScaling&&o){this.cssTransform({target:this.canvas,redrawAnnotationLayer:!0,redrawAnnotationEditorLayer:!0,redrawXfaLayer:!0}),this.eventBus.dispatch("pagerendered",{source:this,pageNumber:this.id,cssTransform:!0,timestamp:performance.now(),error:this._renderError});return}!this.zoomLayer&&!this.canvas.hidden&&(this.zoomLayer=this.canvas.parentNode,this.zoomLayer.style.position="absolute")}this.zoomLayer&&this.cssTransform({target:this.zoomLayer.firstChild}),this.reset({keepZoomLayer:!0,keepAnnotationLayer:!0,keepAnnotationEditorLayer:!0,keepXfaLayer:!0})}cancelRendering({keepAnnotationLayer:a=!1,keepAnnotationEditorLayer:i=!1,keepXfaLayer:I=!1}={}){var g;this.paintTask&&(this.paintTask.cancel(),this.paintTask=null),this.resume=null,this.textLayer&&(this.textLayer.cancel(),this.textLayer=null),this.annotationLayer&&(!a||!this.annotationLayer.div)&&(this.annotationLayer.cancel(),this.annotationLayer=null,this._annotationCanvasMap=null),this.annotationEditorLayer&&(!i||!this.annotationEditorLayer.div)&&(this.annotationEditorLayer.cancel(),this.annotationEditorLayer=null),this.xfaLayer&&(!I||!this.xfaLayer.div)&&(this.xfaLayer.cancel(),this.xfaLayer=null,(g=this.textHighlighter)==null||g.disable()),this._onTextLayerRendered&&(this.eventBus._off("textlayerrendered",this._onTextLayerRendered),this._onTextLayerRendered=null)}cssTransform({target:a,redrawAnnotationLayer:i=!1,redrawAnnotationEditorLayer:I=!1,redrawXfaLayer:g=!1}){const o=this.viewport.width,X=this.viewport.height,b=this.div;a.style.width=a.parentNode.style.width=b.style.width=Math.floor(o)+"px",a.style.height=a.parentNode.style.height=b.style.height=Math.floor(X)+"px";const N=this.viewport.rotation-this.paintedViewportMap.get(a).rotation,F=Math.abs(N);let hI=1,YI=1;if((F===90||F===270)&&(hI=X/o,YI=o/X),a.style.transform=`rotate(${N}deg) scale(${hI}, ${YI})`,this.textLayer){const nI=this.textLayer.viewport,gI=this.viewport.rotation-nI.rotation,U=Math.abs(gI);let II=o/nI.width;(U===90||U===270)&&(II=o/nI.height);const q=this.textLayer.textLayerDiv;let mI,NI;switch(U){case 0:mI=NI=0;break;case 90:mI=0,NI="-"+q.style.height;break;case 180:mI="-"+q.style.width,NI="-"+q.style.height;break;case 270:mI="-"+q.style.width,NI=0;break;default:console.error("Bad rotation value.");break}q.style.transform=`rotate(${U}deg) scale(${II}) translate(${mI}, ${NI})`,q.style.transformOrigin="0% 0%"}i&&this.annotationLayer&&this._renderAnnotationLayer(),I&&this.annotationEditorLayer&&this._renderAnnotationEditorLayer(),g&&this.xfaLayer&&this._renderXfaLayer()}get width(){return this.viewport.width}get height(){return this.viewport.height}getPagePoint(a,i){return this.viewport.convertToPdfPoint(a,i)}toggleLoadingIconSpinner(a=!1){var i;(i=this.loadingIconDiv)==null||i.classList.toggle("notVisible",!a)}draw(){var a,i,I;this.renderingState!==D.RenderingStates.INITIAL&&(console.error("Must be in new state before drawing"),this.reset());const{div:g,pdfPage:o}=this;if(!o)return this.renderingState=D.RenderingStates.FINISHED,this.loadingIconDiv&&(this.loadingIconDiv.remove(),delete this.loadingIconDiv),Promise.reject(new Error("pdfPage is not loaded"));this.renderingState=D.RenderingStates.RUNNING;const X=document.createElement("div");X.style.width=g.style.width,X.style.height=g.style.height,X.classList.add("canvasWrapper");const b=((a=this.annotationLayer)==null?void 0:a.div)||((i=this.annotationEditorLayer)==null?void 0:i.div);b?b.before(X):g.append(X);let N=null;if(this.textLayerMode!==D.TextLayerMode.DISABLE&&this.textLayerFactory){this._accessibilityManager||(this._accessibilityManager=new C.TextAccessibilityManager);const gI=document.createElement("div");gI.className="textLayer",gI.style.width=X.style.width,gI.style.height=X.style.height,b?b.before(gI):g.append(gI),N=this.textLayerFactory.createTextLayerBuilder({textLayerDiv:gI,pageIndex:this.id-1,viewport:this.viewport,enhanceTextSelection:this.textLayerMode===D.TextLayerMode.ENABLE_ENHANCE,eventBus:this.eventBus,highlighter:this.textHighlighter,accessibilityManager:this._accessibilityManager})}this.textLayer=N,R(this,Z)!==j.AnnotationMode.DISABLE&&this.annotationLayerFactory&&(this._annotationCanvasMap||(this._annotationCanvasMap=new Map),this.annotationLayer||(this.annotationLayer=this.annotationLayerFactory.createAnnotationLayerBuilder({pageDiv:g,pdfPage:o,imageResourcesPath:this.imageResourcesPath,renderForms:R(this,Z)===j.AnnotationMode.ENABLE_FORMS,l10n:this.l10n,annotationCanvasMap:this._annotationCanvasMap,accessibilityManager:this._accessibilityManager}))),(I=this.xfaLayer)!=null&&I.div&&g.append(this.xfaLayer.div);let F=null;this.renderingQueue&&(F=gI=>{if(!this.renderingQueue.isHighestPriority(this)){this.renderingState=D.RenderingStates.PAUSED,this.resume=()=>{this.renderingState=D.RenderingStates.RUNNING,gI()};return}gI()});const hI=async(gI=null)=>{if(YI===this.paintTask&&(this.paintTask=null),gI instanceof j.RenderingCancelledException){this._renderError=null;return}if(this._renderError=gI,this.renderingState=D.RenderingStates.FINISHED,this.loadingIconDiv&&(this.loadingIconDiv.remove(),delete this.loadingIconDiv),this._resetZoomLayer(!0),R(this,p).regularAnnotations=!YI.separateAnnots,this.eventBus.dispatch("pagerendered",{source:this,pageNumber:this.id,cssTransform:!1,timestamp:performance.now(),error:this._renderError}),gI)throw gI},YI=this.renderer===D.RendererType.SVG?this.paintOnSvg(X):this.paintOnCanvas(X);YI.onRenderContinue=F,this.paintTask=YI;const nI=YI.promise.then(()=>hI(null).then(()=>{if(N){const gI=o.streamTextContent({includeMarkedContent:!0});N.setTextContentStream(gI),N.render()}this.annotationLayer&&this._renderAnnotationLayer().then(()=>{this.annotationEditorLayerFactory&&(this.annotationEditorLayer||(this.annotationEditorLayer=this.annotationEditorLayerFactory.createAnnotationEditorLayerBuilder({pageDiv:g,pdfPage:o,l10n:this.l10n,accessibilityManager:this._accessibilityManager})),this._renderAnnotationEditorLayer())})}),function(gI){return hI(gI)});return this.xfaLayerFactory&&(this.xfaLayer||(this.xfaLayer=this.xfaLayerFactory.createXfaLayerBuilder({pageDiv:g,pdfPage:o})),this._renderXfaLayer()),this.structTreeLayerFactory&&this.textLayer&&this.canvas&&(this._onTextLayerRendered=gI=>{gI.pageNumber===this.id&&(this.eventBus._off("textlayerrendered",this._onTextLayerRendered),this._onTextLayerRendered=null,this.canvas&&this.pdfPage.getStructTree().then(U=>{if(!U||!this.canvas)return;const II=this.structTreeLayer.render(U);II.classList.add("structTree"),this.canvas.append(II)}))},this.eventBus._on("textlayerrendered",this._onTextLayerRendered),this.structTreeLayer=this.structTreeLayerFactory.createStructTreeLayerBuilder({pdfPage:o})),g.setAttribute("data-loaded",!0),this.eventBus.dispatch("pagerender",{source:this,pageNumber:this.id}),nI}paintOnCanvas(a){const i=(0,j.createPromiseCapability)(),I={promise:i.promise,onRenderContinue(II){II()},cancel(){U.cancel()},get separateAnnots(){return U.separateAnnots}},g=this.viewport,o=document.createElement("canvas");o.setAttribute("role","presentation"),o.hidden=!0;let X=!0;const b=function(){X&&(o.hidden=!1,X=!1)};a.append(o),this.canvas=o;const N=o.getContext("2d",{alpha:!1}),F=this.outputScale=new D.OutputScale;if(this.useOnlyCssZoom){const II=g.clone({scale:j.PixelsPerInch.PDF_TO_CSS_UNITS});F.sx*=II.width/g.width,F.sy*=II.height/g.height}if(this.maxCanvasPixels>0){const II=g.width*g.height,q=Math.sqrt(this.maxCanvasPixels/II);F.sx>q||F.sy>q?(F.sx=q,F.sy=q,this.hasRestrictedScaling=!0):this.hasRestrictedScaling=!1}const hI=(0,D.approximateFraction)(F.sx),YI=(0,D.approximateFraction)(F.sy);o.width=(0,D.roundToDivide)(g.width*F.sx,hI[0]),o.height=(0,D.roundToDivide)(g.height*F.sy,YI[0]),o.style.width=(0,D.roundToDivide)(g.width,hI[1])+"px",o.style.height=(0,D.roundToDivide)(g.height,YI[1])+"px",this.paintedViewportMap.set(o,g);const nI=F.scaled?[F.sx,0,0,F.sy,0,0]:null,gI={canvasContext:N,transform:nI,viewport:this.viewport,annotationMode:R(this,Z),optionalContentConfigPromise:this._optionalContentConfigPromise,annotationCanvasMap:this._annotationCanvasMap,pageColors:this.pageColors},U=this.pdfPage.render(gI);return U.onContinue=function(II){b(),I.onRenderContinue?I.onRenderContinue(II):II()},U.promise.then(function(){b(),i.resolve()},function(II){b(),i.reject(II)}),I}paintOnSvg(a){let i=!1;const I=()=>{if(i)throw new j.RenderingCancelledException(`Rendering cancelled, page ${this.id}`,"svg")},g=this.pdfPage,o=this.viewport.clone({scale:j.PixelsPerInch.PDF_TO_CSS_UNITS});return{promise:g.getOperatorList({annotationMode:R(this,Z)}).then(X=>(I(),new j.SVGGraphics(g.commonObjs,g.objs).getSVG(X,o).then(b=>{I(),this.svg=b,this.paintedViewportMap.set(b,o),b.style.width=a.style.width,b.style.height=a.style.height,this.renderingState=D.RenderingStates.FINISHED,a.append(b)}))),onRenderContinue(X){X()},cancel(){i=!0},get separateAnnots(){return!1}}}setPageLabel(a){this.pageLabel=typeof a=="string"?a:null,this.pageLabel!==null?this.div.setAttribute("data-page-label",this.pageLabel):this.div.removeAttribute("data-page-label")}get thumbnailCanvas(){const{initialOptionalContent:a,regularAnnotations:i}=R(this,p);return a&&i?this.canvas:null}}Z=new WeakMap,p=new WeakMap,T.PDFPageView=B},(z,T)=>{Object.defineProperty(T,"__esModule",{value:!0}),T.compatibilityParams=T.OptionKind=T.AppOptions=void 0;const r=Object.create(null);T.compatibilityParams=r;{const m=navigator.userAgent||"",d=navigator.platform||"",C=navigator.maxTouchPoints||1,l=/Android/.test(m),B=/\b(iPad|iPhone|iPod)(?=;)/.test(m)||d==="MacIntel"&&C>1;(function(){(B||l)&&(r.maxCanvasPixels=5242880)})()}const Z={VIEWER:2,API:4,WORKER:8,PREFERENCE:128};T.OptionKind=Z;const p={annotationEditorMode:{value:-1,kind:Z.VIEWER+Z.PREFERENCE},annotationMode:{value:2,kind:Z.VIEWER+Z.PREFERENCE},cursorToolOnLoad:{value:0,kind:Z.VIEWER+Z.PREFERENCE},defaultZoomValue:{value:"",kind:Z.VIEWER+Z.PREFERENCE},disableHistory:{value:!1,kind:Z.VIEWER},disablePageLabels:{value:!1,kind:Z.VIEWER+Z.PREFERENCE},enablePermissions:{value:!1,kind:Z.VIEWER+Z.PREFERENCE},enablePrintAutoRotate:{value:!0,kind:Z.VIEWER+Z.PREFERENCE},enableScripting:{value:!0,kind:Z.VIEWER+Z.PREFERENCE},externalLinkRel:{value:"noopener noreferrer nofollow",kind:Z.VIEWER},externalLinkTarget:{value:0,kind:Z.VIEWER+Z.PREFERENCE},historyUpdateUrl:{value:!1,kind:Z.VIEWER+Z.PREFERENCE},ignoreDestinationZoom:{value:!1,kind:Z.VIEWER+Z.PREFERENCE},imageResourcesPath:{value:"./images/",kind:Z.VIEWER},maxCanvasPixels:{value:16777216,kind:Z.VIEWER},forcePageColors:{value:!1,kind:Z.VIEWER+Z.PREFERENCE},pageColorsBackground:{value:"Canvas",kind:Z.VIEWER+Z.PREFERENCE},pageColorsForeground:{value:"CanvasText",kind:Z.VIEWER+Z.PREFERENCE},pdfBugEnabled:{value:!1,kind:Z.VIEWER+Z.PREFERENCE},printResolution:{value:150,kind:Z.VIEWER},sidebarViewOnLoad:{value:-1,kind:Z.VIEWER+Z.PREFERENCE},scrollModeOnLoad:{value:-1,kind:Z.VIEWER+Z.PREFERENCE},spreadModeOnLoad:{value:-1,kind:Z.VIEWER+Z.PREFERENCE},textLayerMode:{value:1,kind:Z.VIEWER+Z.PREFERENCE},useOnlyCssZoom:{value:!1,kind:Z.VIEWER+Z.PREFERENCE},viewerCssTheme:{value:0,kind:Z.VIEWER+Z.PREFERENCE},viewOnLoad:{value:0,kind:Z.VIEWER+Z.PREFERENCE},cMapPacked:{value:!0,kind:Z.API},cMapUrl:{value:"../web/cmaps/",kind:Z.API},disableAutoFetch:{value:!1,kind:Z.API+Z.PREFERENCE},disableFontFace:{value:!1,kind:Z.API+Z.PREFERENCE},disableRange:{value:!1,kind:Z.API+Z.PREFERENCE},disableStream:{value:!1,kind:Z.API+Z.PREFERENCE},docBaseUrl:{value:"",kind:Z.API},enableXfa:{value:!0,kind:Z.API+Z.PREFERENCE},fontExtraProperties:{value:!1,kind:Z.API},isEvalSupported:{value:!0,kind:Z.API},maxImageSize:{value:-1,kind:Z.API},pdfBug:{value:!1,kind:Z.API},standardFontDataUrl:{value:"../web/standard_fonts/",kind:Z.API},verbosity:{value:1,kind:Z.API},workerPort:{value:null,kind:Z.WORKER},workerSrc:{value:"../build/pdf.worker.js",kind:Z.WORKER}};p.defaultUrl={value:"compressed.tracemonkey-pldi-09.pdf",kind:Z.VIEWER},p.disablePreferences={value:!1,kind:Z.VIEWER},p.locale={value:navigator.language||"en-US",kind:Z.VIEWER},p.renderer={value:"canvas",kind:Z.VIEWER+Z.PREFERENCE},p.sandboxBundleSrc={value:"../build/pdf.sandbox.js",kind:Z.VIEWER};const j=Object.create(null);class D{constructor(){throw new Error("Cannot initialize AppOptions.")}static get(d){const C=j[d];if(C!==void 0)return C;const l=p[d];if(l!==void 0)return r[d]??l.value}static getAll(d=null){const C=Object.create(null);for(const l in p){const B=p[l];if(d){if(!(d&B.kind))continue;if(d===Z.PREFERENCE){const a=B.value,i=typeof a;if(i==="boolean"||i==="string"||i==="number"&&Number.isInteger(a)){C[l]=a;continue}throw new Error(`Invalid type for preference: ${l}`)}}const Y=j[l];C[l]=Y!==void 0?Y:r[l]??B.value}return C}static set(d,C){j[d]=C}static setAll(d){for(const C in d)j[C]=d[C]}static remove(d){delete j[d]}static _hasUserOptions(){return Object.keys(j).length>0}}T.AppOptions=D},(z,T,r)=>{var Z,p,j,D,m,d,C,l;Object.defineProperty(T,"__esModule",{value:!0}),T.TextAccessibilityManager=void 0;var B=r(7);const Y=class{constructor(){GI(this,C),GI(this,Z,!1),GI(this,p,null),GI(this,j,new Map),GI(this,D,new Map)}setTextMapping(i){XI(this,p,i)}enable(){if(R(this,Z))throw new Error("TextAccessibilityManager is already enabled.");if(!R(this,p))throw new Error("Text divs and strings have not been set.");if(XI(this,Z,!0),XI(this,p,R(this,p).slice()),R(this,p).sort(bI(Y,m,d)),R(this,j).size>0){const i=R(this,p);for(const[I,g]of R(this,j)){if(!document.getElementById(I)){R(this,j).delete(I);continue}bI(this,C,l).call(this,I,i[g])}}for(const[i,I]of R(this,D))this.addPointerInTextLayer(i,I);R(this,D).clear()}disable(){R(this,Z)&&(R(this,D).clear(),XI(this,p,null),XI(this,Z,!1))}removePointerInTextLayer(i){if(!R(this,Z)){R(this,D).delete(i);return}const I=R(this,p);if(!I||I.length===0)return;const{id:g}=i,o=R(this,j).get(g);if(o===void 0)return;const X=I[o];R(this,j).delete(g);let b=X.getAttribute("aria-owns");b!=null&&b.includes(g)&&(b=b.split(" ").filter(N=>N!==g).join(" "),b?X.setAttribute("aria-owns",b):(X.removeAttribute("aria-owns"),X.setAttribute("role","presentation")))}addPointerInTextLayer(i,I){const{id:g}=i;if(!g)return;if(!R(this,Z)){R(this,D).set(i,I);return}I&&this.removePointerInTextLayer(i);const o=R(this,p);if(!o||o.length===0)return;const X=(0,B.binarySearchFirstItem)(o,N=>{var F;return bI(F=Y,m,d).call(F,i,N)<0}),b=Math.max(0,X-1);bI(this,C,l).call(this,g,o[b]),R(this,j).set(g,b)}moveElementInDOM(i,I,g,o){if(this.addPointerInTextLayer(g,o),!i.hasChildNodes()){i.append(I);return}const X=Array.from(i.childNodes).filter(F=>F!==I);if(X.length===0)return;const b=g||I,N=(0,B.binarySearchFirstItem)(X,F=>{var hI;return bI(hI=Y,m,d).call(hI,b,F)<0});N===0?X[0].before(I):X[N-1].after(I)}};let a=Y;Z=new WeakMap,p=new WeakMap,j=new WeakMap,D=new WeakMap,m=new WeakSet,d=function(i,I){const g=i.getBoundingClientRect(),o=I.getBoundingClientRect();if(g.width===0&&g.height===0)return 1;if(o.width===0&&o.height===0)return-1;const X=g.y,b=g.y+g.height,N=g.y+g.height/2,F=o.y,hI=o.y+o.height,YI=o.y+o.height/2;if(N<=F&&YI>=b)return-1;if(YI<=X&&N>=hI)return 1;const nI=g.x+g.width/2,gI=o.x+o.width/2;return nI-gI},C=new WeakSet,l=function(i,I){const g=I.getAttribute("aria-owns");g!=null&&g.includes(i)||I.setAttribute("aria-owns",g?`${g} ${i}`:i),I.removeAttribute("role")},GI(a,m),T.TextAccessibilityManager=a},(z,T,r)=>{Object.defineProperty(T,"__esModule",{value:!0}),T.PDFRenderingQueue=void 0;var Z=r(3),p=r(7);const j=3e4;class D{constructor(){this.pdfViewer=null,this.pdfThumbnailViewer=null,this.onIdle=null,this.highestPriorityPage=null,this.idleTimeout=null,this.printing=!1,this.isThumbnailViewEnabled=!1}setViewer(d){this.pdfViewer=d}setThumbnailViewer(d){this.pdfThumbnailViewer=d}isHighestPriority(d){return this.highestPriorityPage===d.renderingId}hasViewer(){return!!this.pdfViewer}renderHighestPriority(d){var C;this.idleTimeout&&(clearTimeout(this.idleTimeout),this.idleTimeout=null),!this.pdfViewer.forceRendering(d)&&(this.isThumbnailViewEnabled&&(C=this.pdfThumbnailViewer)!=null&&C.forceRendering()||this.printing||this.onIdle&&(this.idleTimeout=setTimeout(this.onIdle.bind(this),j)))}getHighestPriority(d,C,l,B=!1){const Y=d.views,a=Y.length;if(a===0)return null;for(let X=0;X<a;X++){const b=Y[X].view;if(!this.isViewFinished(b))return b}const i=d.first.id,I=d.last.id;if(I-i+1>a){const X=d.ids;for(let b=1,N=I-i;b<N;b++){const F=l?i+b:I-b;if(X.has(F))continue;const hI=C[F-1];if(!this.isViewFinished(hI))return hI}}let g=l?I:i-2,o=C[g];return o&&!this.isViewFinished(o)||B&&(g+=l?1:-1,o=C[g],o&&!this.isViewFinished(o))?o:null}isViewFinished(d){return d.renderingState===p.RenderingStates.FINISHED}renderView(d){switch(d.renderingState){case p.RenderingStates.FINISHED:return!1;case p.RenderingStates.PAUSED:this.highestPriorityPage=d.renderingId,d.resume();break;case p.RenderingStates.RUNNING:this.highestPriorityPage=d.renderingId;break;case p.RenderingStates.INITIAL:this.highestPriorityPage=d.renderingId,d.draw().finally(()=>{this.renderHighestPriority()}).catch(C=>{C instanceof Z.RenderingCancelledException||console.error(`renderView: "${C}"`)});break}return!0}}T.PDFRenderingQueue=D},(z,T)=>{Object.defineProperty(T,"__esModule",{value:!0}),T.TextHighlighter=void 0;class r{constructor({findController:p,eventBus:j,pageIndex:D}){this.findController=p,this.matches=[],this.eventBus=j,this.pageIdx=D,this._onUpdateTextLayerMatches=null,this.textDivs=null,this.textContentItemsStr=null,this.enabled=!1}setTextMapping(p,j){this.textDivs=p,this.textContentItemsStr=j}enable(){if(!this.textDivs||!this.textContentItemsStr)throw new Error("Text divs and strings have not been set.");if(this.enabled)throw new Error("TextHighlighter is already enabled.");this.enabled=!0,this._onUpdateTextLayerMatches||(this._onUpdateTextLayerMatches=p=>{(p.pageIndex===this.pageIdx||p.pageIndex===-1)&&this._updateMatches()},this.eventBus._on("updatetextlayermatches",this._onUpdateTextLayerMatches)),this._updateMatches()}disable(){this.enabled&&(this.enabled=!1,this._onUpdateTextLayerMatches&&(this.eventBus._off("updatetextlayermatches",this._onUpdateTextLayerMatches),this._onUpdateTextLayerMatches=null))}_convertMatches(p,j){if(!p)return[];const{textContentItemsStr:D}=this;let m=0,d=0;const C=D.length-1,l=[];for(let B=0,Y=p.length;B<Y;B++){let a=p[B];for(;m!==C&&a>=d+D[m].length;)d+=D[m].length,m++;m===D.length&&console.error("Could not find a matching mapping");const i={begin:{divIdx:m,offset:a-d}};for(a+=j[B];m!==C&&a>d+D[m].length;)d+=D[m].length,m++;i.end={divIdx:m,offset:a-d},l.push(i)}return l}_renderMatches(p){if(p.length===0)return;const{findController:j,pageIdx:D}=this,{textContentItemsStr:m,textDivs:d}=this,C=D===j.selected.pageIdx,l=j.selected.matchIdx,B=j.state.highlightAll;let Y=null;const a={divIdx:-1,offset:void 0};function i(X,b){const N=X.divIdx;return d[N].textContent="",I(N,0,X.offset,b)}function I(X,b,N,F){let hI=d[X];if(hI.nodeType===Node.TEXT_NODE){const gI=document.createElement("span");hI.before(gI),gI.append(hI),d[X]=gI,hI=gI}const YI=m[X].substring(b,N),nI=document.createTextNode(YI);if(F){const gI=document.createElement("span");return gI.className=`${F} appended`,gI.append(nI),hI.append(gI),F.includes("selected")?gI.offsetLeft:0}return hI.append(nI),0}let g=l,o=g+1;if(B)g=0,o=p.length;else if(!C)return;for(let X=g;X<o;X++){const b=p[X],N=b.begin,F=b.end,hI=C&&X===l,YI=hI?" selected":"";let nI=0;if(!Y||N.divIdx!==Y.divIdx?(Y!==null&&I(Y.divIdx,Y.offset,a.offset),i(N)):I(Y.divIdx,Y.offset,N.offset),N.divIdx===F.divIdx)nI=I(N.divIdx,N.offset,F.offset,"highlight"+YI);else{nI=I(N.divIdx,N.offset,a.offset,"highlight begin"+YI);for(let gI=N.divIdx+1,U=F.divIdx;gI<U;gI++)d[gI].className="highlight middle"+YI;i(F,"highlight end"+YI)}Y=F,hI&&j.scrollMatchIntoView({element:d[N.divIdx],selectedLeft:nI,pageIndex:D,matchIndex:l})}Y&&I(Y.divIdx,Y.offset,a.offset)}_updateMatches(){if(!this.enabled)return;const{findController:p,matches:j,pageIdx:D}=this,{textContentItemsStr:m,textDivs:d}=this;let C=-1;for(let Y=0,a=j.length;Y<a;Y++){const i=j[Y],I=Math.max(C,i.begin.divIdx);for(let g=I,o=i.end.divIdx;g<=o;g++){const X=d[g];X.textContent=m[g],X.className=""}C=i.end.divIdx+1}if(!(p!=null&&p.highlightMatches))return;const l=p.pageMatches[D]||null,B=p.pageMatchesLength[D]||null;this.matches=this._convertMatches(l,B),this._renderMatches(this.matches)}}T.TextHighlighter=r},(z,T,r)=>{Object.defineProperty(T,"__esModule",{value:!0}),T.DownloadManager=void 0;var Z=r(3);function p(D,m){const d=document.createElement("a");if(!d.click)throw new Error('DownloadManager: "a.click()" is not supported.');d.href=D,d.target="_parent","download"in d&&(d.download=m),(document.body||document.documentElement).append(d),d.click(),d.remove()}class j{constructor(){this._openBlobUrls=new WeakMap}downloadUrl(m,d){if(!(0,Z.createValidAbsoluteUrl)(m,"http://example.com")){console.error(`downloadUrl - not a valid URL: ${m}`);return}p(m+"#pdfjs.action=download",d)}downloadData(m,d,C){const l=URL.createObjectURL(new Blob([m],{type:C}));p(l,d)}openOrDownloadData(m,d,C){const l=(0,Z.isPdfFile)(C),B=l?"application/pdf":"";if(l){let Y=this._openBlobUrls.get(m);Y||(Y=URL.createObjectURL(new Blob([d],{type:B})),this._openBlobUrls.set(m,Y));let a;a="?file="+encodeURIComponent(Y+"#"+C);try{return window.open(a),!0}catch(i){console.error(`openOrDownloadData: ${i}`),URL.revokeObjectURL(Y),this._openBlobUrls.delete(m)}}return this.downloadData(d,C,B),!1}download(m,d,C){const l=URL.createObjectURL(m);p(l,C)}}T.DownloadManager=j},(z,T)=>{Object.defineProperty(T,"__esModule",{value:!0}),T.WaitOnType=T.EventBus=T.AutomationEventBus=void 0,T.waitOnEventOrTimeout=Z;const r={EVENT:"event",TIMEOUT:"timeout"};T.WaitOnType=r;function Z({target:D,name:m,delay:d=0}){return new Promise(function(C,l){if(typeof D!="object"||!(m&&typeof m=="string")||!(Number.isInteger(d)&&d>=0))throw new Error("waitOnEventOrTimeout - invalid parameters.");function B(I){D instanceof p?D._off(m,Y):D.removeEventListener(m,Y),i&&clearTimeout(i),C(I)}const Y=B.bind(null,r.EVENT);D instanceof p?D._on(m,Y):D.addEventListener(m,Y);const a=B.bind(null,r.TIMEOUT),i=setTimeout(a,d)})}class p{constructor(){this._listeners=Object.create(null)}on(m,d,C=null){this._on(m,d,{external:!0,once:C==null?void 0:C.once})}off(m,d,C=null){this._off(m,d,{external:!0,once:C==null?void 0:C.once})}dispatch(m,d){const C=this._listeners[m];if(!C||C.length===0)return;let l;for(const{listener:B,external:Y,once:a}of C.slice(0)){if(a&&this._off(m,B),Y){(l||(l=[])).push(B);continue}B(d)}if(l){for(const B of l)B(d);l=null}}_on(m,d,C=null){var l;((l=this._listeners)[m]||(l[m]=[])).push({listener:d,external:(C==null?void 0:C.external)===!0,once:(C==null?void 0:C.once)===!0})}_off(m,d,C=null){const l=this._listeners[m];if(l){for(let B=0,Y=l.length;B<Y;B++)if(l[B].listener===d){l.splice(B,1);return}}}}T.EventBus=p;class j extends p{dispatch(m,d){throw new Error("Not implemented: AutomationEventBus.dispatch")}}T.AutomationEventBus=j},(z,T,r)=>{Object.defineProperty(T,"__esModule",{value:!0}),T.GenericL10n=void 0,r(21);var Z=r(4);const p=document.webL10n;class j{constructor(m){this._lang=m,this._ready=new Promise((d,C)=>{p.setLanguage((0,Z.fixupLangCode)(m),()=>{d(p)})})}async getLanguage(){return(await this._ready).getLanguage()}async getDirection(){return(await this._ready).getDirection()}async get(m,d=null,C=(0,Z.getL10nFallback)(m,d)){return(await this._ready).get(m,d,C)}async translate(m){return(await this._ready).translate(m)}}T.GenericL10n=j},()=>{document.webL10n=function(z,T,r){var Z={},p="",j="textContent",D="",m={},d="loading",C=!0;function l(){return T.querySelectorAll('link[type="application/l10n"]')}function B(){var gI=T.querySelector('script[type="application/l10n"]');return gI?JSON.parse(gI.innerHTML):null}function Y(gI){return gI?gI.querySelectorAll("*[data-l10n-id]"):[]}function a(gI){if(!gI)return{};var U=gI.getAttribute("data-l10n-id"),II=gI.getAttribute("data-l10n-args"),q={};if(II)try{q=JSON.parse(II)}catch{console.warn("could not parse arguments for #"+U)}return{id:U,args:q}}function i(gI,U,II){U=U||function(mI){},II=II||function(){};var q=new XMLHttpRequest;q.open("GET",gI,C),q.overrideMimeType&&q.overrideMimeType("text/plain; charset=utf-8"),q.onreadystatechange=function(){q.readyState==4&&(q.status==200||q.status===0?U(q.responseText):II())},q.onerror=II,q.ontimeout=II;try{q.send(null)}catch{II()}}function I(gI,U,II,q){var mI=gI.replace(/[^\/]*$/,"")||"./";function NI(J){return J.lastIndexOf("\\")<0?J:J.replace(/\\\\/g,"\\").replace(/\\n/g,`
`).replace(/\\r/g,"\r").replace(/\\t/g,"	").replace(/\\b/g,"\b").replace(/\\f/g,"\f").replace(/\\{/g,"{").replace(/\\}/g,"}").replace(/\\"/g,'"').replace(/\\'/g,"'")}function BI(J,e){var w={},x=/^\s*|\s*$/,E=/^\s*#|^\s*$/,P=/^\s*\[(.*)\]\s*$/,iI=/^\s*@import\s+url\((.*)\)\s*$/i,aI=/^([^=\s]*)\s*=\s*(.+)$/;function eI(W,L,S){var Q=W.replace(x,"").split(/[\r\n]+/),lI="*",uI=U.split("-",1)[0],MI=!1,ZI="";function WI(){for(;;){if(!Q.length){S();return}var tI=Q.shift();if(!E.test(tI)){if(L){if(ZI=P.exec(tI),ZI){lI=ZI[1].toLowerCase(),MI=lI!=="*"&&lI!==U&&lI!==uI;continue}else if(MI)continue;if(ZI=iI.exec(tI),ZI){A(mI+ZI[1],WI);return}}var O=tI.match(aI);O&&O.length==3&&(w[O[1]]=NI(O[2]))}}}WI()}function A(W,L){i(W,function(S){eI(S,!1,L)},function(){console.warn(W+" not found."),L()})}eI(J,!0,function(){e(w)})}i(gI,function(J){p+=J,BI(J,function(e){for(var w in e){var x,E,P=w.lastIndexOf(".");P>0?(x=w.substring(0,P),E=w.substring(P+1)):(x=w,E=j),Z[x]||(Z[x]={}),Z[x][E]=e[w]}II&&II()})},q)}function g(gI,U){gI&&(gI=gI.toLowerCase()),U=U||function(){},o(),D=gI;var II=l(),q=II.length;if(q===0){var mI=B();if(mI&&mI.locales&&mI.default_locale){if(console.log("using the embedded JSON directory, early way out"),Z=mI.locales[gI],!Z){var NI=mI.default_locale.toLowerCase();for(var BI in mI.locales)if(BI=BI.toLowerCase(),BI===gI){Z=mI.locales[gI];break}else BI===NI&&(Z=mI.locales[NI])}U()}else console.log("no resource to load, early way out");d="complete";return}var J=null,e=0;J=function(){e++,e>=q&&(U(),d="complete")};function w(P){var iI=P.href;this.load=function(aI,eI){I(iI,aI,eI,function(){console.warn(iI+" not found."),console.warn('"'+aI+'" resource not found'),D="",eI()})}}for(var x=0;x<q;x++){var E=new w(II[x]);E.load(gI,J)}}function o(){Z={},p="",D=""}function X(gI){var U={af:3,ak:4,am:4,ar:1,asa:3,az:0,be:11,bem:3,bez:3,bg:3,bh:4,bm:0,bn:3,bo:0,br:20,brx:3,bs:11,ca:3,cgg:3,chr:3,cs:12,cy:17,da:3,de:3,dv:3,dz:0,ee:3,el:3,en:3,eo:3,es:3,et:3,eu:3,fa:0,ff:5,fi:3,fil:4,fo:3,fr:5,fur:3,fy:3,ga:8,gd:24,gl:3,gsw:3,gu:3,guw:4,gv:23,ha:3,haw:3,he:2,hi:4,hr:11,hu:0,id:0,ig:0,ii:0,is:3,it:3,iu:7,ja:0,jmc:3,jv:0,ka:0,kab:5,kaj:3,kcg:3,kde:0,kea:0,kk:3,kl:3,km:0,kn:0,ko:0,ksb:3,ksh:21,ku:3,kw:7,lag:18,lb:3,lg:3,ln:4,lo:0,lt:10,lv:6,mas:3,mg:4,mk:16,ml:3,mn:3,mo:9,mr:3,ms:0,mt:15,my:0,nah:3,naq:7,nb:3,nd:3,ne:3,nl:3,nn:3,no:3,nr:3,nso:4,ny:3,nyn:3,om:3,or:3,pa:3,pap:3,pl:13,ps:3,pt:3,rm:3,ro:9,rof:3,ru:11,rwk:3,sah:0,saq:3,se:7,seh:3,ses:0,sg:0,sh:11,shi:19,sk:12,sl:14,sma:7,smi:7,smj:7,smn:7,sms:7,sn:3,so:3,sq:3,sr:11,ss:3,ssy:3,st:3,sv:3,sw:3,syr:3,ta:3,te:3,teo:3,th:0,ti:4,tig:3,tk:3,tl:4,tn:3,to:0,tr:0,ts:3,tzm:22,uk:11,ur:3,ve:3,vi:0,vun:3,wa:4,wae:3,wo:0,xh:3,xog:3,yo:0,zh:0,zu:3};function II(BI,J){return J.indexOf(BI)!==-1}function q(BI,J,e){return J<=BI&&BI<=e}var mI={0:function(BI){return"other"},1:function(BI){return q(BI%100,3,10)?"few":BI===0?"zero":q(BI%100,11,99)?"many":BI==2?"two":BI==1?"one":"other"},2:function(BI){return BI!==0&&BI%10===0?"many":BI==2?"two":BI==1?"one":"other"},3:function(BI){return BI==1?"one":"other"},4:function(BI){return q(BI,0,1)?"one":"other"},5:function(BI){return q(BI,0,2)&&BI!=2?"one":"other"},6:function(BI){return BI===0?"zero":BI%10==1&&BI%100!=11?"one":"other"},7:function(BI){return BI==2?"two":BI==1?"one":"other"},8:function(BI){return q(BI,3,6)?"few":q(BI,7,10)?"many":BI==2?"two":BI==1?"one":"other"},9:function(BI){return BI===0||BI!=1&&q(BI%100,1,19)?"few":BI==1?"one":"other"},10:function(BI){return q(BI%10,2,9)&&!q(BI%100,11,19)?"few":BI%10==1&&!q(BI%100,11,19)?"one":"other"},11:function(BI){return q(BI%10,2,4)&&!q(BI%100,12,14)?"few":BI%10===0||q(BI%10,5,9)||q(BI%100,11,14)?"many":BI%10==1&&BI%100!=11?"one":"other"},12:function(BI){return q(BI,2,4)?"few":BI==1?"one":"other"},13:function(BI){return q(BI%10,2,4)&&!q(BI%100,12,14)?"few":BI!=1&&q(BI%10,0,1)||q(BI%10,5,9)||q(BI%100,12,14)?"many":BI==1?"one":"other"},14:function(BI){return q(BI%100,3,4)?"few":BI%100==2?"two":BI%100==1?"one":"other"},15:function(BI){return BI===0||q(BI%100,2,10)?"few":q(BI%100,11,19)?"many":BI==1?"one":"other"},16:function(BI){return BI%10==1&&BI!=11?"one":"other"},17:function(BI){return BI==3?"few":BI===0?"zero":BI==6?"many":BI==2?"two":BI==1?"one":"other"},18:function(BI){return BI===0?"zero":q(BI,0,2)&&BI!==0&&BI!=2?"one":"other"},19:function(BI){return q(BI,2,10)?"few":q(BI,0,1)?"one":"other"},20:function(BI){return(q(BI%10,3,4)||BI%10==9)&&!(q(BI%100,10,19)||q(BI%100,70,79)||q(BI%100,90,99))?"few":BI%1e6===0&&BI!==0?"many":BI%10==2&&!II(BI%100,[12,72,92])?"two":BI%10==1&&!II(BI%100,[11,71,91])?"one":"other"},21:function(BI){return BI===0?"zero":BI==1?"one":"other"},22:function(BI){return q(BI,0,1)||q(BI,11,99)?"one":"other"},23:function(BI){return q(BI%10,1,2)||BI%20===0?"one":"other"},24:function(BI){return q(BI,3,10)||q(BI,13,19)?"few":II(BI,[2,12])?"two":II(BI,[1,11])?"one":"other"}},NI=U[gI.replace(/-.*$/,"")];return NI in mI?mI[NI]:(console.warn("plural form unknown for ["+gI+"]"),function(){return"other"})}m.plural=function(gI,U,II,q){var mI=parseFloat(U);if(isNaN(mI)||q!=j)return gI;m._pluralRules||(m._pluralRules=X(D));var NI="["+m._pluralRules(mI)+"]";return mI===0&&II+"[zero]"in Z?gI=Z[II+"[zero]"][q]:mI==1&&II+"[one]"in Z?gI=Z[II+"[one]"][q]:mI==2&&II+"[two]"in Z?gI=Z[II+"[two]"][q]:II+NI in Z?gI=Z[II+NI][q]:II+"[other]"in Z&&(gI=Z[II+"[other]"][q]),gI};function b(gI,U,II){var q=Z[gI];if(!q){if(console.warn("#"+gI+" is undefined."),!II)return null;q=II}var mI={};for(var NI in q){var BI=q[NI];BI=N(BI,U,gI,NI),BI=F(BI,U,gI),mI[NI]=BI}return mI}function N(gI,U,II,q){var mI=/\{\[\s*([a-zA-Z]+)\(([a-zA-Z]+)\)\s*\]\}/,NI=mI.exec(gI);if(!NI||!NI.length)return gI;var BI=NI[1],J=NI[2],e;if(U&&J in U?e=U[J]:J in Z&&(e=Z[J]),BI in m){var w=m[BI];gI=w(gI,e,II,q)}return gI}function F(gI,U,II){var q=/\{\{\s*(.+?)\s*\}\}/g;return gI.replace(q,function(mI,NI){return U&&NI in U?U[NI]:NI in Z?Z[NI]:(console.log("argument {{"+NI+"}} for #"+II+" is undefined."),mI)})}function hI(gI){var U=a(gI);if(U.id){var II=b(U.id,U.args);if(!II){console.warn("#"+U.id+" is undefined.");return}if(II[j]){if(YI(gI)===0)gI[j]=II[j];else{for(var q=gI.childNodes,mI=!1,NI=0,BI=q.length;NI<BI;NI++)q[NI].nodeType===3&&/\S/.test(q[NI].nodeValue)&&(mI?q[NI].nodeValue="":(q[NI].nodeValue=II[j],mI=!0));if(!mI){var J=T.createTextNode(II[j]);gI.prepend(J)}}delete II[j]}for(var e in II)gI[e]=II[e]}}function YI(gI){if(gI.children)return gI.children.length;if(typeof gI.childElementCount<"u")return gI.childElementCount;for(var U=0,II=0;II<gI.childNodes.length;II++)U+=gI.nodeType===1?1:0;return U}function nI(gI){gI=gI||T.documentElement;for(var U=Y(gI),II=U.length,q=0;q<II;q++)hI(U[q]);hI(gI)}return{get:function(gI,U,II){var q=gI.lastIndexOf("."),mI=j;q>0&&(mI=gI.substring(q+1),gI=gI.substring(0,q));var NI;II&&(NI={},NI[mI]=II);var BI=b(gI,U,NI);return BI&&mI in BI?BI[mI]:"{{"+gI+"}}"},getData:function(){return Z},getText:function(){return p},getLanguage:function(){return D},setLanguage:function(gI,U){g(gI,function(){U&&U()})},getDirection:function(){var gI=["ar","he","fa","ps","ur"],U=D.split("-",1)[0];return gI.indexOf(U)>=0?"rtl":"ltr"},translate:nI,getReadyState:function(){return d},ready:function(gI){if(gI)d=="complete"||d=="interactive"?z.setTimeout(function(){gI()}):T.addEventListener&&T.addEventListener("localized",function U(){T.removeEventListener("localized",U),gI()});else return}}}(window,document)},(z,T,r)=>{var Z,p,j,D,m,d,C,l,B,Y,a,i,I,g,o,X,b,N,F,hI,YI,nI,gI,U,II,q,mI,NI,BI,J,e,w,x,E,P,iI,aI,eI,A,W;Object.defineProperty(T,"__esModule",{value:!0}),T.PDFFindController=T.FindState=void 0;var L=r(7),S=r(3),Q=r(23);const lI={FOUND:0,NOT_FOUND:1,WRAPPED:2,PENDING:3};T.FindState=lI;const uI=250,MI=-50,ZI=-400,WI={"‐":"-","‘":"'","’":"'","‚":"'","‛":"'","“":'"',"”":'"',"„":'"',"‟":'"',"¼":"1/4","½":"1/2","¾":"3/4"},tI=new Set([12441,12442,2381,2509,2637,2765,2893,3021,3149,3277,3387,3388,3405,3530,3642,3770,3972,4153,4154,5908,5940,6098,6752,6980,7082,7083,7154,7155,11647,43014,43052,43204,43347,43456,43766,44013,3158,3953,3954,3962,3963,3964,3965,3968,3956]),O=[...tI.values()].map(JI=>String.fromCharCode(JI)).join(""),f=/\p{M}+/gu,v=/([.*+?^${}()|[\]\\])|(\p{P})|(\s+)|(\p{M})|(\p{L})/gu,RI=/([^\p{M}])\p{M}*$/u,pI=/^\p{M}*([^\p{M}])/u,DI=/[\uAC00-\uD7AF\uFA6C\uFACF-\uFAD1\uFAD5-\uFAD7]+/g,FI=new Map,TI="[\\u1100-\\u1112\\ud7a4-\\ud7af\\ud84a\\ud84c\\ud850\\ud854\\ud857\\ud85f]";let vI=null,fI=null;function PI(JI){const yI=[];let HI;for(;(HI=DI.exec(JI))!==null;){let{index:OI}=HI;for(const gg of HI[0]){let Ig=FI.get(gg);Ig||(Ig=gg.normalize("NFD").length,FI.set(gg,Ig)),yI.push([Ig,OI++])}}let cI;if(yI.length===0&&vI)cI=vI;else if(yI.length>0&&fI)cI=fI;else{const OI=`([${Object.keys(WI).join("")}])|(\\p{M}+(?:-\\n)?)|(\\S-\\n)|(\\n)`;yI.length===0?cI=vI=new RegExp(OI+"|(\\u0000)","gum"):cI=fI=new RegExp(OI+`|(${TI})`,"gum")}const CI=[];for(;(HI=f.exec(JI))!==null;)CI.push([HI[0].length,HI.index]);let AI=JI.normalize("NFD");const KI=[[0,0]];let LI=0,rI=0,kI=0,xI=0,_I=0,$I=!1;return AI=AI.replace(cI,(OI,gg,Ig,Ag,qI,lg,ig)=>{var og,Zg;if(ig-=xI,gg){const sg=WI[OI],Cg=sg.length;for(let dg=1;dg<Cg;dg++)KI.push([ig-kI+dg,kI-dg]);return kI-=Cg-1,sg}if(Ig){const sg=Ig.endsWith(`
`),Cg=sg?Ig.length-2:Ig.length;$I=!0;let dg=Cg;ig+_I===((og=CI[LI])==null?void 0:og[1])&&(dg-=CI[LI][0],++LI);for(let Gg=1;Gg<=dg;Gg++)KI.push([ig-1-kI+Gg,kI-Gg]);return kI-=dg,xI+=dg,sg?(ig+=Cg-1,KI.push([ig-kI+1,1+kI]),kI+=1,xI+=1,_I+=1,Ig.slice(0,Cg)):Ig}if(Ag)return KI.push([ig-kI+1,1+kI]),kI+=1,xI+=1,_I+=1,Ag.charAt(0);if(qI)return KI.push([ig-kI+1,kI-1]),kI-=1,xI+=1,_I+=1," ";if(ig+_I===((Zg=yI[rI])==null?void 0:Zg[1])){const sg=yI[rI][0]-1;++rI;for(let Cg=1;Cg<=sg;Cg++)KI.push([ig-(kI-Cg),kI-Cg]);kI-=sg,xI+=sg}return lg}),KI.push([AI.length,kI]),[AI,KI,$I]}function EI(JI,yI,HI){if(!JI)return[yI,HI];const cI=yI,CI=yI+HI;let AI=(0,L.binarySearchFirstItem)(JI,LI=>LI[0]>=cI);JI[AI][0]>cI&&--AI;let KI=(0,L.binarySearchFirstItem)(JI,LI=>LI[0]>=CI,AI);return JI[KI][0]>CI&&--KI,[cI+JI[AI][1],HI+JI[KI][1]-JI[AI][1]]}class SI{constructor({linkService:yI,eventBus:HI}){GI(this,Z),GI(this,j),GI(this,m),GI(this,C),GI(this,B),GI(this,a),GI(this,I),GI(this,o),GI(this,b),GI(this,F),GI(this,YI),GI(this,gI),GI(this,II),GI(this,mI),GI(this,BI),GI(this,e),GI(this,x),GI(this,P),GI(this,aI),GI(this,A),this._linkService=yI,this._eventBus=HI,bI(this,j,D).call(this),HI._on("find",bI(this,Z,p).bind(this)),HI._on("findbarclose",bI(this,x,E).bind(this))}get highlightMatches(){return this._highlightMatches}get pageMatches(){return this._pageMatches}get pageMatchesLength(){return this._pageMatchesLength}get selected(){return this._selected}get state(){return this._state}setDocument(yI){this._pdfDocument&&bI(this,j,D).call(this),yI&&(this._pdfDocument=yI,this._firstPageCapability.resolve())}scrollMatchIntoView({element:yI=null,selectedLeft:HI=0,pageIndex:cI=-1,matchIndex:CI=-1}){if(!this._scrollMatches||!yI||CI===-1||CI!==this._selected.matchIdx||cI===-1||cI!==this._selected.pageIdx)return;this._scrollMatches=!1;const AI={top:MI,left:HI+ZI};(0,L.scrollIntoView)(yI,AI,!0)}}Z=new WeakSet,p=function(JI){if(!JI)return;const yI=this._pdfDocument,{type:HI}=JI;(this._state===null||bI(this,C,l).call(this,JI))&&(this._dirtyMatch=!0),this._state=JI,HI!=="highlightallchange"&&bI(this,A,W).call(this,lI.PENDING),this._firstPageCapability.promise.then(()=>{if(!this._pdfDocument||yI&&this._pdfDocument!==yI)return;bI(this,b,N).call(this);const cI=!this._highlightMatches,CI=!!this._findTimeout;this._findTimeout&&(clearTimeout(this._findTimeout),this._findTimeout=null),HI?this._dirtyMatch?bI(this,gI,U).call(this):HI==="again"?(bI(this,gI,U).call(this),cI&&this._state.highlightAll&&bI(this,YI,nI).call(this)):HI==="highlightallchange"?(CI?bI(this,gI,U).call(this):this._highlightMatches=!0,bI(this,YI,nI).call(this)):bI(this,gI,U).call(this):this._findTimeout=setTimeout(()=>{bI(this,gI,U).call(this),this._findTimeout=null},uI)})},j=new WeakSet,D=function(){this._highlightMatches=!1,this._scrollMatches=!1,this._pdfDocument=null,this._pageMatches=[],this._pageMatchesLength=[],this._state=null,this._selected={pageIdx:-1,matchIdx:-1},this._offset={pageIdx:null,matchIdx:null,wrapped:!1},this._extractTextPromises=[],this._pageContents=[],this._pageDiffs=[],this._hasDiacritics=[],this._matchesCountTotal=0,this._pagesToSearch=null,this._pendingFindMatches=new Set,this._resumePageIdx=null,this._dirtyMatch=!1,clearTimeout(this._findTimeout),this._findTimeout=null,this._firstPageCapability=(0,S.createPromiseCapability)()},m=new WeakSet,d=function(){return this._state.query!==this._rawQuery&&(this._rawQuery=this._state.query,[this._normalizedQuery]=PI(this._state.query)),this._normalizedQuery},C=new WeakSet,l=function(JI){if(JI.query!==this._state.query)return!0;switch(JI.type){case"again":const yI=this._selected.pageIdx+1,HI=this._linkService;return yI>=1&&yI<=HI.pagesCount&&yI!==HI.page&&!HI.isPageVisible(yI);case"highlightallchange":return!1}return!0},B=new WeakSet,Y=function(JI,yI,HI){let cI=JI.slice(0,yI).match(RI);if(cI){const CI=JI.charCodeAt(yI),AI=cI[1].charCodeAt(0);if((0,Q.getCharacterType)(CI)===(0,Q.getCharacterType)(AI))return!1}if(cI=JI.slice(yI+HI).match(pI),cI){const CI=JI.charCodeAt(yI+HI-1),AI=cI[1].charCodeAt(0);if((0,Q.getCharacterType)(CI)===(0,Q.getCharacterType)(AI))return!1}return!0},a=new WeakSet,i=function(JI,yI,HI,cI){const CI=[],AI=[],KI=this._pageDiffs[HI];let LI;for(;(LI=JI.exec(cI))!==null;){if(yI&&!bI(this,B,Y).call(this,cI,LI.index,LI[0].length))continue;const[rI,kI]=EI(KI,LI.index,LI[0].length);kI&&(CI.push(rI),AI.push(kI))}this._pageMatches[HI]=CI,this._pageMatchesLength[HI]=AI},I=new WeakSet,g=function(JI,yI){const{matchDiacritics:HI}=this._state;let cI=!1;JI=JI.replace(v,(AI,KI,LI,rI,kI,xI)=>KI?`[ ]*\\${KI}[ ]*`:LI?`[ ]*${LI}[ ]*`:rI?"[ ]+":HI?kI||xI:kI?tI.has(kI.charCodeAt(0))?kI:"":yI?(cI=!0,`${xI}\\p{M}*`):xI);const CI="[ ]*";return JI.endsWith(CI)&&(JI=JI.slice(0,JI.length-CI.length)),HI&&yI&&(cI=!0,JI=`${JI}(?=[${O}]|[^\\p{M}]|$)`),[cI,JI]},o=new WeakSet,X=function(JI){let yI=R(this,m,d);if(yI.length===0)return;const{caseSensitive:HI,entireWord:cI,phraseSearch:CI}=this._state,AI=this._pageContents[JI],KI=this._hasDiacritics[JI];let LI=!1;if(CI)[LI,yI]=bI(this,I,g).call(this,yI,KI);else{const xI=yI.match(/\S+/g);xI&&(yI=xI.sort().reverse().map(_I=>{const[$I,OI]=bI(this,I,g).call(this,_I,KI);return LI||(LI=$I),`(${OI})`}).join("|"))}const rI=`g${LI?"u":""}${HI?"":"i"}`;yI=new RegExp(yI,rI),bI(this,a,i).call(this,yI,cI,JI,AI),this._state.highlightAll&&bI(this,F,hI).call(this,JI),this._resumePageIdx===JI&&(this._resumePageIdx=null,bI(this,mI,NI).call(this));const kI=this._pageMatches[JI].length;kI>0&&(this._matchesCountTotal+=kI,bI(this,aI,eI).call(this))},b=new WeakSet,N=function(){if(this._extractTextPromises.length>0)return;let JI=Promise.resolve();for(let yI=0,HI=this._linkService.pagesCount;yI<HI;yI++){const cI=(0,S.createPromiseCapability)();this._extractTextPromises[yI]=cI.promise,JI=JI.then(()=>this._pdfDocument.getPage(yI+1).then(CI=>CI.getTextContent()).then(CI=>{const AI=[];for(const KI of CI.items)AI.push(KI.str),KI.hasEOL&&AI.push(`
`);[this._pageContents[yI],this._pageDiffs[yI],this._hasDiacritics[yI]]=PI(AI.join("")),cI.resolve()},CI=>{console.error(`Unable to get text content for page ${yI+1}`,CI),this._pageContents[yI]="",this._pageDiffs[yI]=null,this._hasDiacritics[yI]=!1,cI.resolve()}))}},F=new WeakSet,hI=function(JI){this._scrollMatches&&this._selected.pageIdx===JI&&(this._linkService.page=JI+1),this._eventBus.dispatch("updatetextlayermatches",{source:this,pageIndex:JI})},YI=new WeakSet,nI=function(){this._eventBus.dispatch("updatetextlayermatches",{source:this,pageIndex:-1})},gI=new WeakSet,U=function(){const JI=this._state.findPrevious,yI=this._linkService.page-1,HI=this._linkService.pagesCount;if(this._highlightMatches=!0,this._dirtyMatch){this._dirtyMatch=!1,this._selected.pageIdx=this._selected.matchIdx=-1,this._offset.pageIdx=yI,this._offset.matchIdx=null,this._offset.wrapped=!1,this._resumePageIdx=null,this._pageMatches.length=0,this._pageMatchesLength.length=0,this._matchesCountTotal=0,bI(this,YI,nI).call(this);for(let CI=0;CI<HI;CI++)this._pendingFindMatches.has(CI)||(this._pendingFindMatches.add(CI),this._extractTextPromises[CI].then(()=>{this._pendingFindMatches.delete(CI),bI(this,o,X).call(this,CI)}))}if(R(this,m,d)===""){bI(this,A,W).call(this,lI.FOUND);return}if(this._resumePageIdx)return;const cI=this._offset;if(this._pagesToSearch=HI,cI.matchIdx!==null){const CI=this._pageMatches[cI.pageIdx].length;if(!JI&&cI.matchIdx+1<CI||JI&&cI.matchIdx>0){cI.matchIdx=JI?cI.matchIdx-1:cI.matchIdx+1,bI(this,e,w).call(this,!0);return}bI(this,BI,J).call(this,JI)}bI(this,mI,NI).call(this)},II=new WeakSet,q=function(JI){const yI=this._offset,HI=JI.length,cI=this._state.findPrevious;return HI?(yI.matchIdx=cI?HI-1:0,bI(this,e,w).call(this,!0),!0):(bI(this,BI,J).call(this,cI),yI.wrapped&&(yI.matchIdx=null,this._pagesToSearch<0)?(bI(this,e,w).call(this,!1),!0):!1)},mI=new WeakSet,NI=function(){this._resumePageIdx!==null&&console.error("There can only be one pending page.");let JI=null;do{const yI=this._offset.pageIdx;if(JI=this._pageMatches[yI],!JI){this._resumePageIdx=yI;break}}while(!bI(this,II,q).call(this,JI))},BI=new WeakSet,J=function(JI){const yI=this._offset,HI=this._linkService.pagesCount;yI.pageIdx=JI?yI.pageIdx-1:yI.pageIdx+1,yI.matchIdx=null,this._pagesToSearch--,(yI.pageIdx>=HI||yI.pageIdx<0)&&(yI.pageIdx=JI?HI-1:0,yI.wrapped=!0)},e=new WeakSet,w=function(JI=!1){let yI=lI.NOT_FOUND;const HI=this._offset.wrapped;if(this._offset.wrapped=!1,JI){const cI=this._selected.pageIdx;this._selected.pageIdx=this._offset.pageIdx,this._selected.matchIdx=this._offset.matchIdx,yI=HI?lI.WRAPPED:lI.FOUND,cI!==-1&&cI!==this._selected.pageIdx&&bI(this,F,hI).call(this,cI)}bI(this,A,W).call(this,yI,this._state.findPrevious),this._selected.pageIdx!==-1&&(this._scrollMatches=!0,bI(this,F,hI).call(this,this._selected.pageIdx))},x=new WeakSet,E=function(JI){const yI=this._pdfDocument;this._firstPageCapability.promise.then(()=>{!this._pdfDocument||yI&&this._pdfDocument!==yI||(this._findTimeout&&(clearTimeout(this._findTimeout),this._findTimeout=null),this._resumePageIdx&&(this._resumePageIdx=null,this._dirtyMatch=!0),bI(this,A,W).call(this,lI.FOUND),this._highlightMatches=!1,bI(this,YI,nI).call(this))})},P=new WeakSet,iI=function(){var JI;const{pageIdx:yI,matchIdx:HI}=this._selected;let cI=0,CI=this._matchesCountTotal;if(HI!==-1){for(let AI=0;AI<yI;AI++)cI+=((JI=this._pageMatches[AI])==null?void 0:JI.length)||0;cI+=HI+1}return(cI<1||cI>CI)&&(cI=CI=0),{current:cI,total:CI}},aI=new WeakSet,eI=function(){this._eventBus.dispatch("updatefindmatchescount",{source:this,matchesCount:bI(this,P,iI).call(this)})},A=new WeakSet,W=function(JI,yI=!1){var HI;this._eventBus.dispatch("updatefindcontrolstate",{source:this,state:JI,previous:yI,matchesCount:bI(this,P,iI).call(this),rawQuery:((HI=this._state)==null?void 0:HI.query)??null})},T.PDFFindController=SI},(z,T)=>{Object.defineProperty(T,"__esModule",{value:!0}),T.CharacterType=void 0,T.getCharacterType=a;const r={SPACE:0,ALPHA_LETTER:1,PUNCT:2,HAN_LETTER:3,KATAKANA_LETTER:4,HIRAGANA_LETTER:5,HALFWIDTH_KATAKANA_LETTER:6,THAI_LETTER:7};T.CharacterType=r;function Z(i){return i<11904}function p(i){return(i&65408)===0}function j(i){return i>=97&&i<=122||i>=65&&i<=90}function D(i){return i>=48&&i<=57}function m(i){return i===32||i===9||i===13||i===10}function d(i){return i>=13312&&i<=40959||i>=63744&&i<=64255}function C(i){return i>=12448&&i<=12543}function l(i){return i>=12352&&i<=12447}function B(i){return i>=65376&&i<=65439}function Y(i){return(i&65408)===3584}function a(i){return Z(i)?p(i)?m(i)?r.SPACE:j(i)||D(i)||i===95?r.ALPHA_LETTER:r.PUNCT:Y(i)?r.THAI_LETTER:i===160?r.SPACE:r.ALPHA_LETTER:d(i)?r.HAN_LETTER:C(i)?r.KATAKANA_LETTER:l(i)?r.HIRAGANA_LETTER:B(i)?r.HALFWIDTH_KATAKANA_LETTER:r.ALPHA_LETTER}},(z,T,r)=>{Object.defineProperty(T,"__esModule",{value:!0}),T.PDFHistory=void 0,T.isDestArraysEqual=B,T.isDestHashesEqual=l;var Z=r(7),p=r(19);const j=1e3,D=50,m=1e3;function d(){return document.location.hash}class C{constructor({linkService:a,eventBus:i}){this.linkService=a,this.eventBus=i,this._initialized=!1,this._fingerprint="",this.reset(),this._boundEvents=null,this.eventBus._on("pagesinit",()=>{this._isPagesLoaded=!1,this.eventBus._on("pagesloaded",I=>{this._isPagesLoaded=!!I.pagesCount},{once:!0})})}initialize({fingerprint:a,resetHistory:i=!1,updateUrl:I=!1}){if(!a||typeof a!="string"){console.error('PDFHistory.initialize: The "fingerprint" must be a non-empty string.');return}this._initialized&&this.reset();const g=this._fingerprint!==""&&this._fingerprint!==a;this._fingerprint=a,this._updateUrl=I===!0,this._initialized=!0,this._bindEvents();const o=window.history.state;if(this._popStateInProgress=!1,this._blockHashChange=0,this._currentHash=d(),this._numPositionUpdates=0,this._uid=this._maxUid=0,this._destination=null,this._position=null,!this._isValidState(o,!0)||i){const{hash:b,page:N,rotation:F}=this._parseCurrentHash(!0);if(!b||g||i){this._pushOrReplaceState(null,!0);return}this._pushOrReplaceState({hash:b,page:N,rotation:F},!0);return}const X=o.destination;this._updateInternalState(X,o.uid,!0),X.rotation!==void 0&&(this._initialRotation=X.rotation),X.dest?(this._initialBookmark=JSON.stringify(X.dest),this._destination.page=null):X.hash?this._initialBookmark=X.hash:X.page&&(this._initialBookmark=`page=${X.page}`)}reset(){this._initialized&&(this._pageHide(),this._initialized=!1,this._unbindEvents()),this._updateViewareaTimeout&&(clearTimeout(this._updateViewareaTimeout),this._updateViewareaTimeout=null),this._initialBookmark=null,this._initialRotation=null}push({namedDest:a=null,explicitDest:i,pageNumber:I}){if(!this._initialized)return;if(a&&typeof a!="string"){console.error(`PDFHistory.push: "${a}" is not a valid namedDest parameter.`);return}else if(Array.isArray(i)){if(!this._isValidPage(I)&&(I!==null||this._destination)){console.error(`PDFHistory.push: "${I}" is not a valid pageNumber parameter.`);return}}else{console.error(`PDFHistory.push: "${i}" is not a valid explicitDest parameter.`);return}const g=a||JSON.stringify(i);if(!g)return;let o=!1;if(this._destination&&(l(this._destination.hash,g)||B(this._destination.dest,i))){if(this._destination.page)return;o=!0}this._popStateInProgress&&!o||(this._pushOrReplaceState({dest:i,hash:g,page:I,rotation:this.linkService.rotation},o),this._popStateInProgress||(this._popStateInProgress=!0,Promise.resolve().then(()=>{this._popStateInProgress=!1})))}pushPage(a){var i;if(this._initialized){if(!this._isValidPage(a)){console.error(`PDFHistory.pushPage: "${a}" is not a valid page number.`);return}((i=this._destination)==null?void 0:i.page)!==a&&(this._popStateInProgress||(this._pushOrReplaceState({dest:null,hash:`page=${a}`,page:a,rotation:this.linkService.rotation}),this._popStateInProgress||(this._popStateInProgress=!0,Promise.resolve().then(()=>{this._popStateInProgress=!1}))))}}pushCurrentPosition(){!this._initialized||this._popStateInProgress||this._tryPushCurrentPosition()}back(){if(!this._initialized||this._popStateInProgress)return;const a=window.history.state;this._isValidState(a)&&a.uid>0&&window.history.back()}forward(){if(!this._initialized||this._popStateInProgress)return;const a=window.history.state;this._isValidState(a)&&a.uid<this._maxUid&&window.history.forward()}get popStateInProgress(){return this._initialized&&(this._popStateInProgress||this._blockHashChange>0)}get initialBookmark(){return this._initialized?this._initialBookmark:null}get initialRotation(){return this._initialized?this._initialRotation:null}_pushOrReplaceState(a,i=!1){const I=i||!this._destination,g={fingerprint:this._fingerprint,uid:I?this._uid:this._uid+1,destination:a};this._updateInternalState(a,g.uid);let o;if(this._updateUrl&&a!=null&&a.hash){const X=document.location.href.split("#")[0];X.startsWith("file://")||(o=`${X}#${a.hash}`)}I?window.history.replaceState(g,"",o):window.history.pushState(g,"",o)}_tryPushCurrentPosition(a=!1){if(!this._position)return;let i=this._position;if(a&&(i=Object.assign(Object.create(null),this._position),i.temporary=!0),!this._destination){this._pushOrReplaceState(i);return}if(this._destination.temporary){this._pushOrReplaceState(i,!0);return}if(this._destination.hash===i.hash||!this._destination.page&&this._numPositionUpdates<=D)return;let I=!1;if(this._destination.page>=i.first&&this._destination.page<=i.page){if(this._destination.dest!==void 0||!this._destination.first)return;I=!0}this._pushOrReplaceState(i,I)}_isValidPage(a){return Number.isInteger(a)&&a>0&&a<=this.linkService.pagesCount}_isValidState(a,i=!1){if(!a)return!1;if(a.fingerprint!==this._fingerprint)if(i){if(typeof a.fingerprint!="string"||a.fingerprint.length!==this._fingerprint.length)return!1;const[I]=performance.getEntriesByType("navigation");if((I==null?void 0:I.type)!=="reload")return!1}else return!1;return!(!Number.isInteger(a.uid)||a.uid<0||a.destination===null||typeof a.destination!="object")}_updateInternalState(a,i,I=!1){this._updateViewareaTimeout&&(clearTimeout(this._updateViewareaTimeout),this._updateViewareaTimeout=null),I&&a!=null&&a.temporary&&delete a.temporary,this._destination=a,this._uid=i,this._maxUid=Math.max(this._maxUid,i),this._numPositionUpdates=0}_parseCurrentHash(a=!1){const i=unescape(d()).substring(1),I=(0,Z.parseQueryString)(i),g=I.get("nameddest")||"";let o=I.get("page")|0;return(!this._isValidPage(o)||a&&g.length>0)&&(o=null),{hash:i,page:o,rotation:this.linkService.rotation}}_updateViewarea({location:a}){this._updateViewareaTimeout&&(clearTimeout(this._updateViewareaTimeout),this._updateViewareaTimeout=null),this._position={hash:a.pdfOpenParams.substring(1),page:this.linkService.page,first:a.pageNumber,rotation:a.rotation},!this._popStateInProgress&&(this._isPagesLoaded&&this._destination&&!this._destination.page&&this._numPositionUpdates++,this._updateViewareaTimeout=setTimeout(()=>{this._popStateInProgress||this._tryPushCurrentPosition(!0),this._updateViewareaTimeout=null},m))}_popState({state:a}){const i=d(),I=this._currentHash!==i;if(this._currentHash=i,!a){this._uid++;const{hash:o,page:X,rotation:b}=this._parseCurrentHash();this._pushOrReplaceState({hash:o,page:X,rotation:b},!0);return}if(!this._isValidState(a))return;this._popStateInProgress=!0,I&&(this._blockHashChange++,(0,p.waitOnEventOrTimeout)({target:window,name:"hashchange",delay:j}).then(()=>{this._blockHashChange--}));const g=a.destination;this._updateInternalState(g,a.uid,!0),(0,Z.isValidRotation)(g.rotation)&&(this.linkService.rotation=g.rotation),g.dest?this.linkService.goToDestination(g.dest):g.hash?this.linkService.setHash(g.hash):g.page&&(this.linkService.page=g.page),Promise.resolve().then(()=>{this._popStateInProgress=!1})}_pageHide(){(!this._destination||this._destination.temporary)&&this._tryPushCurrentPosition()}_bindEvents(){this._boundEvents||(this._boundEvents={updateViewarea:this._updateViewarea.bind(this),popState:this._popState.bind(this),pageHide:this._pageHide.bind(this)},this.eventBus._on("updateviewarea",this._boundEvents.updateViewarea),window.addEventListener("popstate",this._boundEvents.popState),window.addEventListener("pagehide",this._boundEvents.pageHide))}_unbindEvents(){this._boundEvents&&(this.eventBus._off("updateviewarea",this._boundEvents.updateViewarea),window.removeEventListener("popstate",this._boundEvents.popState),window.removeEventListener("pagehide",this._boundEvents.pageHide),this._boundEvents=null)}}T.PDFHistory=C;function l(Y,a){return typeof Y!="string"||typeof a!="string"?!1:Y===a||(0,Z.parseQueryString)(Y).get("nameddest")===a}function B(Y,a){function i(I,g){if(typeof I!=typeof g||Array.isArray(I)||Array.isArray(g))return!1;if(I!==null&&typeof I=="object"&&g!==null){if(Object.keys(I).length!==Object.keys(g).length)return!1;for(const o in I)if(!i(I[o],g[o]))return!1;return!0}return I===g||Number.isNaN(I)&&Number.isNaN(g)}if(!(Array.isArray(Y)&&Array.isArray(a))||Y.length!==a.length)return!1;for(let I=0,g=Y.length;I<g;I++)if(!i(Y[I],a[I]))return!1;return!0}},(z,T,r)=>{Object.defineProperty(T,"__esModule",{value:!0}),T.PDFScriptingManager=void 0;var Z=r(7),p=r(3);class j{constructor({eventBus:m,sandboxBundleSrc:d=null,scriptingFactory:C=null,docPropertiesLookup:l=null}){this._pdfDocument=null,this._pdfViewer=null,this._closeCapability=null,this._destroyCapability=null,this._scripting=null,this._mouseState=Object.create(null),this._ready=!1,this._eventBus=m,this._sandboxBundleSrc=d,this._scriptingFactory=C,this._docPropertiesLookup=l,this._scriptingFactory||window.addEventListener("updatefromsandbox",B=>{this._eventBus.dispatch("updatefromsandbox",{source:window,detail:B.detail})})}setViewer(m){this._pdfViewer=m}async setDocument(m){var d;if(this._pdfDocument&&await this._destroyScripting(),this._pdfDocument=m,!m)return;const[C,l,B]=await Promise.all([m.getFieldObjects(),m.getCalculationOrderIds(),m.getJSActions()]);if(!C&&!B){await this._destroyScripting();return}if(m===this._pdfDocument){try{this._scripting=this._createScripting()}catch(Y){console.error(`PDFScriptingManager.setDocument: "${Y==null?void 0:Y.message}".`),await this._destroyScripting();return}this._internalEvents.set("updatefromsandbox",Y=>{(Y==null?void 0:Y.source)===window&&this._updateFromSandbox(Y.detail)}),this._internalEvents.set("dispatcheventinsandbox",Y=>{var a;(a=this._scripting)==null||a.dispatchEventInSandbox(Y.detail)}),this._internalEvents.set("pagechanging",({pageNumber:Y,previous:a})=>{Y!==a&&(this._dispatchPageClose(a),this._dispatchPageOpen(Y))}),this._internalEvents.set("pagerendered",({pageNumber:Y})=>{this._pageOpenPending.has(Y)&&Y===this._pdfViewer.currentPageNumber&&this._dispatchPageOpen(Y)}),this._internalEvents.set("pagesdestroy",async Y=>{var a,i;await this._dispatchPageClose(this._pdfViewer.currentPageNumber),await((a=this._scripting)==null?void 0:a.dispatchEventInSandbox({id:"doc",name:"WillClose"})),(i=this._closeCapability)==null||i.resolve()}),this._domEvents.set("mousedown",Y=>{this._mouseState.isDown=!0}),this._domEvents.set("mouseup",Y=>{this._mouseState.isDown=!1});for(const[Y,a]of this._internalEvents)this._eventBus._on(Y,a);for(const[Y,a]of this._domEvents)window.addEventListener(Y,a,!0);try{const Y=await this._getDocProperties();if(m!==this._pdfDocument)return;await this._scripting.createSandbox({objects:C,calculationOrder:l,appInfo:{platform:navigator.platform,language:navigator.language},docInfo:{...Y,actions:B}}),this._eventBus.dispatch("sandboxcreated",{source:this})}catch(Y){console.error(`PDFScriptingManager.setDocument: "${Y==null?void 0:Y.message}".`),await this._destroyScripting();return}await((d=this._scripting)==null?void 0:d.dispatchEventInSandbox({id:"doc",name:"Open"})),await this._dispatchPageOpen(this._pdfViewer.currentPageNumber,!0),Promise.resolve().then(()=>{m===this._pdfDocument&&(this._ready=!0)})}}async dispatchWillSave(m){var d;return(d=this._scripting)==null?void 0:d.dispatchEventInSandbox({id:"doc",name:"WillSave"})}async dispatchDidSave(m){var d;return(d=this._scripting)==null?void 0:d.dispatchEventInSandbox({id:"doc",name:"DidSave"})}async dispatchWillPrint(m){var d;return(d=this._scripting)==null?void 0:d.dispatchEventInSandbox({id:"doc",name:"WillPrint"})}async dispatchDidPrint(m){var d;return(d=this._scripting)==null?void 0:d.dispatchEventInSandbox({id:"doc",name:"DidPrint"})}get mouseState(){return this._mouseState}get destroyPromise(){var m;return((m=this._destroyCapability)==null?void 0:m.promise)||null}get ready(){return this._ready}get _internalEvents(){return(0,p.shadow)(this,"_internalEvents",new Map)}get _domEvents(){return(0,p.shadow)(this,"_domEvents",new Map)}get _pageOpenPending(){return(0,p.shadow)(this,"_pageOpenPending",new Set)}get _visitedPages(){return(0,p.shadow)(this,"_visitedPages",new Map)}async _updateFromSandbox(m){var d;const C=this._pdfViewer.isInPresentationMode||this._pdfViewer.isChangingPresentationMode,{id:l,siblings:B,command:Y,value:a}=m;if(!l){switch(Y){case"clear":console.clear();break;case"error":console.error(a);break;case"layout":if(C)return;const I=(0,Z.apiPageLayoutToViewerModes)(a);this._pdfViewer.spreadMode=I.spreadMode;break;case"page-num":this._pdfViewer.currentPageNumber=a+1;break;case"print":await this._pdfViewer.pagesPromise,this._eventBus.dispatch("print",{source:this});break;case"println":console.log(a);break;case"zoom":if(C)return;this._pdfViewer.currentScaleValue=a;break;case"SaveAs":this._eventBus.dispatch("download",{source:this});break;case"FirstPage":this._pdfViewer.currentPageNumber=1;break;case"LastPage":this._pdfViewer.currentPageNumber=this._pdfViewer.pagesCount;break;case"NextPage":this._pdfViewer.nextPage();break;case"PrevPage":this._pdfViewer.previousPage();break;case"ZoomViewIn":if(C)return;this._pdfViewer.increaseScale();break;case"ZoomViewOut":if(C)return;this._pdfViewer.decreaseScale();break}return}if(C&&m.focus)return;delete m.id,delete m.siblings;const i=B?[l,...B]:[l];for(const I of i){const g=document.querySelector(`[data-element-id="${I}"]`);g?g.dispatchEvent(new CustomEvent("updatefromsandbox",{detail:m})):(d=this._pdfDocument)==null||d.annotationStorage.setValue(I,m)}}async _dispatchPageOpen(m,d=!1){const C=this._pdfDocument,l=this._visitedPages;if(d&&(this._closeCapability=(0,p.createPromiseCapability)()),!this._closeCapability)return;const B=this._pdfViewer.getPageView(m-1);if((B==null?void 0:B.renderingState)!==Z.RenderingStates.FINISHED){this._pageOpenPending.add(m);return}this._pageOpenPending.delete(m);const Y=(async()=>{var a,i;const I=await(l.has(m)?null:(a=B.pdfPage)==null?void 0:a.getJSActions());C===this._pdfDocument&&await((i=this._scripting)==null?void 0:i.dispatchEventInSandbox({id:"page",name:"PageOpen",pageNumber:m,actions:I}))})();l.set(m,Y)}async _dispatchPageClose(m){var d;const C=this._pdfDocument,l=this._visitedPages;if(!this._closeCapability||this._pageOpenPending.has(m))return;const B=l.get(m);B&&(l.set(m,null),await B,C===this._pdfDocument&&await((d=this._scripting)==null?void 0:d.dispatchEventInSandbox({id:"page",name:"PageClose",pageNumber:m})))}async _getDocProperties(){if(this._docPropertiesLookup)return this._docPropertiesLookup(this._pdfDocument);const{docPropertiesLookup:m}=r(26);return m(this._pdfDocument)}_createScripting(){if(this._destroyCapability=(0,p.createPromiseCapability)(),this._scripting)throw new Error("_createScripting: Scripting already exists.");if(this._scriptingFactory)return this._scriptingFactory.createScripting({sandboxBundleSrc:this._sandboxBundleSrc});const{GenericScripting:m}=r(26);return new m(this._sandboxBundleSrc)}async _destroyScripting(){var m,d;if(!this._scripting){this._pdfDocument=null,(m=this._destroyCapability)==null||m.resolve();return}this._closeCapability&&(await Promise.race([this._closeCapability.promise,new Promise(C=>{setTimeout(C,1e3)})]).catch(C=>{}),this._closeCapability=null),this._pdfDocument=null;try{await this._scripting.destroySandbox()}catch{}for(const[C,l]of this._internalEvents)this._eventBus._off(C,l);this._internalEvents.clear();for(const[C,l]of this._domEvents)window.removeEventListener(C,l,!0);this._domEvents.clear(),this._pageOpenPending.clear(),this._visitedPages.clear(),this._scripting=null,delete this._mouseState.isDown,this._ready=!1,(d=this._destroyCapability)==null||d.resolve()}}T.PDFScriptingManager=j},(z,T,r)=>{Object.defineProperty(T,"__esModule",{value:!0}),T.GenericScripting=void 0,T.docPropertiesLookup=p;var Z=r(3);async function p(D){const m="",d=m.split("#")[0];let{info:C,metadata:l,contentDispositionFilename:B,contentLength:Y}=await D.getMetadata();if(!Y){const{length:a}=await D.getDownloadInfo();Y=a}return{...C,baseURL:d,filesize:Y,filename:B||(0,Z.getPdfFilenameFromUrl)(m),metadata:l==null?void 0:l.getRaw(),authors:l==null?void 0:l.get("dc:creator"),numPages:D.numPages,URL:m}}class j{constructor(m){this._ready=(0,Z.loadScript)(m,!0).then(()=>window.pdfjsSandbox.QuickJSSandbox())}async createSandbox(m){(await this._ready).create(m)}async dispatchEventInSandbox(m){const d=await this._ready;setTimeout(()=>d.dispatchEvent(m),0)}async destroySandbox(){(await this._ready).nukeSandbox()}}T.GenericScripting=j}],h={};function M(z){var T=h[z];if(T!==void 0)return T.exports;var r=h[z]={exports:{}};return $[z](r,r.exports,M),r.exports}var _={};return(()=>{var z=_;Object.defineProperty(z,"__esModule",{value:!0}),Object.defineProperty(z,"AnnotationLayerBuilder",{enumerable:!0,get:function(){return j.AnnotationLayerBuilder}}),Object.defineProperty(z,"DefaultAnnotationLayerFactory",{enumerable:!0,get:function(){return T.DefaultAnnotationLayerFactory}}),Object.defineProperty(z,"DefaultStructTreeLayerFactory",{enumerable:!0,get:function(){return T.DefaultStructTreeLayerFactory}}),Object.defineProperty(z,"DefaultTextLayerFactory",{enumerable:!0,get:function(){return T.DefaultTextLayerFactory}}),Object.defineProperty(z,"DefaultXfaLayerFactory",{enumerable:!0,get:function(){return T.DefaultXfaLayerFactory}}),Object.defineProperty(z,"DownloadManager",{enumerable:!0,get:function(){return D.DownloadManager}}),Object.defineProperty(z,"EventBus",{enumerable:!0,get:function(){return m.EventBus}}),Object.defineProperty(z,"GenericL10n",{enumerable:!0,get:function(){return d.GenericL10n}}),Object.defineProperty(z,"LinkTarget",{enumerable:!0,get:function(){return r.LinkTarget}}),Object.defineProperty(z,"NullL10n",{enumerable:!0,get:function(){return C.NullL10n}}),Object.defineProperty(z,"PDFFindController",{enumerable:!0,get:function(){return l.PDFFindController}}),Object.defineProperty(z,"PDFHistory",{enumerable:!0,get:function(){return B.PDFHistory}}),Object.defineProperty(z,"PDFLinkService",{enumerable:!0,get:function(){return r.PDFLinkService}}),Object.defineProperty(z,"PDFPageView",{enumerable:!0,get:function(){return Y.PDFPageView}}),Object.defineProperty(z,"PDFScriptingManager",{enumerable:!0,get:function(){return a.PDFScriptingManager}}),Object.defineProperty(z,"PDFSinglePageViewer",{enumerable:!0,get:function(){return p.PDFSinglePageViewer}}),Object.defineProperty(z,"PDFViewer",{enumerable:!0,get:function(){return p.PDFViewer}}),Object.defineProperty(z,"ProgressBar",{enumerable:!0,get:function(){return Z.ProgressBar}}),Object.defineProperty(z,"RenderingStates",{enumerable:!0,get:function(){return Z.RenderingStates}}),Object.defineProperty(z,"ScrollMode",{enumerable:!0,get:function(){return Z.ScrollMode}}),Object.defineProperty(z,"SimpleLinkService",{enumerable:!0,get:function(){return r.SimpleLinkService}}),Object.defineProperty(z,"SpreadMode",{enumerable:!0,get:function(){return Z.SpreadMode}}),Object.defineProperty(z,"StructTreeLayerBuilder",{enumerable:!0,get:function(){return i.StructTreeLayerBuilder}}),Object.defineProperty(z,"TextLayerBuilder",{enumerable:!0,get:function(){return I.TextLayerBuilder}}),Object.defineProperty(z,"XfaLayerBuilder",{enumerable:!0,get:function(){return g.XfaLayerBuilder}}),Object.defineProperty(z,"parseQueryString",{enumerable:!0,get:function(){return Z.parseQueryString}});var T=M(1),r=M(6),Z=M(7),p=M(11),j=M(5),D=M(18),m=M(19),d=M(20),C=M(4),l=M(22),B=M(24),Y=M(13),a=M(25),i=M(8),I=M(9),g=M(10)})(),_})())})(pdf_viewer);var pdf_viewerExports=pdf_viewer.exports;const INTERNAL_LINK="internal-link",LINK="link",FILE_ATTACHMENT="file-attachment",FORM_TEXT="form-text",FORM_SELECT="form-select",FORM_CHECKBOX="form-checkbox",FORM_RADIO="form-radio",FORM_BUTTON="form-button",EVENTS_TO_HANDLER=["click","dblclick","mouseover","input","change"];function getAnnotationsByKey(wI,c,$){const h=[];if($)for(const M of $)M[wI]===c&&h.push(M);return h}function buildAnnotationData(wI,c){return{type:wI,data:c}}function inputAnnotation(wI,c){switch(wI.type){case"textarea":case"text":return buildAnnotationData(FORM_TEXT,{fieldName:wI.name,value:wI.value});case"select-one":case"select-multiple":const $=[];for(const M of wI.options)$.push({value:M.value,label:M.label});const h=[];for(const M of wI.selectedOptions)h.push({value:M.value,label:M.label});return buildAnnotationData(FORM_SELECT,{fieldName:wI.name,value:h,options:$});case"checkbox":return buildAnnotationData(FORM_CHECKBOX,{fieldName:wI.name,checked:wI.checked});case"radio":return buildAnnotationData(FORM_RADIO,{fieldName:wI.name,...c});case"button":return buildAnnotationData(FORM_BUTTON,{fieldName:wI.name,...c})}}function fileAnnotation(wI){return buildAnnotationData(FILE_ATTACHMENT,wI.file)}async function linkAnnotation(wI,c){if(wI.dest){if(typeof wI.dest=="string")return buildAnnotationData(INTERNAL_LINK,{referencedPage:Number(wI.dest.substring(1,wI.dest.length)),offset:null});{const $=await c.getPageIndex(wI.dest[0]);return buildAnnotationData(INTERNAL_LINK,{referencedPage:$+1,offset:{left:wI.dest[2],bottom:wI.dest[3]}})}}else if(wI.url)return buildAnnotationData(LINK,{url:wI.url,unsafeUrl:wI.unsafeUrl})}function annotationEventsHandler(wI,c,$){var h;let M=wI.target.parentNode;if(M.tagName==="DIV"&&(M=M.firstChild),M.className==="linkAnnotation"&&wI.type==="click"){const _=(h=M.dataset)==null?void 0:h.annotationId;if(_)return linkAnnotation(getAnnotationsByKey("id",_,$)[0],c)}else if(["popupAnnotation","textAnnotation","fileAttachmentAnnotation"].includes(M.className)){for(const _ of M.getElementsByTagName("span")){let z=_.textContent;const T=JSON.parse(_.dataset.l10nArgs??"{}");if(z)for(const r in T)z=z.replace(`{{${r}}}`,T[r]);_.textContent=z}if(M.className==="fileAttachmentAnnotation"&&wI.type==="dblclick"){const _=M.dataset.annotationId;if(_)return fileAnnotation(getAnnotationsByKey("id",_,$)[0])}}else if(M.className==="textWidgetAnnotation"&&wI.type==="input"){let _=M.getElementsByTagName("input")[0];return _||(_=M.getElementsByTagName("textarea")[0]),inputAnnotation(_)}else{if(M.className==="choiceWidgetAnnotation"&&wI.type==="input")return inputAnnotation(M.getElementsByTagName("select")[0]);if(M.className==="buttonWidgetAnnotation checkBox"&&wI.type==="change")return inputAnnotation(M.getElementsByTagName("input")[0]);if(M.className==="buttonWidgetAnnotation radioButton"&&wI.type==="change"){const _=M.dataset.annotationId;if(_){const z=getAnnotationsByKey("id",_,$)[0],T=[];for(const r of getAnnotationsByKey("fieldName",z.fieldName,$))r.buttonValue&&T.push(r.buttonValue);return inputAnnotation(M.getElementsByTagName("input")[0],{value:z.buttonValue,defaultValue:z.fieldValue,options:T})}}else if(M.className==="buttonWidgetAnnotation pushButton"&&wI.type==="click"){const _=M.dataset.annotationId;if(_){const z=getAnnotationsByKey("id",_,$)[0];return z.resetForm?inputAnnotation({name:z.fieldName,type:"button"},{actions:z.actions,reset:!0}):inputAnnotation({name:z.fieldName,type:"button"},{actions:z.actions,reset:!1})}}}}const _sfc_main=defineComponent({__name:"VuePDF",props:{pdf:null,page:{default:1},scale:{default:1},rotation:null,fitParent:{type:Boolean},annotationsFilter:null,textLayer:{type:Boolean},annotationLayer:{type:Boolean}},emits:["annotation","loaded"],setup(wI,{expose:c,emit:$}){const h=wI,M=ref(),_=ref(),z=ref(),T=ref(),r=ref(),Z=ref(!0);let p=[],j=null,D=!1,m=!1,d={};function C(g){$("loaded",g)}function l(g){$("annotation",g)}function B(g){const o=annotationEventsHandler(g,j,p);Promise.resolve(o).then(X=>{X&&l(X)})}function Y(g){j==null||j.getPage(g).then(o=>{let X=!1,b=h.scale;if(h.fitParent){const nI=T.value.parentNode.clientWidth,gI=o.getViewport({scale:1}).width;b=nI/gI}const N={scale:b};typeof h.rotation=="number"&&h.rotation%90===0&&(N.rotation=h.rotation);const F=o.getViewport(N),hI=M.value.getContext("2d");M.value.width=F.width,M.value.height=F.height,M.value.style.width=`${F.width}px`,M.value.style.height=`${F.height}px`,r.value.style.width=`${F.width}px`,r.value.style.height=`${F.height}px`;const YI={canvasContext:hI,viewport:F};o.render(YI).promise.then(()=>{Z.value=!1,h.textLayer&&o.getTextContent().then(nI=>{_.value.style.height=`${M.value.offsetHeight}px`,_.value.style.width=`${M.value.offsetWidth}px`;const gI=new pdf_viewerExports.TextLayerBuilder({textLayerDiv:_.value,pageIndex:o._pageIndex,eventBus:new pdf_viewerExports.EventBus,viewport:F,enhanceTextSelection:!1});gI.setTextContent(nI),gI.render(),D=!0}),h.annotationLayer&&(X=!0,o.getAnnotations().then(nI=>{z.value.style.height=`${M.value.offsetHeight}px`,z.value.style.width=`${M.value.offsetWidth}px`,h.annotationsFilter&&(nI=nI.filter(U=>{const II=h.annotationsFilter,q=U.subtype,mI=U.fieldType?`${q}.${U.fieldType}`:null;return(II==null?void 0:II.includes(q))||mI!==null&&(II==null?void 0:II.includes(mI))}));const gI=new Map([]);for(const U of nI)if(U.subtype==="Widget"&&U.fieldType==="Btn"&&U.pushButton){const II=U.rect[2]-U.rect[0],q=U.rect[3]-U.rect[1],mI=document.createElement("canvas");mI.setAttribute("width",(II*b).toString()),mI.setAttribute("height",(q*b).toString()),gI.set(U.id,mI)}pdfExports.AnnotationLayer.render({annotations:nI,viewport:F.clone({dontFlip:!0}),page:o,linkService:new pdf_viewerExports.SimpleLinkService,div:z.value,enableScripting:!0,hasJSActions:!0,annotationCanvasMap:gI,fieldObjects:d}),p=nI,m=!0,C({...F,annotations:p});for(const U of EVENTS_TO_HANDLER)z.value.addEventListener(U,B)})),X||C(F)})})}function a(){var g,o,X,b,N,F;(o=(g=_.value).replaceChildren)==null||o.call(g),(b=(X=z.value).replaceChildren)==null||b.call(X);for(const hI of EVENTS_TO_HANDLER)(F=(N=z.value).removeEventListener)==null||F.call(N,hI,B)}function i(g){g.promise.then(o=>{j=o,j.getFieldObjects().then(X=>{X&&(d=X)}),Y(h.page)})}watch(()=>h.pdf,g=>{g!==void 0&&(a(),i(g))}),watch(()=>h.textLayer,g=>{g&&(D||Y(h.page))}),watch(()=>h.annotationLayer,g=>{g&&(m||Y(h.page))}),watch(()=>h.annotationsFilter,()=>{a(),Y(h.page)}),watch(()=>h.scale,g=>{a(),Y(h.page)}),watch(()=>h.rotation,g=>{a(),Y(h.page)}),watch(()=>h.page,g=>{a(),Y(g)}),onMounted(()=>{h.pdf!==void 0&&i(h.pdf)});function I(){a(),Y(h.page)}return c({reload:I}),(g,o)=>(openBlock(),createElementBlock("span",{ref_key:"ContainerREF",ref:T,style:{position:"relative",display:"inline-block"}},[createBaseVNode("canvas",{ref_key:"CanvasREF",ref:M,style:{display:"inline-block"}},null,512),withDirectives(createBaseVNode("div",{ref_key:"AnnotationlayerREF",ref:z,class:"annotationLayer",style:{display:"block"}},null,512),[[vShow,wI.annotationLayer]]),withDirectives(createBaseVNode("div",{ref_key:"TextlayerREF",ref:_,class:"textLayer",style:{display:"block"}},null,512),[[vShow,wI.textLayer]]),withDirectives(createBaseVNode("div",{ref_key:"LoadlayerREF",ref:r,style:{display:"block"},class:"loadingLayer"},[renderSlot(g.$slots,"default")],512),[[vShow,Z.value]])],512))}}),PDFWorker="data:application/javascript;base64,";pdfExports.GlobalWorkerOptions.workerSrc=PDFWorker;function usePDF(wI,c={onProgress:void 0,onPassword:void 0,onError:void 0,password:""}){const $=shallowRef(),h=shallowRef(0),M=shallowRef({}),_=pdfExports.getDocument(wI);if(c.onProgress&&(_.onProgress=c.onProgress),c.onPassword)_.onPassword=c.onPassword;else if(c.password){const z=(T,r)=>{T(c.password??"")};_.onPassword=z}return _.promise.then(async z=>{$.value=z.loadingTask,h.value=z.numPages;const T=await z.getMetadata(),r=await z.getAttachments(),Z=await z.getJavaScript();M.value={metadata:T,attachments:r,javascript:Z}},z=>{typeof c.onError=="function"&&c.onError(z)}),{pdf:$,pages:h,info:M}}export{_sfc_main as _,usePDF as u};
